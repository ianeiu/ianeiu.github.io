<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式 on 吴炜棉</title>
    <link>https://ianeiu.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/</link>
    <description>Recent content in 分布式 on 吴炜棉</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 25 Jul 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://ianeiu.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>redis笔记</title>
      <link>https://ianeiu.github.io/p/redis%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/p/redis%E7%AC%94%E8%AE%B0/</guid>
      <description>redis Redis本质上是一个Key-Value类型的内存数据库，支持保存多种数据结构，整个数据库统统加载在内存当中进行操作，定期通过异步操作把数据库数据flush到硬盘上进行保存。
因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。
Redis的主要缺点是数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。
配置  daemonize：是否以后台进程运行，默认为no。Windows下不支持修改 。Linux平台下可以改为yes，这样就不用为了启动Redis而单独保留一个shell窗口。 pidfile：如以后台进程运行，则需指定一个pid，默认为/var/run/redis.pid。Windows下不支持修改。 bind：绑定主机IP，默认值为127.0.0.1（注释） protected-mode：以保护模式运行，默认yes port： 监听端口，默认为6379 timeout： 超时时间，默认为300（秒） loglevel： 日志记录等级，有4个可选值，debug，verbose（默认值），notice，warning logfile： 日志记录方式，默认值为stdout databases： 可用数据库数，默认值为16，默认数据库为0 save ： 指出在多长时间内，有多少次更新操作，就将数据同步到数据文件。这个可以多个条件配合，比如默认配置文件中的设置，就设置了三个条件。  save 900 1 900秒（15分钟）内至少有1个key被改变 save 300 10 300秒（5分钟）内至少有10个key被改变 save 60 10000 60秒内至少有10000个key被改变   rdbcompression： 存储至本地数据库时是否压缩数据，默认为yes dbfilename： 本地数据库文件名，默认值为dump.rdb dir： 本地数据库存放路径，默认值为 ./ slaveof： 当本机为从服务时，设置主服务的IP及端口（注释） masterauth： 当本机为从服务时，设置主服务的连接密码（注释） requirepass 连接密码（注释） maxclients： 最大客户端连接数，默认不限制（注释） maxmemory ： 设置最大内存，达到最大内存设置后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理后，任到达最大内存设置，将无法再进行写入操作。（注释） appendonly： 是否在每次更新操作后进行日志记录，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认值为no appendfilename： 更新日志文件名，默认值为appendonly.aof（注释） appendfsync： 更新日志条件，共有3个可选值。no表示等操作系统进行数据缓存同步到磁盘，always表示每次更新操作后手动调用fsync()将数据写到磁盘，everysec表示每秒同步一次（默认值）。 vm-enabled： 是否使用虚拟内存，默认值为no vm-swap-file： 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享 vm-max-memory： 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0。  命令  info replication 查看信息，本机角色（master、slave）、ip、端口、状态  哨兵配置 # 这个是Redis6379配置内容，其他文件同理新增然后改一下端口即可，26380 26381 #当前Sentinel服务运行的端口 port 26381 bind 127.</description>
    </item>
    
  </channel>
</rss>
