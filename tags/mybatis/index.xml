<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mybatis on 吴炜棉</title>
    <link>https://ianeiu.github.io/tags/mybatis/</link>
    <description>Recent content in Mybatis on 吴炜棉</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 09 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://ianeiu.github.io/tags/mybatis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mybatis之面试篇</title>
      <link>https://ianeiu.github.io/p/mybatis%E4%B9%8B%E9%9D%A2%E8%AF%95%E7%AF%87/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/p/mybatis%E4%B9%8B%E9%9D%A2%E8%AF%95%E7%AF%87/</guid>
      <description>#{}和${}的区别？ ${}是Properties文件中的变量占位符，它可以用于标签属性值和sql内部，属于静态文本替换。
#{}是sql的参数占位符，Mybatis会将sql中的#{}替换为?号，在sql执行前会使用PreparedStatement的参数设置方法，按序给sql的?号占位符设置参数值
最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？ Dao接口的全限定名，就是映射文件中的namespace的值；接口的方法名，就是映射文件中MappedStatement的id值；接口方法内的参数，就是传递给sql的参数。
Mapper接口是没有实现类的，当调用接口方法时，全限定名+方法名作为key值，可唯一定位一个MappedStatement。
Dao接口里的方法，是不能重载的，因为是全限名+方法名的保存和寻找策略。
Dao接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Dao接口生成代理proxy对象，代理对象proxy会拦截接口方法，转而执行MappedStatement所代表的sql，然后将sql执行结果返回。
mybatis是如何分页的  SQL带参直接分页 使用拦截器分页
分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。 RowBounds分页
Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页。数据量小时，RowBounds不失为一种好办法。但是数据量大时，实现拦截器就很有必要了。  Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？  使用标签，逐一定义列名和对象属性名之间的映射关系。 使用sql列的别名功能，将列别名书（不区分大小写）写为对象属性名，比如TNAME AS NAME  Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？ Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。
原理：使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。
Mybatis都有哪些Executor执行器？它们之间的区别是什么？ Mybatis有三种基本的Executor执行器，SimpleExecutor、ReuseExecutor、BatchExecutor。
SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。
ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。
BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。
作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。
Mybatis是否可以映射Enum枚举类 Mybatis可以映射枚举类，不单可以映射枚举类，Mybatis可以映射任何对象到表的一列上。映射方式为自定义一个TypeHandler，实现TypeHandler的setParameter()和getResult()接口方法。</description>
    </item>
    
    <item>
      <title>Mybatis之XML篇</title>
      <link>https://ianeiu.github.io/p/mybatis%E4%B9%8Bxml%E7%AF%87/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/p/mybatis%E4%B9%8Bxml%E7%AF%87/</guid>
      <description>Mybatis xml映射文件中，除了常见的select、insert、updae、delete标签之外 还有动态sql标签 trim、 where、set、foreach、if、choose、when、otherwise、bind等
where标签 反例：
SELECTmodule_code, oper_type, oper_content, data_id, oper_by, oper_name, oper_dt, INET_NTOA(oper_ip) as oper_ipFROM tb_operation_log l WHERE 1=1&amp;lt;if test=&amp;quot;param.moduleCode != null&amp;quot;&amp;gt;AND l.module_code = #{param.moduleCode}&amp;lt;/if&amp;gt;&amp;lt;if test=&amp;quot;param.operBy != null and param.operBy !=&#39;&#39;&amp;quot;&amp;gt;AND l.oper_by = #{param.operBy}&amp;lt;/if&amp;gt;&amp;lt;if test=&amp;quot;param.operName != null and param.operName !=&#39;&#39;&amp;quot;&amp;gt;AND l.oper_name LIKE CONCAT(&amp;quot;%&amp;quot;,#{param.operName},&amp;quot;%&amp;quot;)&amp;lt;/if&amp;gt;&amp;lt;if test=&amp;quot;param.operDtStart != null and param.operDtEnd != null&amp;quot;&amp;gt;AND l.oper_dt BETWEEN #{param.operDtStart} AND #{param.operDtEnd}&amp;lt;/if&amp;gt;order by l.</description>
    </item>
    
    <item>
      <title>Mybatis之参数篇</title>
      <link>https://ianeiu.github.io/p/mybatis%E4%B9%8B%E5%8F%82%E6%95%B0%E7%AF%87/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/p/mybatis%E4%B9%8B%E5%8F%82%E6%95%B0%E7%AF%87/</guid>
      <description>参数传递符号   #{}
  ${}
select * from tbl_employee where id=${id} and last_name=#{userName} Preparing: select * from tbl_employee where id=&amp;lsquo;admin&amp;rsquo; and last_name=?
  区别：
#{}:是以预编译的形式，将参数设置到sql语句中。通过PreparedStatement可防止sql注入。
大多情况下，取参数的值都应该使用#{}。
${}:取出的值直接拼装在sql语句中；会有安全问题；
原生jdbc不支持占位符的地方我们就可以使用${}进行取值，比如分表、排序；按照年份分表拆分
select * from ${year}_salary where xxx; select * from tb_sys_user order by ${f_name} ${order}  #{}更丰富的用法 规定参数的一些规则： javaType、 jdbcType、 mode（存储过程）、 numericScale、resultMap、 typeHandler、 jdbcTypeName、 expression（未来准备支持的功能）；
jdbcType通常需要在某种特定的条件下被设置：在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理。比如Oracle（报错）； JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，oracle不能正确处理;
由于全局配置中：jdbcTypeForNull=OTHER；oracle不支持；有以下两种办法解决：
 #{email,jdbcType=OTHER} jdbcTypeForNull=NULL   参数传递 单个参数 #{参数名/任意名}：取出参数值。
&amp;lt;!-- TbSysUser getUserById(String id); --&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Mybatis之开发异常篇</title>
      <link>https://ianeiu.github.io/p/mybatis%E4%B9%8B%E5%BC%80%E5%8F%91%E5%BC%82%E5%B8%B8%E7%AF%87/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/p/mybatis%E4%B9%8B%E5%BC%80%E5%8F%91%E5%BC%82%E5%B8%B8%E7%AF%87/</guid>
      <description>mapped Statements collection does not contain 初次接触使用Mybatis会出现“Mapped Statements collection does not contain value for &amp;hellip;.“错误提示
常见的错误原因有几种：
 mapper.xml中没有加入namespace mapper.xml中的方法和接口mapper的方法不对应 mapper.xml没有加入到mybatis-config.xml中(即总的配置文件)，例外：配置了mapper文件的包路径的除外 mapper.xml文件名和所写的mapper名称不相同。  </description>
    </item>
    
  </channel>
</rss>
