<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>volatile on 吴炜棉</title>
    <link>https://ianeiu.github.io/tags/volatile/</link>
    <description>Recent content in volatile on 吴炜棉</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 25 Jul 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://ianeiu.github.io/tags/volatile/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JVM之volatile关键字</title>
      <link>https://ianeiu.github.io/p/jvm%E4%B9%8Bvolatile%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/p/jvm%E4%B9%8Bvolatile%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>引入 Java内存模型简称JMM（Java Memory Model），是Java虚拟机所定义的一种抽象规范， 用来屏蔽不同硬件和操作系统的内存访问差异，让java程序在各种平台下都能达到一致的内存访问效果。
  主内存（Main Memory）
主内存可以简单理解为计算机当中的内存，但又不完全等同。
主内存被所有的线程所共享，对于一个共享变量（比如静态变量，或是堆内存中的实例）来说，主内存当中存储了它的“本尊”。
  工作内存（Working Memory）
工作内存可以简单理解为计算机当中的CPU高速缓存，但又不完全等同。
每一个线程拥有自己的工作内存，对于一个共享变量来说，工作内存当中存储了它的“副本”。
线程对共享变量的所有操作都必须在工作内存进行，不能直接读写主内存中的变量。
不同线程之间也无法访问彼此的工作内存，变量值的传递只能通过主内存来进行。
  对于一个静态变量
static int s = 0；  线程A执行如下代码：
s = 3；  通过一系列内存读写的操作指令，线程A把静态变量 s=0 从主内存读到工作内存，再把 s=3 的更新结果同步到主内存当中。
从单线程的角度来看，这个过程没有任何问题。这时候我们引入线程B，执行如下代码：
System.out.println(&amp;quot;s=&amp;quot; + s);  有可能输出 0 或 3
可以使用synchronized同步锁（影响性能）或者使用volatile关键字修饰（轻量）
volatile的实现原理 volatile可以实现内存的可见性和防止指令重排序。
通过内存屏障技术实现的。
为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障指令，内存屏障效果有：
 禁止volatile 修饰变量指令的重排序 写入数据强制刷新到主存 读取数据强制从主存读取  使用原则：
 对变量的写操作不依赖于当前值。例如 i++ 这种就不适用。 该变量没有包含在具有其他变量的不变式中。  volatile的使用场景不是很多，使用时需要仔细考虑下是否适用volatile，注意满足上面的二个原则。
volatile 之 可见性 volatile关键字具有许多特性，其中最重要的特性就是保证了用volatile修饰的变量对所有线程的可见性[当一个线程修改了变量的值，新的值会立刻同步到主内存当中。而其他线程读取这个变量的时候，也会从主内存中拉取最新的变量值]。</description>
    </item>
    
  </channel>
</rss>
