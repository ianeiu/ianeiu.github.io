<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IanEiU</title>
    <link>https://ianeiu.github.io/</link>
    <description>Recent content on IanEiU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>WuWeiMian</copyright>
    <lastBuildDate>Wed, 05 Sep 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ianeiu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[置顶]收藏册——js、jq</title>
      <link>https://ianeiu.github.io/2018/09/05/%E7%BD%AE%E9%A1%B6%E6%94%B6%E8%97%8F%E5%86%8Cjsjq/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/05/%E7%BD%AE%E9%A1%B6%E6%94%B6%E8%97%8F%E5%86%8Cjsjq/</guid>
      
        <description>

&lt;h3 id=&#34;操作元素的样式&#34;&gt;操作元素的样式&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#msg&amp;quot;).css(&amp;quot;background&amp;quot;); //返回元素的背景颜色
$(&amp;quot;#msg&amp;quot;).css(&amp;quot;background&amp;quot;,&amp;quot;#ccc&amp;quot;) //设定元素背景为灰色
$(&amp;quot;#msg&amp;quot;).height(300); $(&amp;quot;#msg&amp;quot;).width(&amp;quot;200&amp;quot;); //设定宽高
$(&amp;quot;#msg&amp;quot;).css({ color: &amp;quot;red&amp;quot;, background: &amp;quot;blue&amp;quot; });//以名值对的形式设定样式

$(&amp;quot;p&amp;quot;).attr(&amp;quot;class&amp;quot;, &amp;quot;ddiiyy&amp;quot;); //设置p元素的class为 &amp;quot;ddiiyy&amp;quot; 
$(&amp;quot;#nm_p&amp;quot;).addClass(&amp;quot;another&amp;quot;); // 追加样式 
$(&amp;quot;p&amp;quot;).removeClass(&amp;quot;ddiiyy another&amp;quot;); //溢出样式
$(&amp;quot;p&amp;quot;).toggleClass(&amp;quot;ddiiyy&amp;quot;); //如果存在（不存在）就删除（添加）名为ddiiyy的class
$(&amp;quot;p&amp;quot;).hasClass(&amp;quot;another&amp;quot;); //是否含有某个class。是返true，否返false
$(&amp;quot;p&amp;quot;).is(&amp;quot;.another&amp;quot;); //is(&amp;quot;.&amp;quot;+class);//JQuery实现，增强代码可读性
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;readonly和disabled&#34;&gt;readonly和disabled&lt;/h3&gt;

&lt;p&gt;表单中readOnly和disabled的区别：&lt;br /&gt;
readonly只针对input(text/ password)和textarea有效，而disabled对于所有的表单元素都有效，包括select,radio, checkbox, button等。&lt;br /&gt;
但是表单元素在使用了disabled后，当我们将表单以POST或GET的方式提交的话，这个元素的值不会被传递出去，而readonly会将该值传递出去（这种情况出现在我们将某个表单中的textarea元素设置为disabled或readonly，但是submit或button却是可以使用的）。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;隐藏和显示-操作display属性&#34;&gt;隐藏和显示(操作display属性)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#id&amp;quot;).show();//表示display:block, 
$(&amp;quot;#id&amp;quot;).hide();//表示display:none; 
$(&amp;quot;#id&amp;quot;).toggle();//切换元素的可见状态。如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的。
$(&amp;quot;#id&amp;quot;).css(&#39;display&#39;,&#39;none&#39;); 
$(&amp;quot;#id&amp;quot;).css(&#39;display&#39;,&#39;block&#39;); 
或 
$(&amp;quot;#id&amp;quot;)[0].style.display = &#39;none&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;操作disabled属性&#34;&gt;操作disabled属性&lt;/h3&gt;

&lt;p&gt;js操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function disableElement(element,val){
    document.getElementById(element).disabled=val;d
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jQuery进行操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//两种方法设置disabled属性
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,true);
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,&amp;quot;disabled&amp;quot;);
//三种方法移除disabled属性
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,false);
$(&#39;#areaSelect&#39;).removeAttr(&amp;quot;disabled&amp;quot;);
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,&amp;quot;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取s:textfield，并设置其disabled属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;functiondisableTextfieldofAccountDiv(element,val) {
    $(element).find(&amp;quot;:textfield&amp;quot;).attr(&#39;disabled&#39;,val);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;禁用a-button点击&#34;&gt;禁用a，button点击&lt;/h3&gt;

&lt;p&gt;1.jquery禁用a标签方法1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document).ready(function () {
    $(&amp;quot;a&amp;quot;).each(function () {
        var textValue = $(this).html();
        if (textValue == &amp;quot;XX概况&amp;quot; || textValue == &amp;quot;服务导航&amp;quot;) {
            $(this).css(&amp;quot;cursor&amp;quot;, &amp;quot;default&amp;quot;);
            $(this).attr(&#39;href&#39;, &#39;#&#39;);     //修改&amp;lt;a&amp;gt;的 href属性值为 #  这样状态栏不会显示链接地址 
            $(this).click(function (event) {
                event.preventDefault();   // 如果&amp;lt;a&amp;gt;定义了 target=&amp;quot;_blank“ 需要这句来阻止打开新页面
            });
        }
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.jquery禁用a标签方法2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;a.tooltip&#39;).live(&#39;click&#39;, function(event) {
  alert(&amp;quot;抱歉,已停用！&amp;quot;); 
  event.preventDefault();  
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.jquery禁用a标签方法3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function(){
    $(&#39;.disableCss&#39;).removeAttr(&#39;href&#39;);//去掉a标签中的href属性
    $(&#39;.disableCss&#39;).removeAttr(&#39;onclick&#39;);//去掉a标签中的onclick事件
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.jquery控制按钮的禁用与启用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;#button&#39;).attr(&#39;disabled&#39;,&amp;quot;true&amp;quot;);//添加disabled属性
$(&#39;#button&#39;).removeAttr(&amp;quot;disabled&amp;quot;); //移除disabled属性
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;操作checked属性-回显&#34;&gt;操作checked属性\回显&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input id=&amp;quot;cb1&amp;quot; type=&amp;quot;checkbox&amp;quot; checked /&amp;gt;
&amp;lt;input id=&amp;quot;cb2&amp;quot; type=&amp;quot;checkbox&amp;quot; checked=&amp;quot;checked&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.jquery判断checked的三种方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.attr(&#39;checked&#39;)   //看版本1.6+返回:&amp;quot;checked&amp;quot;或&amp;quot;undefined&amp;quot; ;1.5-返回:true或false
.prop(&#39;checked&#39;) //16+:true/false
.is(&#39;:checked&#39;)    //所有版本:true/false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.jquery赋值checked的几种写法:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//所有的jquery版本都可以这样赋值
$(&amp;quot;#cb1&amp;quot;).attr(&amp;quot;checked&amp;quot;,&amp;quot;checked&amp;quot;);
$(&amp;quot;#cb1&amp;quot;).attr(&amp;quot;checked&amp;quot;,true);

//jquery1.6+:prop的4种赋值
$(&amp;quot;#cb1&amp;quot;).prop(&amp;quot;checked&amp;quot;,true);    //很简单就不说了哦
$(&amp;quot;#cb1&amp;quot;).prop({checked:true});    //map键值对
$(&amp;quot;#cb1&amp;quot;).prop(&amp;quot;checked&amp;quot;,function(){  return true;   }); //函数返回true或false
$(&amp;quot;#cb1&amp;quot;).prop(&amp;quot;checked&amp;quot;,&amp;quot;checked&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.check回显的一个demo：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(list){
    if(type==1){
        var checkBoxAll = $(&amp;quot;input[name=&#39;outsideFileName&#39;]&amp;quot;);
        for(var i=0;i&amp;lt;list.length;i++){
            $.each(checkBoxAll,function(j,checkbox){
                //获取复选框的value属性
                var checkValue=$(checkbox).val();
                if(list[i].filePath==checkValue){
                    $(checkbox).attr(&amp;quot;checked&amp;quot;,true);
                }
            })
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;checkbox-全选反选&#34;&gt;checkbox（全选反选..）&lt;/h3&gt;

&lt;p&gt;demo：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;注：jquery1.9.0+无法正常显示
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot; &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt; 
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&amp;gt; 
&amp;lt;head&amp;gt; 
&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt; 
&amp;lt;title&amp;gt;jQuery 对checkbox的操作&amp;lt;/title&amp;gt; 
&amp;lt;/HEAD&amp;gt; 
&amp;lt;body style=&amp;quot;text-align:center;margin: 0 auto;font-size: 12px;&amp;quot; mce_style=&amp;quot;text-align:center;margin: 0 auto;font-size: 12px;&amp;quot;&amp;gt; 
&amp;lt;div style=&amp;quot;border: 1px solid #999; width: 500px; padding: 15px; background: #eee; margin-top: 150px;&amp;quot;&amp;gt; 
&amp;lt;form name=&amp;quot;form1&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn1&amp;quot; value=&amp;quot;全选&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn2&amp;quot; value=&amp;quot;取消全选&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn3&amp;quot; value=&amp;quot;选中所有奇数&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn4&amp;quot; value=&amp;quot;反选&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn5&amp;quot; value=&amp;quot;获得选中的所有值&amp;quot;&amp;gt; 
&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox1&amp;quot;&amp;gt; 
checkbox1 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox2&amp;quot;&amp;gt; 
checkbox2 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox3&amp;quot;&amp;gt; 
checkbox3 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox4&amp;quot;&amp;gt; 
checkbox4 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox5&amp;quot;&amp;gt; 
checkbox5 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox6&amp;quot;&amp;gt; 
checkbox6 
&amp;lt;/form&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;/body&amp;gt; 
&amp;lt;/HTML&amp;gt; 

&amp;lt;script  type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;http://libs.baidu.com/jquery/1.8.0/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; 
&amp;lt;!-- 
$(&amp;quot;document&amp;quot;).ready(function(){ 
$(&amp;quot;#btn1&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]&amp;quot;).attr(&amp;quot;checked&amp;quot;,&#39;true&#39;);//全选 
}) 
$(&amp;quot;#btn2&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]&amp;quot;).removeAttr(&amp;quot;checked&amp;quot;);//取消全选 
}) 
$(&amp;quot;#btn3&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]:even&amp;quot;).attr(&amp;quot;checked&amp;quot;,&#39;true&#39;);//选中所有奇数 
}) 
$(&amp;quot;#btn4&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]&amp;quot;).each(function(){//反选 
if($(this).attr(&amp;quot;checked&amp;quot;)){ 
$(this).removeAttr(&amp;quot;checked&amp;quot;); 
} 
else{ 
$(this).attr(&amp;quot;checked&amp;quot;,&#39;true&#39;); 
} 
}) 
}) 
$(&amp;quot;#btn5&amp;quot;).click(function(){//输出选中的值 
var str=&amp;quot;&amp;quot;; 
$(&amp;quot;[name=&#39;checkbox&#39;][checked]&amp;quot;).each(function(){ 
str+=$(this).val()+&amp;quot;/r/n&amp;quot;; 
//alert($(this).val()); 
}) 
alert(str); 
}) 
}) 
--&amp;gt; 
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.获取checkbox选中的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var chk_value =[]; 
$(&#39;input[name=&amp;quot;test&amp;quot;]:checked&#39;).each(function(){ 
    chk_value.push($(this).val()); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.点击全选 非全选&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input[name=&amp;quot;pCheckBox&amp;quot;]&#39;).click(function(){  
    //alert(this.checked);  
    if($(this).is(&#39;:checked&#39;)){  
        $(&#39;input[name=&amp;quot;eventIds&amp;quot;]&#39;).each(function(){  
            //此处如果用attr，会出现第三次失效的情况  
            $(this).prop(&amp;quot;checked&amp;quot;,true);  
        });  
    }else{  
         $(&#39;input[name=&amp;quot;eventIds&amp;quot;]&#39;).each(function(){  
            $(this).removeAttr(&amp;quot;checked&amp;quot;,false);  
        });  
        //$(this).removeAttr(&amp;quot;checked&amp;quot;);  
    }  
});  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;radio&#34;&gt;radio&lt;/h3&gt;

&lt;p&gt;1.获取选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio :checked&#39;).val()；
$(&amp;quot;input[type=&#39;radio&#39;]:checked&amp;quot;).val();
$(&amp;quot;input[name=&#39;rd&#39;]:checked&amp;quot;).val();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.设置第一个Radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio :first&#39;).attr(&#39;checked&#39;, &#39;checked&#39;);
$(&#39;input:radio :first&#39;).attr(&#39;checked&#39;, &#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.设置最后一个Radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio :last&#39;).attr(&#39;checked&#39;, &#39;checked&#39;);
$(&#39;input:radio :last&#39;).attr(&#39;checked&#39;, &#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.根据索引值设置任意一个radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio&#39;).eq(索引值).attr(&#39;checked&#39;, &#39;true&#39;);//索引值=0,1,2....
$(&#39;input:radio&#39;).slice(1,2).attr(&#39;checked&#39;, &#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.根据Value值设置Radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;input:radio[value=&#39;rd2&#39;]&amp;quot;).attr(&#39;checked&#39;,&#39;true&#39;);
$(&amp;quot;input[value=&#39;rd2&#39;]&amp;quot;).attr(&#39;checked&#39;,&#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;select&#34;&gt;select&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;select id=&amp;quot;s&amp;quot;&amp;gt;
    &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;嘻嘻&amp;lt;/option&amp;gt;
    &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;呵呵&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.获取select中option被选中的文本值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;误：$(&amp;quot;#s&amp;quot;).text();  //获取所有option的文本值
$(&amp;quot;#s option:selected&amp;quot;).text();  //获取选中的option的文本值
$(&amp;quot;#s&amp;quot;).find(&amp;quot;option:selected&amp;quot;).text(); //获取选中的option的文本值
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.获取select中option被选中的value值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#s&amp;quot;).val();
$(&amp;quot;#s option:selected&amp;quot;).val();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.js获取select选中的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sel=document.getElementById(&amp;quot;s&amp;quot;); 
var index = sel.selectedIndex; // 选中索引
albumid= sel.options[index].value;//要的值
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;textarea&#34;&gt;textarea&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;textarea name=&amp;quot;content&amp;quot; id=&amp;quot;content&amp;quot; rows=&amp;quot;8&amp;quot; cols=&amp;quot;5&amp;quot;&amp;gt;这是textarea内容&amp;lt;/textarea&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.获取textarea文本值（用name和id）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;textarea[name=&#39;content&#39;]&amp;quot;).val()      $(&amp;quot;#content&amp;quot;).val()    
$(&amp;quot;textarea[name=&#39;content&#39;]&amp;quot;).text()      $(&amp;quot;#content&amp;quot;).text()    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.赋值textarea文本值（只能用id）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#content&amp;quot;).val(&amp;quot;这是要写入的textarea文本内容&amp;quot;)
$(&amp;quot;#content&amp;quot;).text(&amp;quot;这是要写入的textarea文本内容&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;val和text的区别是：val()可以体现换行符，而text()不能。&lt;/p&gt;

&lt;p&gt;3.禁止文本域textarea可拖拽的方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;textarea{ resize:none;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.让textarea没有黄框且不能拖拽：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;textarea{outline:none;resize:none;}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;confirm-二次确认&#34;&gt;confirm，二次确认&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if(confirm(&amp;quot;确定要删除该记录吗？&amp;quot;)){
    doSomething();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;重置表单reset&#34;&gt;重置表单reset&lt;/h3&gt;

&lt;p&gt;使用jquery方法重置form表单&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;误：$(&#39;#formName&#39;).reset();//得到的是数组。
正：$(&#39;#formName&#39;)[0].reset();//得到的是jQuery对象。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：这种方式虽然可以重置表单，但是不能重置隐藏字段。隐藏字段要单独处理。&lt;br /&gt;
小知识：$(&amp;lsquo;#formName&amp;rsquo;).get(0)得到的是DOM对象。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jquery-获取元素个数&#34;&gt;jquery 获取元素个数&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;#div1&#39;).children().length;
$(&#39;#div1&#39;).children(&#39;span&#39;).length;//获取id=div1下的span元素个数
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;定位&#34;&gt;定位&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id =&#39;&#39;localid&amp;quot;&amp;gt; xixi&amp;lt;/div&amp;gt;
window.location.href=&#39;#localid&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;修改标题title&#34;&gt;修改标题title&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;document.title=&amp;quot;批量业务单&amp;quot;; 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq的事件处理功能&#34;&gt;JQ的事件处理功能&lt;/h3&gt;

&lt;p&gt;1.hover&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//当鼠标放在表格的某行上时将class置为over，离开时置为out。
$(&amp;quot;tr&amp;quot;).hover(
function(){
     $(this).addClass(&amp;quot;over&amp;quot;);
}, 
function(){ 
    $(this).addClass(&amp;quot;out&amp;quot;); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;demo鼠标移入出现悬浮框&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;td class=&#39;linkTd&#39;&amp;gt;
    &amp;lt;div style=&#39;position:relative;&#39;&amp;gt;
        @link&amp;lt;span class=&#39;linkHover&#39;&amp;gt;@detailLink&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/td&amp;gt;

.linkHover{         
    position: absolute;  
    top: 20px;  
    width: 320px;
    max-height: 250px;           /* 设置最大高度，当高度达到此值时出现滚动条 */  
    z-index: 10;  
    background-color: #E0E5E5;   
    overflow: auto;              /* 自动添加滚动条 */  
    box-shadow:0px 0px 10px #000;   /* 外阴影 */  
    display:none;
}

$(&#39;.linkTd&#39;).hover(  
    function(){   
        $(this).find(&#39;.linkHover&#39;).show();
    } ,  
    function(){  
        $(this).find(&#39;.linkHover&#39;).hide();
    }   
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.ready&lt;br /&gt;
在文档加载后激活函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document).ready(function(){
  $(&amp;quot;.btn1&amp;quot;).click(function(){
    $(&amp;quot;p&amp;quot;).slideToggle();
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;语法 1  &lt;code&gt;$(document).ready(function)&lt;/code&gt;&lt;br /&gt;
语法 2  &lt;code&gt;$().ready(function)&lt;/code&gt;&lt;br /&gt;
语法 3  &lt;code&gt;$(function)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3.toggle&lt;br /&gt;
toggle()和slidetoggle()方法提供了状态切换功能。&lt;br /&gt;
toggle()方法包括了hide()和show()方法。 slideToggle()方法包括了slideDown()和slideUp()方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//每次点击时轮换添加和删除名为selected的class。
$(&amp;quot;p&amp;quot;).toggle(function(){ 
     $(this).addClass(&amp;quot;selected&amp;quot;); 
},function(){ 
     $(this).removeClass(&amp;quot;selected&amp;quot;); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.trigger&lt;br /&gt;
    在每一个匹配的元素上触发某类事件,如模拟点击，回车登录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//模拟点击
$(&amp;quot;#b&amp;quot;).click(function(){$(&amp;quot;#a&amp;quot;).trigger(&amp;quot;click&amp;quot;)})
$(&amp;quot;#a&amp;quot;).trigger(&amp;quot;click&amp;quot;);//执行#a的click事件

//回车点击
$(document).keyup(function(event){
  if(event.keyCode ==13){
    $(&amp;quot;#btn_login&amp;quot;).trigger(&amp;quot;click&amp;quot;);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;推荐：keyup，防止笔记本键盘不小心触摸到了
有些文档中有写成这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(window).keydown（function(){
...
}）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;XP系统IE6下是不成功的。&lt;/p&gt;

&lt;p&gt;5.bind(eventtype,fn)，unbind(eventtype)&lt;br /&gt;
事件的绑定与反绑定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;p&amp;quot;).bind(&amp;quot;click&amp;quot;, function(){alert($(this).text());}); //为每个p元素添加单击事件 
$(&amp;quot;p&amp;quot;).unbind(); //删除所有p元素上的所有事件 
$(&amp;quot;p&amp;quot;).unbind(&amp;quot;click&amp;quot;) //删除所有p元素上的单击事件
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq集合遍历&#34;&gt;JQ集合遍历&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;//为索引分别为0，1，2的p元素分别设定不同的字体颜色。
$(&amp;quot;p&amp;quot;).each(function(i){this.style.color=[&#39;#f00&#39;,&#39;#0f0&#39;,&#39;#00f&#39;][i]})
//实现表格的隔行换色效果
$(&amp;quot;tr&amp;quot;).each(function(i){this.style.backgroundColor=[&#39;#ccc&#39;,&#39;#fff&#39;][i%2]})
//为每个p元素增加了click事件，单击某个p元素则弹出其内容
$(&amp;quot;p&amp;quot;).click(function(){alert($(this).html())})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;demo遍历table的tr获取td的值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tbody id=&amp;quot;history_income_list&amp;quot;&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;&amp;quot; onclick=&amp;quot;history_income_del(this);&amp;quot; href=&amp;quot;###&amp;quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;&amp;quot; href=&amp;quot;###&amp;quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;&amp;quot; href=&amp;quot;###&amp;quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for循环遍历&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var trList = $(&amp;quot;#history_income_list&amp;quot;).children(&amp;quot;tr&amp;quot;)
for (var i=0;i&amp;lt;trList.length;i++) {
    var tdArr = trList.eq(i).find(&amp;quot;td&amp;quot;);
    var history_income_type = tdArr.eq(0).find(&amp;quot;input&amp;quot;).val();//收入类别
    var history_income_money = tdArr.eq(1).find(&amp;quot;input&amp;quot;).val();//收入金额
    var history_income_remark = tdArr.eq(2).find(&amp;quot;input&amp;quot;).val();//  备注
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JQ遍历&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#history_income_list&amp;quot;).find(&amp;quot;tr&amp;quot;).each(function(){
    var tdArr = $(this).children();
    var history_income_type = tdArr.eq(0).find(&amp;quot;input&amp;quot;).val();//收入类别
    var history_income_money = tdArr.eq(1).find(&amp;quot;input&amp;quot;).val();//收入金额
    var history_income_remark = tdArr.eq(2).find(&amp;quot;input&amp;quot;).val();//  备注
    ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jquery&#34;&gt;jquery $.&lt;/h3&gt;

&lt;h4 id=&#34;extend&#34;&gt;$.extend&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//为jquery扩展了min,max两个方法
$.extend({ 
    min: function(a, b){return a &amp;lt; b?a:b; },
    max: function(a, b){return a &amp;gt; b?a:b; }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用扩展的方法（通过“$.方法名”调用）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alert(&amp;quot;a=10,b=20,max=&amp;quot;+$.max(10,20)+&amp;quot;,min=&amp;quot;+$.min(10,20));
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;each&#34;&gt;$.each&lt;/h4&gt;

&lt;p&gt;$.each(obj, fn)：通用的迭代函数。可用于代替循环。 如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.each( [0,1,2], function(i, n){ alert( &amp;quot;Item #&amp;quot; + i + &amp;quot;: &amp;quot; + n ); });
//等价 
var tempArr=[0,1,2]; 
for(var i=0;i&amp;lt;tempArr.length;i++){ alert(&amp;quot;Item #&amp;quot;+i+&amp;quot;: &amp;quot;+tempArr[i]); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以处理json数据，如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.each( { name: &amp;quot;John&amp;quot;, lang: &amp;quot;JS&amp;quot; }, function(i, n){ alert( &amp;quot;Name: &amp;quot; + i + &amp;quot;, Value: &amp;quot; + n ); });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;map&#34;&gt;$.map&lt;/h4&gt;

&lt;p&gt;$.map(array, fn)：数组映射。把一个数组中的项目(处理转换后)保存到到另一个新数组中，并返回生成的新数组。 如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var tempArr=$.map( [0,1,2], function(i){ return i + 4; });//[4,5,6] 
var tempArr=$.map( [0,1,2], function(i){ return i &amp;gt; 0 ? i + 1 : null; });//[2,3] 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;merge&#34;&gt;$.merge&lt;/h4&gt;

&lt;p&gt;$.merge(arr1,arr2):合并两个数组并删除其中重复的项目。 如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.merge( [0,1,2], [2,3,4] ) //返回[0,1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;trim&#34;&gt;$.trim&lt;/h4&gt;

&lt;p&gt;$.trim(str)：删除字符串两端的空白字符。 如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.trim(&amp;quot; hello, how are you? &amp;quot;); //返回&amp;quot;hello,how are you? &amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-获取数组长度&#34;&gt;JS 获取数组长度&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var myarray = [1,2,3];
myarray.length // 初始的长度是3
myarray.length = 2; // 删除最后一个元素
myarray.length = 20 // 添加18个元素到数组中
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-判断-undefined&#34;&gt;JS 判断 undefined&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if(typeof(value)==&amp;quot;undefined&amp;quot;){ 
    alert(&amp;quot;undefined&amp;quot;); 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-join将数组转字符串&#34;&gt;JS  join将数组转字符串&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;zs&amp;quot;/&amp;gt;张三
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;ls&amp;quot;/&amp;gt;李四
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;we&amp;quot;/&amp;gt;王二
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;sw&amp;quot;/&amp;gt;三五
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;sl&amp;quot;/&amp;gt;四六

var chk_value =[]; 
$(&#39;input[name=&amp;quot;nextDeal&amp;quot;]:checked&#39;).each(function(){ 
    chk_value.push($(this).val()); 
});
var userNames = chk_value.join(&amp;quot;,&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-遮罩功能&#34;&gt;JS 遮罩功能&lt;/h3&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!--弹窗背景--&amp;gt;
&amp;lt;div class=&amp;quot;flexBg&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;!--loading--&amp;gt;
&amp;lt;div class=&amp;quot;loading&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;
    &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;p&amp;gt;加载中...&amp;lt;/p&amp;gt;
    &amp;lt;%-- &amp;lt;img src=&amp;quot;${baseURL }/themes/zsyx/images/loading.gif&amp;quot;&amp;gt;&amp;lt;/img&amp;gt; --%&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.flexBg {
    background: url(../images/flexBg.png);
    position: fixed;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    z-index: 999;
}
.loading {
    width: 100px;
    height: 100px;
    position: absolute;
    top: 50%;
    left: 50%;
    margin: -50px 0 0 -50px;
    z-index: 999;
    background: #fff;
    padding: 15px;
    border-radius: 5px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function sZZ(){
    $(&#39;.flexBg&#39;).show();
    $(&#39;.loading&#39;).show();
}
function hZZ(){
    $(&#39;.flexBg&#39;).hide();
    $(&#39;.loading&#39;).hide();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IMG&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ianeiu.github.io/resouce/收藏册JSJQ/flexBg.png&#34;  alt=&#34;BG&#34; /&gt;
&lt;img src=&#34;https://ianeiu.github.io/resouce/收藏册JSJQ/loading.gif&#34;  alt=&#34;LOAD&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js中的encodeuri-decodeuri-decodeuricomponent-解决传值中文乱码&#34;&gt;js中的encodeURI、decodeURI、decodeURIComponent,解决传值中文乱码&lt;/h3&gt;

&lt;p&gt;一、基本概念&lt;br /&gt;
encodeURI和decodeURI是成对来使用的，因为浏览器的地址栏有中文字符的话，可以会出现不可预期的错误，所以可以encodeURI把非英文字符转化为英文编码，decodeURI可以用来把字符还原回来。&lt;br /&gt;
encodeURI方法不会对下列字符进行编码：&amp;rdquo;:&amp;ldquo;、&amp;rdquo;/&amp;ldquo;、&amp;rdquo;;&amp;rdquo; 和 &amp;ldquo;?&amp;ldquo;，encodeURIComponent方法可以对这些字符进行编码。&lt;/p&gt;

&lt;p&gt;decodeURI()方法相当于java.net.URLDecoder.decode(URIString, &amp;ldquo;UTF-8&amp;rdquo;);&lt;br /&gt;
encodeURI()方法相当于java.net.URLEncoder.encode(URIString, &amp;ldquo;UTF-8&amp;rdquo;);&lt;br /&gt;
二、例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.location.href = encodeURI(encodeURI(jumpURL));
//http://127.0.0.1:8081/zsyx/jsp/component/demandwork/functiontest/functiontest.jsp?id=NEW20183123134021852&amp;amp;slink=%25E9%259C%2580%25E6%25B1%2582%25E5%25A4%2584%25E7%2590%2586

var slink = decodeURI(decodeURI(&#39;${param.slink}&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js判断文件是否存在&#34;&gt;JS判断文件是否存在&lt;/h3&gt;

&lt;p&gt;方法1：判断图片是否存在&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isHasImg(pathImg){  
    var ImgObj=new Image();  
    ImgObj.src= pathImg;  
    if(ImgObj.fileSize &amp;gt; 0 || (ImgObj.width &amp;gt; 0 &amp;amp;&amp;amp; ImgObj.height &amp;gt; 0))  
    {  
    return true;  
    } else {  
    return false;  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法2：AJAX验证图片或文件链接是否存在&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function validateImage(url) {      
var xmlHttp ;  
if (window.ActiveXObject)  
{  
xmlHttp = new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);  
}  
else if (window.XMLHttpRequest)  
{  
xmlHttp = new XMLHttpRequest();  
}   
xmlHttp.open(&amp;quot;Get&amp;quot;,url,false);  
xmlHttp.send();  
if(xmlHttp.status==404)  
return false;  
else  
return true;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法3：用onerror替换不存在的图片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;images/img1.jpg&amp;quot; height=&amp;quot;300&amp;quot; width=&amp;quot;800&amp;quot; onerror=&amp;quot;images/defaultImg.jpg&amp;quot;&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;解决自定义方法或其他类库与jquery的冲突&#34;&gt;解决自定义方法或其他类库与jQuery的冲突&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;//使用jquery中的jQuery.noConflict();方法即可把变量$的控制权让渡给第一个实现它的那个库或之前自定义的$方法。之后应用Jquery的时候只要将所有的$换成jQuery即可
jQuery.noConflict(); 
// 开始使用jQuery 
jQuery(&amp;quot;div p&amp;quot;).hide(); 
// 使用其他库的 $() 
$(&amp;quot;content&amp;quot;).style.display = &#39;none&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;获取iframe中文档内容&#34;&gt;获取iframe中文档内容&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;function getIframeContent(){  //获取iframe中文档内容
    var doc;
    if (document.all){ // IE 
        doc = document.frames[&amp;quot;ueditor_0&amp;quot;].document; 
    }else{ // 标准
        doc = document.getElementById(&amp;quot;ueditor_0&amp;quot;).contentDocument; 
    }
    return doc.body.innerHTML;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;子窗体调父窗体方法&#34;&gt;子窗体调父窗体方法&lt;/h3&gt;

&lt;p&gt;父窗体&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function selectProduct(commitBrand){    window.open(&amp;quot;${baseURL}/jsp/component/selectlist/SelectProductList.jsp?ecs=ecs&amp;amp;productName=productName&amp;amp;brandId=brandId&amp;amp;brandName=brandName&amp;amp;specification=specification&amp;quot;,&amp;quot;选择产品&amp;quot;,
        &amp;quot;width=1366,height=768,top=0,left=0,scrollbars=YES,resizable=yes&amp;quot;);
}
function setProductValue(ecs,productName,brandId,brandNameDesc,guige,guigeDesc,color,colorDesc,productXinghao,productXinghaoDesc,haveImei,fundCost){
        $(&amp;quot;#ecs&amp;quot;).attr(&amp;quot;value&amp;quot;,ecs);
        $(&amp;quot;#productName&amp;quot;).attr(&amp;quot;value&amp;quot;,productName);
        $(&amp;quot;#brandId&amp;quot;).attr(&amp;quot;value&amp;quot;,brandId);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;子窗体 SelectProductList.jsp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.opener.setProductValue(content.ecs,content.productName,content.zhongduanPinpai,content.zhongduanPinpaiDesc,content.guige,content.guigeDesc,content.color,content.colorDesc,content.productXinghao,content.productXinghaoDesc,content.haveImei,content.fundCost);
window.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq-ajax请求demo&#34;&gt;JQ AJAX请求demo&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(function() {
    $(&#39;#send&#39;).click(function() {
        $.ajax({
            type: &amp;quot;GET&amp;quot;, //GET或POST,
            async:true, //默认设置为true，所有请求均为异步请求。
            url: &amp;quot;http://www.idaima.com/xxxxx.php&amp;quot;,
            data: {
                username: $(&amp;quot;#username&amp;quot;).val(),
                content: $(&amp;quot;#content&amp;quot;).val()
            },
            dataType: &amp;quot;json&amp;quot;, //xml、html、script、jsonp、text
            beforeSend:function(){},
            complete:function(){},
            success: function(data) {
                alert(data)
            },
            error:function(){},
        });
    });
});


$.get(baseURL+&#39;/childorderdeal/childorderdealActAction!getWorkSati.action&#39;, { orderId: &amp;quot;NEW2018425164215552&amp;quot; }, function(data){
             if(data.code==&amp;quot;0&amp;quot;){
                 $(&#39;input:[value=&amp;quot;&#39;+data.data.code+&#39;&amp;quot;]&#39;).attr(&#39;checked&#39;,&#39;true&#39;);
             }
        },&#39;json&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq-设置ajax同步&#34;&gt;JQ 设置AJAX同步&lt;/h3&gt;

&lt;p&gt;由于$.post() 和 $.get() 默认是 异步请求，如果需要同步请求，则可以进行如下使用：&lt;br /&gt;
在$.post()前把ajax设置为同步：$.ajaxSettings.async = false;&lt;br /&gt;
在$.post()后把ajax改回为异步：$.ajaxSettings.async = true;&lt;br /&gt;
如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.ajaxSettings.async = false;  
$.post(&amp;quot;/finance/getLastTimeCard&amp;quot;, data, function(result) {  
    // 请求处理  
},&amp;quot;json&amp;quot;);  
$.ajaxSettings.async = true;  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;页面刷新篇&#34;&gt;页面刷新篇&lt;/h3&gt;

&lt;p&gt;1.刷新&lt;br /&gt;
reload 方法，该方法强迫浏览器刷新当前页面。&lt;br /&gt;
语法：location.reload([bForceGet])&lt;br /&gt;
参数： bForceGet， 可选参数， 默认为 false，从客户端缓存里取当前页。true, 则以 GET 方式，从服务端取最新的页面, 相当于客户端点击 F5(&amp;ldquo;刷新&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;replace 方法，该方法通过指定URL替换当前缓存在历史里（客户端）的项目，因此当使用replace方法之后，你不能通过“前进”和“后退”来访问已经被替换的URL。&lt;br /&gt;
语法： location.replace(URL)&lt;/p&gt;

&lt;p&gt;在实际应用的时候，重新刷新页面的时候，我们通常使用： &lt;strong&gt;location.reload()&lt;/strong&gt; 或者是 &lt;strong&gt;history.go(0) &lt;/strong&gt;来做。&lt;br /&gt;
因为这种做法就像是客户端点F5刷新页面，所以页面的method=&amp;ldquo;post&amp;rdquo;的时候，会出现&amp;rdquo;网页过期&amp;rdquo;的提示。那是因为Session的安全保护机制。&lt;br /&gt;
这里，location.replace() 就可以完成此任务。被replace的页面每次都在服务端重新生成。&lt;br /&gt;
你可以这么写： &lt;strong&gt;location.replace(location.href)&lt;/strong&gt;;&lt;/p&gt;

&lt;p&gt;2.返回并刷新页面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location.replace(document.referrer); //document.referre为r前一个页面的URL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不要用 history.go(-1)，或 history.back();来返回并刷新页面，这两种方法不会刷新页面。&lt;/p&gt;

&lt;h4 id=&#34;javascript刷新页面的几种方法&#34;&gt;Javascript刷新页面的几种方法&lt;/h4&gt;

&lt;p&gt;1    history.go(0)&lt;br /&gt;
2    location.reload()&lt;br /&gt;
3    location=location&lt;br /&gt;
4    location.assign(location)&lt;br /&gt;
5    document.execCommand(&amp;lsquo;Refresh&amp;rsquo;)&lt;br /&gt;
6    window.navigate(location)&lt;br /&gt;
7    location.replace(location)&lt;br /&gt;
8    document.URL=location.href&lt;/p&gt;

&lt;h4 id=&#34;自动刷新页面的方法&#34;&gt;自动刷新页面的方法&lt;/h4&gt;

&lt;p&gt;1.页面自动刷新：把如下代码加入&lt;head&gt;区域中,20秒刷新一次页面.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;20&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.页面自动跳转：把如下代码加入&lt;head&gt;区域中,20秒后跳转到&lt;a href=&#34;https://ianeiu.github.io/页面&#34;&gt;https://ianeiu.github.io/页面&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;20;url=https://ianeiu.github.io/&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.页面自动刷新js版&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; 
    function myrefresh(){  window.location.reload(); }
    setTimeout(&#39;myrefresh()&#39;,1000); //指定1秒刷新一次
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;窗口刷新&#34;&gt;窗口刷新&lt;/h4&gt;

&lt;p&gt;1.JS刷新框架的脚本语句&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//如何刷新包含该框架的页面用   
&amp;lt;script language=JavaScript&amp;gt;
   parent.location.reload();
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.子窗口刷新父窗口&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script language=JavaScript&amp;gt;
    self.opener.location.reload();
&amp;lt;/script&amp;gt;
//或　&amp;lt;a href=&amp;quot;javascript:opener.location.reload()&amp;quot;&amp;gt;刷新&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.如何刷新另一个框架的页面用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script language=JavaScript&amp;gt;
   parent.另一FrameID.location.reload();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.如果想关闭窗口时刷新或者想开窗时刷新的话，在&lt;body&gt;中调用以下语句即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body onload=&amp;quot;opener.location.reload()&amp;quot;&amp;gt; 开窗时刷新
&amp;lt;body onUnload=&amp;quot;opener.location.reload()&amp;quot;&amp;gt; 关闭时刷新
&amp;lt;script language=&amp;quot;javascript&amp;quot;&amp;gt;
    window.opener.document.location.reload()
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jquery对象与dom对象&#34;&gt;jQuery对象与dom对象&lt;/h3&gt;

&lt;p&gt;通过jquery的$()引用元素包括通过id、class、元素名以及元素的层级关系及dom或者xpath条件等方法，且返回的对象为jquery对象（集合对象），不能直接调用dom定义的方法。&lt;br /&gt;
转换&lt;br /&gt;
普通的dom对象一般可以通过$()转换成jquery对象。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document.getElementById(&amp;quot;msg&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于jquery对象本身是一个集合。所以如果jquery对象要转换为dom对象则必须取出其中的某一项，一般可通过索引取出。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#msg&amp;quot;)[0]，
$(&amp;quot;div&amp;quot;).eq(1)[0]，
$(&amp;quot;div&amp;quot;).get()[1]，
$(&amp;quot;td&amp;quot;)[5]

$(&amp;quot;#msg&amp;quot;).html();
$(&amp;quot;#msg&amp;quot;)[0].innerHTML;
$(&amp;quot;#msg&amp;quot;).eq(0)[0].innerHTML;
$(&amp;quot;#msg&amp;quot;).get(0).innerHTML;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取jQuery集合的某一项(获取第三个div元素的内容)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;div&amp;quot;).eq(2).html(); //调用jquery对象的方法
$(&amp;quot;div&amp;quot;).get(2).innerHTML; //调用dom的方法属性
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>[置顶]Good knowledge</title>
      <link>https://ianeiu.github.io/2018/09/11/%E7%BD%AE%E9%A1%B6good-knowledge/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/11/%E7%BD%AE%E9%A1%B6good-knowledge/</guid>
      
        <description>

&lt;h3 id=&#34;http超文本协议&#34;&gt;HTTP超文本协议&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://ianeiu.github.io/resouce/思维导图/HTTP超文本协议.png&#34; target=&#34;blank&#34;&gt;HTTP超文本协议&lt;/a&gt;
来源：微信公众号 java思维导图&lt;/p&gt;

&lt;h3 id=&#34;fail-fast机制&#34;&gt;fail-fast机制&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://cmsblogs.com/?p=1220&#34; target=&#34;blank&#34;&gt;fail-fast机制&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.csdn.net/biglxl/article/details/77462266&#34; target=&#34;blank&#34;&gt;fail-fast和fail-safe详解&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;swagger&#34;&gt;swagger&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/xupeng874395012/article/details/68946676&#34; target=&#34;blank&#34;&gt;swagger注释API详细说明&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.csdn.net/hellopeng1/article/details/82227942&#34; target=&#34;blank&#34;&gt;Swagger2 关于Map参数在API文档中展示详细参数以及参数说明&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;mybatis&#34;&gt;mybatis&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/ClassNotFoundException/p/6425558.html&#34; target=&#34;blank&#34;&gt;Spring-Mybatis &amp;mdash; 配置SqlSessionFactoryBean，整合Spring-Mybatis&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://ianeiu.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://ianeiu.github.io/about/</guid>
      
        <description>

&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;

&lt;p&gt;一名Java渣渣、LOL&lt;del&gt;黄金&lt;/del&gt;白银段位&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;邮箱：weimianwu@foxmail.com&lt;/li&gt;
&lt;li&gt;微信：qq747151921&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;友链&#34;&gt;友链&lt;/h3&gt;

&lt;p&gt;木有&lt;/p&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>HashMap——工作原理</title>
      <link>https://ianeiu.github.io/2018/09/13/hashmap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/13/hashmap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      
        <description>

&lt;p&gt;&lt;span style=&#34;color:red;font-size:13px&#34;&gt;建议边看边阅读源码&lt;/red&gt;&lt;/p&gt;

&lt;h3 id=&#34;hashmap-数组-链表&#34;&gt;HashMap（数组+链表）&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;HashMap储存的是键值对&lt;/li&gt;
&lt;li&gt;HashMap可以接受null键值和值，而Hashtable则不能；&lt;/li&gt;
&lt;li&gt;HashMap是非synchronized&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;hashmap的工作原理&#34;&gt;HashMap的工作原理&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;HashMap基于hashing原理，我们通过put()和get()方法储存和获取对象。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;当我们将键值对传递给put()方法时，它调用键对象的hashCode()方法来计算hashcode，然后找到bucket位置来储存值对象。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;当获取对象时，通过键对象的equals()方法找到正确的键值对，然后返回值对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;当两个对象的hashcode相同&#34;&gt;当两个对象的hashcode相同&lt;/h3&gt;

&lt;p&gt;它们会储存在同一个bucket位置的链表中。因为hashcode相同，所以它们的bucket位置相同，‘碰撞’会发生。因为HashMap使用链表存储对象，这个Entry(包含有键值对的Map.Entry对象)会存储在链表中。&lt;/p&gt;

&lt;h3 id=&#34;两个键的hashcode相同-如何获取值对象&#34;&gt;两个键的hashcode相同,如何获取值对象&lt;/h3&gt;

&lt;p&gt;当我们调用get()方法，HashMap会使用键对象的hashcode找到bucket位置，找到bucket位置之后，会调用keys.equals()方法去找到链表中正确的节点，最终找到要找的值对象。&lt;/p&gt;

&lt;h3 id=&#34;hashmap的大小超过了负载因子-load-factor-定义的容量-会发生什么&#34;&gt;HashMap的大小超过了负载因子(load factor)定义的容量，会发生什么？&lt;/h3&gt;

&lt;p&gt;对象会进行rehashing，调用hash方法找到新的bucket位置。&lt;br /&gt;
默认的负载因子大小为0.75，也就是说，当一个map填满了75%的bucket时候，和其它集合类(如ArrayList等)一样，将会创建原来HashMap大小的两倍的bucket数组，来重新调整map的大小，并将原来的对象放入新的bucket数组中。&lt;/p&gt;

&lt;h3 id=&#34;调整hashmap大小存在什么问题&#34;&gt;调整HashMap大小存在什么问题&lt;/h3&gt;

&lt;p&gt;多线程的情况下，可能产生条件竞争(race condition)。如果两个线程都发现HashMap需要重新调整大小了，它们会同时试着调整大小。&lt;/p&gt;

&lt;h3 id=&#34;为什么string-interger这样的wrapper类适合作为键&#34;&gt;为什么String, Interger这样的wrapper类适合作为键&lt;/h3&gt;

&lt;p&gt;因为wrapper类如String是不可变的，也是final的，而且重写了equals()和hashCode()方法了，防止计算hashCode()改变键值。&lt;/p&gt;

&lt;p&gt;如果键值在放入时和获取时返回不同的hashcode的话，那么就不能从HashMap中找到你想要的对象。&lt;/p&gt;

&lt;p&gt;也可以使用自定义的对象作为键，条件是遵守equals()和hashCode()方法的定义规则，并且当对象插入到Map中之后将不会再改变了。&lt;/p&gt;

&lt;h3 id=&#34;hashmap与hashset&#34;&gt;HashMap与HashSet&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;HashMap&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;HashSet&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;实现了Map接口&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;实现了Set接口（构造new HashMap）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;put()存键值对&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add()存储对象&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;使用键对象来计算hashcode值&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以equals()方法用来判断对象的相等性，如果两个对象不同的话，那么返回false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;hashmap与hashtable&#34;&gt;HashMap与Hashtable&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;HashMap几乎等于Hashtable，除了HashMap是非synchronized的，并可以接受null(HashMap可以接受为null的键值(key)和值(value)，而Hashtable则不行)。&lt;/li&gt;
&lt;li&gt;HashMap是非synchronized，而Hashtable是synchronized。Java 5提供了ConcurrentHashMap，可以替代HashTable&lt;/li&gt;
&lt;li&gt;HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器非fail-fast。所以当有其它线程通过map对象改变了HashMap的结构（增加或者移除元素），会抛出ConcurrentModificationException，但迭代器本身的remove()方法移除元素则不会抛出这个异常。&lt;/li&gt;
&lt;li&gt;由于Hashtable是线程安全的也是synchronized，所以在单线程环境下它比HashMap要慢。&lt;/li&gt;
&lt;li&gt;HashMap不能保证随着时间的推移Map中的元素次序是不变的。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;cocurrenthashmap与hashtable&#34;&gt;CocurrentHashMap与Hashtable&lt;/h3&gt;

&lt;p&gt;Hashtable是synchronized的，但是ConcurrentHashMap同步性能更好，因为它仅仅根据同步级别对map的一部分进行上锁。ConcurrentHashMap当然可以代替HashTable，但是HashTable提供更强的线程安全性。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Mybatis——参数篇</title>
      <link>https://ianeiu.github.io/2018/09/13/mybatis%E5%8F%82%E6%95%B0%E7%AF%87/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/13/mybatis%E5%8F%82%E6%95%B0%E7%AF%87/</guid>
      
        <description>

&lt;h3 id=&#34;参数传递符号&#34;&gt;参数传递符号&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;#{}&lt;/li&gt;

&lt;li&gt;&lt;p&gt;${}&lt;/p&gt;

&lt;p&gt;select * from tbl_employee where id=${id} and last_name=#{userName}
Preparing: select * from tbl_employee where id=&amp;lsquo;admin&amp;rsquo; and last_name=?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;区别：&lt;br /&gt;
#{}:是以预编译的形式，将参数设置到sql语句中。通过PreparedStatement可防止sql注入。&lt;br /&gt;
大多情况下，取参数的值都应该使用#{}。&lt;/p&gt;

&lt;p&gt;${}:取出的值直接拼装在sql语句中；会有安全问题；&lt;br /&gt;
原生jdbc不支持占位符的地方我们就可以使用${}进行取值，比如分表、排序；按照年份分表拆分&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select * from ${year}_salary where xxx;
select * from tb_sys_user order by ${f_name} ${order}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;更丰富的用法&#34;&gt;#{}更丰富的用法&lt;/h3&gt;

&lt;p&gt;规定参数的一些规则：
javaType、 jdbcType、 mode（存储过程）、 numericScale、resultMap、 typeHandler、 jdbcTypeName、 expression（未来准备支持的功能）；&lt;/p&gt;

&lt;p&gt;jdbcType通常需要在某种特定的条件下被设置：在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理。比如Oracle（报错）；
JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，oracle不能正确处理;&lt;/p&gt;

&lt;p&gt;由于全局配置中：jdbcTypeForNull=OTHER；oracle不支持；有以下两种办法解决：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;#{email,jdbcType=OTHER}&lt;/li&gt;
&lt;li&gt;jdbcTypeForNull=NULL &lt;setting name=&#34;jdbcTypeForNull&#34; value=&#34;NULL&#34;/&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;参数传递&#34;&gt;参数传递&lt;/h3&gt;

&lt;h4 id=&#34;单个参数&#34;&gt;单个参数&lt;/h4&gt;

&lt;p&gt;#{参数名/任意名}：取出参数值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- TbSysUser getUserById(String id); --&amp;gt;
&amp;lt;!-- parameterType=&amp;quot;java.lang.String&amp;quot; 可不加 --&amp;gt;
&amp;lt;select id=&amp;quot;getUserById&amp;quot; resultType=&amp;quot;com.wm.demo.mybatis.model.TbSysUser&amp;quot;&amp;gt;
    select * from tb_sys_user where user_id = #{id}
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;多个参数&#34;&gt;多个参数&lt;/h4&gt;

&lt;p&gt;mybatis会做特殊处理。多个参数会被封装成一个map。&lt;br /&gt;
key：param1&amp;hellip;paramN,或者参数的索引也可以&lt;br /&gt;
value：传入的参数值&lt;br /&gt;
#{}就是从map中获取指定的key的值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- TbSysUser getUserByIdAndName(String id, String userName); --&amp;gt;
&amp;lt;select id=&amp;quot;getUserByIdAndName&amp;quot; resultType=&amp;quot;com.wm.demo.mybatis.model.TbSysUser&amp;quot;&amp;gt;
    select * from tb_sys_user where user_id = #{0} and user_name like #{1}
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;map封装多个参数&#34;&gt;Map封装多个参数&lt;/h4&gt;

&lt;p&gt;#{key}：取出map中对应的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- TbSysUser getUserByMap(Map&amp;lt;String, Object&amp;gt; map); --&amp;gt;
&amp;lt;select id=&amp;quot;getUserByMap&amp;quot; resultType=&amp;quot;com.wm.demo.mybatis.model.TbSysUser&amp;quot;&amp;gt;
    select * from tb_sys_user where user_id = #{userId} and user_name like #{userName}
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;pojo作为参数&#34;&gt;POJO作为参数&lt;/h4&gt;

&lt;p&gt;#{属性名}：取出传入的pojo的属性值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- boolean updateUser(TbSysUser user); --&amp;gt;
&amp;lt;update id=&amp;quot;updateUser&amp;quot;&amp;gt;
    update tb_sys_user 
    set password=#{password},status=#{status}
    where user_id=#{userId}
&amp;lt;/update&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;to作为参数&#34;&gt;TO作为参数&lt;/h4&gt;

&lt;p&gt;如果多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个TO（Transfer Object）数据传输对象&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Page{
    int index;
    int size;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;注解方式&#34;&gt;注解方式&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- TbSysUser getUserAnnoationByIdAndName(@Param(&amp;quot;id&amp;quot;) String id, @Param(&amp;quot;userName&amp;quot;) String userName); --&amp;gt;
&amp;lt;select id=&amp;quot;getUserAnnoationByIdAndName&amp;quot; resultType=&amp;quot;com.wm.demo.mybatis.model.TbSysUser&amp;quot;&amp;gt;
    select * from tb_sys_user where user_id = #{id} and user_name like #{userName}
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;list封装数据集合-涉及动态sql&#34;&gt;List封装数据集合（涉及动态SQL）&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- List&amp;lt;TbSysUser&amp;gt; getUsersByConditionForeach(@Param(&amp;quot;ids&amp;quot;)List&amp;lt;String&amp;gt; ids); --&amp;gt;
&amp;lt;select id=&amp;quot;getUsersByConditionForeach&amp;quot; resultType=&amp;quot;com.wm.demo.mybatis.model.TbSysUser&amp;quot;&amp;gt;
    select * from tb_sys_user
    &amp;lt;!--
        collection：指定要遍历的集合：
            list类型的参数会特殊处理封装在map中，map的key就叫list
        item：将当前遍历出的元素赋值给指定的变量
        separator:每个元素之间的分隔符
        open：遍历出所有结果拼接一个开始的字符
        close:遍历出所有结果拼接一个结束的字符
        index:索引。遍历list的时候是index就是索引，item就是当前值
                      遍历map的时候index表示的就是map的key，item就是map的值

        #{变量名}就能取出变量的值也就是当前遍历出的元素
      --&amp;gt;
    &amp;lt;foreach collection=&amp;quot;ids&amp;quot; item=&amp;quot;user_id&amp;quot; separator=&amp;quot;,&amp;quot; open=&amp;quot;where user_id in(&amp;quot; close=&amp;quot;)&amp;quot;&amp;gt;
        #{user_id}
    &amp;lt;/foreach&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;复杂情况&#34;&gt;复杂情况&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;public TbSysUser getUser(@Param(&amp;quot;id&amp;quot;)Integer id,String userName);
取值：id==&amp;gt;#{id/param1}   userName==&amp;gt;#{param2}

public TbSysUser getUser(Integer id,@Param(&amp;quot;u&amp;quot;)TbSysUser user);
取值：id==&amp;gt;#{param1}    userName===&amp;gt;#{param2.userName/u.userName}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果是Collection（List、Set）类型或者是数组，也会特殊处理。也是把传入的list或者数组封装在map中。&lt;br /&gt;
key：Collection（collection）,如果是List还可以使用这个key(list) 数组(array)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;TbSysUser&amp;gt; getUsersByConditionForeach(@Param(&amp;quot;ids&amp;quot;)List&amp;lt;String&amp;gt; ids);
取值：取出第一个id的值：   #{list[0]}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;处理参数源码&#34;&gt;处理参数源码&lt;/h3&gt;

&lt;p&gt;总结：参数多时会封装map，为了不混乱，我们可以使用@Param来指定封装时使用的key；#{key}就可以取出map中的值；&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TbSysUser getUserAnnoationByIdAndName(@Param(&amp;quot;id&amp;quot;) String id, @Param(&amp;quot;userName&amp;quot;) String userName);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ParamNameResolver解析参数封装map的；
//1、names：{0=id, 1=userName}；构造器的时候就确定好了&lt;/p&gt;

&lt;p&gt;确定流程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;获取每个标了param注解的参数的@Param的值：id，userName赋值给name;&lt;/li&gt;
&lt;li&gt;每次解析一个参数给map中保存信息：（key：参数索引，value：name的值）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;name的值：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;标注了param注解：注解的值&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;没有标注：

&lt;ol&gt;
&lt;li&gt;全局配置：useActualParamName（jdk1.8）：name=参数名&lt;/li&gt;
&lt;li&gt;name=map.size()；相当于当前元素的索引&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;测试数据：args[ &amp;lsquo;admin&amp;rsquo;，&amp;rdquo;测试%&amp;ldquo;]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Object getNamedParams(Object[] args) {
    final int paramCount = names.size();
    //1、参数为null直接返回
    if (args == null || paramCount == 0) {
      return null;

    //2、如果只有一个元素，并且没有Param注解；args[0]：单个参数直接返回
    } else if (!hasParamAnnotation &amp;amp;&amp;amp; paramCount == 1) {
      return args[names.firstKey()];

    //3、多个元素或者有Param标注
    } else {
      final Map&amp;lt;String, Object&amp;gt; param = new ParamMap&amp;lt;Object&amp;gt;();
      int i = 0;

      //4、遍历names集合；{0=id, 1=userName}
      for (Map.Entry&amp;lt;Integer, String&amp;gt; entry : names.entrySet()) {

        //names集合的value作为key;  names集合的key又作为取值的参考args[0]
        //eg:{id=args[0]:admin,lastName=args[1]:测试%}
        param.put(entry.getValue(), args[entry.getKey()]);


        // add generic param names (param1, param2, ...)param
        //额外的将每一个参数也保存到map中，使用新的key：param1...paramN
        //效果：有Param注解可以#{指定的key}，或者#{param1}
        final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);
        // ensure not to overwrite parameter named with @Param
        if (!names.containsValue(genericParamName)) {
          param.put(genericParamName, args[entry.getKey()]);
        }
        i++;
      }
      return param;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Mybatis——异常Mapped Statements collection does not contain</title>
      <link>https://ianeiu.github.io/2018/09/13/mybatis%E5%BC%82%E5%B8%B8mapped-statements-collection-does-not-contain/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/13/mybatis%E5%BC%82%E5%B8%B8mapped-statements-collection-does-not-contain/</guid>
      
        <description>&lt;p&gt;初次接触使用Mybatis会出现“Mapped Statements collection does not contain value for &amp;hellip;.“错误提示&lt;/p&gt;

&lt;p&gt;常见的错误原因有几种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mapper.xml中没有加入namespace&lt;/li&gt;
&lt;li&gt;mapper.xml中的方法和接口mapper的方法不对应&lt;/li&gt;
&lt;li&gt;mapper.xml没有加入到mybatis-config.xml中(即总的配置文件)，例外：配置了mapper文件的包路径的除外&lt;/li&gt;
&lt;li&gt;mapper.xml文件名和所写的mapper名称不相同。&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>JVM的结构</title>
      <link>https://ianeiu.github.io/2018/09/11/jvm%E7%9A%84%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/11/jvm%E7%9A%84%E7%BB%93%E6%9E%84/</guid>
      
        <description>

&lt;h2 id=&#34;jvm运行时数据区&#34;&gt;JVM运行时数据区&lt;/h2&gt;

&lt;p&gt;运行时数据区（分布在操作系统堆中，由程序员管理）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;方法区&lt;/li&gt;
&lt;li&gt;虚拟机栈（Java栈）&lt;/li&gt;
&lt;li&gt;堆（Java堆）&lt;/li&gt;
&lt;li&gt;本地方法栈/区&lt;/li&gt;
&lt;li&gt;程序计数器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img style=&#34;width:60%&#34; src=&#34;https://ianeiu.github.io/resouce/JVM/JVM结构.jpg&#34;  alt=&#34;JVM结构&#34; /&gt;&lt;/p&gt;

&lt;p&gt;虽然这几个区域都是属于运行时数据区，但是这几个区域的创建时机是不一致的，有的是随虚拟机启动而创建的，随虚拟机销毁而销毁；有的是随线程创建而创建，随线程销毁而销毁。&lt;/p&gt;

&lt;h2 id=&#34;线程独享的区域&#34;&gt;线程独享的区域&lt;/h2&gt;

&lt;h4 id=&#34;程序计数器&#34;&gt;程序计数器&lt;/h4&gt;

&lt;p&gt;程序计数器是来指示当前线程正在执行的JVM指令，因此程序计数器是线程独有的。一个JVM支持多个线程，每一个线程都要自己的程序计数器。&lt;br /&gt;
如果线程正在执行的方法是Java方法，则程序计数器保存的是当前线程正在执行的JVM指令，如果正在执行的方法是Native方法，则保存为空（undefined)。&lt;/p&gt;

&lt;h4 id=&#34;虚拟机栈&#34;&gt;虚拟机栈&lt;/h4&gt;

&lt;p&gt;每个线程包含一个栈区，栈中只保存基础数据类型的对象和自定义对象的引用。每个栈中的数据(原始类型和对象引用)都是私有的。数据大小和生命周期是可以确定的，当没有引用指向数据时，这个数据就会自动消失。
栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。&lt;/p&gt;

&lt;h4 id=&#34;本地方法区&#34;&gt;本地方法区&lt;/h4&gt;

&lt;p&gt;本地方法区存储着native方法的调用状态，一般会随着线程创建而针对每一个线程分配。&lt;/p&gt;

&lt;h2 id=&#34;全局共享的区域&#34;&gt;全局共享的区域&lt;/h2&gt;

&lt;h4 id=&#34;方法区&#34;&gt;方法区&lt;/h4&gt;

&lt;p&gt;方法区是可供各个线程共享的内存区域，用于存储已被虚拟机加载的类信息，常量，静态变量等。当开发人员在程序中通过Class对象中的getName、isInterface等方法来获取信息时，这些数据都来源于方法区域。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;运行时常量池&lt;/strong&gt; ：方法区的一部分&lt;em&gt;（Java jdk1.7中的常量池是移到了堆中，同时在jdk1.8中移除整个永久代，取而代之的是一个叫元空间（Metaspace）的区域）    &lt;/em&gt;，存放着类中固定的常量信息、方法、和field的引用信息。JVM在加载类的时候会为每一个Class分配一个独立的常量池。&lt;/p&gt;

&lt;h4 id=&#34;堆&#34;&gt;堆&lt;/h4&gt;

&lt;p&gt;JVM只有一个堆区(heap)被所有线程共享，堆中不存放基本类型和对象引用，存储着所有类实例即类对象和数组对象。对象的由垃圾回收器负责回收，因此大小和生命周期不需要确定&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Java初中级面试题集</title>
      <link>https://ianeiu.github.io/2018/09/11/java%E5%88%9D%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/11/java%E5%88%9D%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86/</guid>
      
        <description>

&lt;h3 id=&#34;jvm的内存结构&#34;&gt;JVM的内存结构&lt;/h3&gt;

&lt;p&gt;详见 &lt;a href=&#34;https://ianeiu.github.io/2018/09/11/jvm的结构&#34; target=&#34;blank&#34;&gt;jvm的结构&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;强引用-软引用和弱引用的区别&#34;&gt;强引用，软引用和弱引用的区别&lt;/h3&gt;

&lt;p&gt;&lt;kbd&gt;强引用&lt;/kbd&gt;
只有这个引用被释放之后，对象才会被释放掉，只要引用存在，垃圾回收器永远不会回收，这是最常见的New出来的对象。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;软引用&lt;/kbd&gt;
内存溢出之前通过代码回收的引用。软引用主要用户实现类似缓存的功能，在内存足够的情况下直接通过软引用取值，无需从繁忙的真实来源查询数据，提升速度；当内存不足时，自动删除这部分缓存数据，从真正的来源查询这些数据。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;弱引用&lt;/kbd&gt;
第二次垃圾回收时回收的引用，短时间内通过弱引用取对应的数据，可以取到，当执行过第二次垃圾回收时，将返回null。弱引用主要用于监控对象是否已经被垃圾回收器标记为即将回收的垃圾，可以通过弱引用的isEnQueued方法返回对象是否被垃圾回收器标记。&lt;/p&gt;

&lt;h3 id=&#34;数组在内存中如何分配&#34;&gt;数组在内存中如何分配&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;简单的值类型的数组，每个数组成员是一个引用（指针），引用到栈上的空间（因为值类型变量的内存分配在栈上）&lt;/li&gt;
&lt;li&gt;引用类型，类类型的数组，每个数组成员仍是一个引用（指针），引用到堆上的空间（因为类的实例的内存分配在堆上）&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;java的多态表现在哪里&#34;&gt;java的多态表现在哪里&lt;/h3&gt;

&lt;p&gt;主要有两种表现形式：重载和重写&lt;/p&gt;

&lt;p&gt;重载：发生在同一类中，具有相同的方法名，主要是看参数的个数，类型，顺序不同实现方法的重载的，返回值的类型可以不同。&lt;/p&gt;

&lt;p&gt;重写：发生在两个类中（父类和子类），具有相同的方法名，主要看方法中参数，个数，类型必须相同，返回值的类型必须相同。&lt;/p&gt;

&lt;h3 id=&#34;string的substring-方法内部是如何实现&#34;&gt;String的substring()方法内部是如何实现&lt;/h3&gt;

&lt;p&gt;substring方法通过原字符串创建了一个新的对象。&lt;br /&gt;
当为字符串分配内存时，char数组value[]存储字符，offset=0，count=字符串长度。&lt;/p&gt;

&lt;p&gt;在Java6里，由substring(start,end)调用构造函数String(int,in,char[])时，实际上是改变offset和count的位置达到取得子字符串的目的，而子字符串里的value[]数组，因为引用是强引用，仍然指向原字符串。&lt;br /&gt;
由于String是不可变的(immutable)，基于这种共享同一个字符数组的设计有以下好处：  调用substring()时无需复制数组，可重用value[]数组；且substring()的运行是常数时间，非线性，性能得到提高；而劣势，便是可能会产生内存泄露。&lt;br /&gt;
假设原字符串s有1GB，且我们需要的是s.substring(1,10)这样一段小的字符串，但由于substring()里的value[]数组仍然指向1GB的原字符串，导致原字符串无法在GC中释放，从而产生了内存泄露。&lt;/p&gt;

&lt;p&gt;在Java7里，String的substring()方法实现已经改变，由原来的共享数组变成了传统的拷贝，原字符串的字符数组已经不再被引用，杜绝了内存泄露的同时也将运行时间由常数变成了线性，这个改变也使得substring()创建字符串的操作更加耗时，以前的开销是O(1)，现在最坏情况是O(n)。&lt;/p&gt;

&lt;h3 id=&#34;什么是不可修改对象-immutable-object&#34;&gt;什么是不可修改对象(Immutable Object)&lt;/h3&gt;

&lt;p&gt;可修改对象是那些一旦被创建就不能修改的对象。对这种对象的任何改动的后果都是会创建一个新的对象，而不是在原对象本身做修改。&lt;/p&gt;

&lt;p&gt;大多数这样的类通常都是final类型的，因为这样可以避免自己被继承继而被覆盖方法。例如Java中的String类。&lt;/p&gt;

&lt;p&gt;也可以通过将类的成员设置成private非final的来获得同样的效果。同时类不能通过方法暴露成员，特别是可修改类型的成员。&lt;br /&gt;
当类的方法接收客户类传入的可修改对象的话，应该使用一个复制的对象来防止客户代码来修改这个传入的可修改类。比如，传入java.util.Date对象的话，应该使用clone()方法来获得一个副本。&lt;br /&gt;
当通过类方法返回一个可修改对象时，需要返回的是类对象的副本，防止客户代码通过此引用修改了成员对象的属性。&lt;/p&gt;

&lt;h3 id=&#34;什么时候需要重写hashcode-和equals-方法&#34;&gt;什么时候需要重写hashCode()和equals()方法&lt;/h3&gt;

&lt;p&gt;当你需要根据业务逻辑来进行相等性判断、而不是根据对象相等性来判断的时候你就需要重写这两个函数了。&lt;br /&gt;
例如，两个Employee对象相等的依据是它们拥有相同的emp_id，尽管它们有可能是两个不同的对象，并且分别在不同的地方被创建。同时，如果你准备把它们当作HashMap中的key来使用的话，你也必须重写这两个方法。现在，作为Java中equals-hashcode的一个约定，当你重写equals的时候必须也重写hashcode，否则你会打破诸如Set, Map等集合赖以正常工作的约定。&lt;/p&gt;

&lt;p&gt;当你向HashMap插入一个key的时候，首先，这个对象的hashCode()方法会被调用，调用结果用来计算将要存储的位置(bucket)。&lt;br /&gt;
因为某个位置上可能以链表的方式已经包含了多个Map.Entry对象，所以HashMap会使用equals()方法来将此对象与所有这些Map.Entry所包含的key进行对比，以确定此key对象是否已经存在。&lt;/p&gt;

&lt;h3 id=&#34;mybatis如何处理结果集&#34;&gt;mybatis如何处理结果集&lt;/h3&gt;

&lt;p&gt;MyBatis的结果集是通过反射来实现的。并不是通过get/set方法。在实体类中无论是否定义get/set()方法，都是可以接收到的。&lt;/p&gt;

&lt;h3 id=&#34;http-https协议&#34;&gt;http,https协议&lt;/h3&gt;

&lt;p&gt;HTTP：互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。&lt;/p&gt;

&lt;p&gt;HTTPS：以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。&lt;/p&gt;

&lt;p&gt;区别：&lt;br /&gt;
1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用;&lt;br /&gt;
2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议;
3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443;&lt;br /&gt;
4、http的连接很简单，是无状态的；HTTPS是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。&lt;/p&gt;

&lt;h3 id=&#34;tcp-ip协议&#34;&gt;tcp/ip协议&lt;/h3&gt;

&lt;p&gt;TCP/IP协议族是一个四层协议系统，自底而上分别是数据链路层、网络层、传输层和应用层。每一层完成不同的功能，且通过若干协议来实现，上层协议使用下层协议提供的服务。&lt;br /&gt;
1、数据链路层负责帧数据的传递;&lt;br /&gt;
2、网络层责数据怎样传递过去;&lt;br /&gt;
3、传输层负责传输数据的控制（准确性、安全性）;&lt;br /&gt;
4、应用层负责数据的展示和获取。&lt;/p&gt;

&lt;h3 id=&#34;tcp五层网络协议&#34;&gt;tcp五层网络协议&lt;/h3&gt;

&lt;p&gt;物理层：&lt;br /&gt;
为数据端设备提供传送数据的通路，数据通路可以是一个物理媒体，也可以是多个物理媒体连接而成。&lt;/p&gt;

&lt;p&gt;数据链路层：&lt;br /&gt;
为网络层提供数据传送服务。&lt;/p&gt;

&lt;p&gt;网络层：&lt;br /&gt;
路由选择和中继、激活,终止网络连接、在一条数据链路上复用多条网络连接,多采取分时复用技术 、差错检测与恢复、排序,流量控制、服务选择、网络管理 。&lt;/p&gt;

&lt;p&gt;传输层：&lt;br /&gt;
传输层是两台计算机经过网络进行数据通信时,第一个端到端的层次，具有缓冲作用。&lt;/p&gt;

&lt;p&gt;应用层：&lt;br /&gt;
应用层向应用程序提供服务&lt;/p&gt;

&lt;h3 id=&#34;tcp与udp的区别&#34;&gt;TCP与UDP的区别&lt;/h3&gt;

&lt;p&gt;1、基于连接与无连接;&lt;br /&gt;
2、TCP要求系统资源较多，UDP较少;&lt;br /&gt;
3、UDP程序结构较简单;&lt;br /&gt;
4、流模式（TCP）与数据报模式(UDP);&lt;br /&gt;
5、TCP保证数据正确性，UDP可能丢包;&lt;br /&gt;
6、TCP保证数据顺序，UDP不保证。&lt;/p&gt;

&lt;h3 id=&#34;cookie和session的区别-分布式环境怎么保存用户状态&#34;&gt;cookie和session的区别，分布式环境怎么保存用户状态&lt;/h3&gt;

&lt;p&gt;1、cookie数据存放在客户的浏览器上，session数据放在服务器上。&lt;br /&gt;
2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session。&lt;br /&gt;
3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用COOKIE。&lt;br /&gt;
4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。&lt;/p&gt;

&lt;p&gt;分布式环境下的session（举例两种）：&lt;/p&gt;

&lt;p&gt;服务器session复制&lt;br /&gt;
原理：任何一个服务器上的session发生改变（增删改），该节点会把这个 session的所有内容序列化，然后广播给所有其它节点，不管其他服务器需不需要session，以此来保证Session同步。&lt;br /&gt;
优点：可容错，各个服务器间session能够实时响应。&lt;br /&gt;
缺点：会对网络负荷造成一定压力，如果session量大的话可能会造成网络堵塞，拖慢服务器性能。&lt;/p&gt;

&lt;p&gt;session共享机制&lt;br /&gt;
使用分布式缓存方案比如memcached、redis，但是要求Memcached或Redis必须是集群。&lt;/p&gt;

&lt;h3 id=&#34;写一段栈溢出-堆溢出的代码&#34;&gt;写一段栈溢出、堆溢出的代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class Test {  

    //不断创建对象可以导致堆溢出
   public void testHeap(){  
       for(;;){  
             ArrayList list = new ArrayList (2000);  
         }  
   }  

   //递归调用可以导致栈溢出
   int num=1;  
   public void testStack(){  
       num++;  
       this.testStack();  
    }  

   public static void main(String[] args){  
       Test  t  = new Test ();  
       t.testHeap();  
       t.testStack();     
   }  
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>[转] Java中定义常量的四种方法</title>
      <link>https://ianeiu.github.io/2018/09/11/%E8%BD%AC-java%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/11/%E8%BD%AC-java%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      
        <description>

&lt;p&gt;原文地址 &lt;a href=&#34;https://blog.csdn.net/autofei/article/details/6419460&#34; target=&#34;blank&#34;&gt;如何在Java中定义常量(Constant)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;java中定义常量的四种方法&#34;&gt;Java中定义常量的四种方法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;/**&lt;/span&gt; 
 &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;One&lt;/span&gt; 
 &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;采用接口&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的中变量默认为&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final的特性&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;*/&lt;/span&gt;  
&lt;span class=&#34;n&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ConstantInterface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SUNDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;SUNDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MONDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;MONDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TUESDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;TUESDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WEDNESDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;WEDNESDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;THURSDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;THURSDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FRIDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;FRIDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SATURDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;SATURDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  

&lt;span class=&#34;o&#34;&gt;/**&lt;/span&gt; 
 &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Two&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;采用了&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Java&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;中引入的&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Enum类型&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;推荐使用&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;*/&lt;/span&gt;  
&lt;span class=&#34;n&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ConstantEnum&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;SUNDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MONDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TUESDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WEDNESDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;THURSDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FRIDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SATURDAY&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
 
&lt;span class=&#34;o&#34;&gt;/**&lt;/span&gt; 
 &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Three&lt;/span&gt; 
 &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;采用了在普通类中使用&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final修饰变量的方法&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;*/&lt;/span&gt;  
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ConstantClassField&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SUNDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;SUNDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MONDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;MONDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TUESDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;TUESDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WEDNESDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;WEDNESDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;THURSDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;THURSDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FRIDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;FRIDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SATURDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;SATURDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;span class=&#34;o&#34;&gt;/**&lt;/span&gt; 
 &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Four&lt;/span&gt; 
 &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;类似方法三，但是通过函数来获取常量&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;www&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ibm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;developerworks&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;*/&lt;/span&gt;  
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ConstantClassFunction&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SUNDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;SUNDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MONDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;MONDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TUESDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;TUESDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WEDNESDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;WEDNESDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;THURSDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;THURSDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FRIDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;FRIDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SATURDAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;SATURDAY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getSunday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SUNDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getMonday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MONDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getTuesday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TUESDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getWednesday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WEDNESDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getThursday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;THURSDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getFirday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FRIDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getSaturday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SATURDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TestConstant&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;day&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;saturday&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Is today Saturday?&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConstantInterface&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SATURDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;  
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConstantEnum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SATURDAY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;  
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConstantClassField&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SATURDAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;  
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConstantClassFunction&lt;/span&gt;  
				&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getSaturday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;  
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Oracle——卸载教程</title>
      <link>https://ianeiu.github.io/2018/09/10/oracle%E5%8D%B8%E8%BD%BD%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/10/oracle%E5%8D%B8%E8%BD%BD%E6%95%99%E7%A8%8B/</guid>
      
        <description>

&lt;h2 id=&#34;oracle卸载步骤&#34;&gt;Oracle卸载步骤&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;开始–&amp;gt;设置–&amp;gt;控制面板–&amp;gt;管理工具–&amp;gt;服务–&amp;gt;停止所有oracle服务&lt;/li&gt;
&lt;li&gt;开始–&amp;gt;程序–&amp;gt;oracle-oraDb11g_home1–&amp;gt;Oracle安装产品–&amp;gt;Universal Installers卸载所有Oracle产品，选中除“OraDb11g_home1”外的全部目录，删除。（如果第二步失败，直接第三步）&lt;/li&gt;
&lt;li&gt;运行regedit&lt;/li&gt;
&lt;li&gt;删除HKEY_LOCAL_MACHINE\SOFTWARE\ORACLE&lt;/li&gt;
&lt;li&gt;删除一下三个位置中所有oracle入口。HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\
HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services&lt;/li&gt;
&lt;li&gt;删除HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\下所有Oracle&lt;/li&gt;
&lt;li&gt;删除HKEY_CLASSES_ROOT目录下所有以Ora、Oracle、Orcl或EnumOra为前缀的键。&lt;/li&gt;
&lt;li&gt;删除HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\MenuOrder\Start Menu\Programs中所有以oracle开头的键。&lt;/li&gt;
&lt;li&gt;删除HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI中除Microsoft ODBC for Oracle注册表键以外的所有含有Oracle的键。&lt;/li&gt;
&lt;li&gt;开始–&amp;gt;设置–&amp;gt;控制面板–&amp;gt;系统–&amp;gt;高级–&amp;gt;环境变量， 删除环境变量CLASSPATH和PATH中有关oracle的设定&lt;/li&gt;
&lt;li&gt;从桌面上、startup（启动）组、程序菜单中，删除所有有关oracle的组合图标&lt;/li&gt;
&lt;li&gt;重启计算机&lt;/li&gt;
&lt;li&gt;删除所有与Oracle相关的目录(如果删不掉，重启计算机后再删)包括：

&lt;ol&gt;
&lt;li&gt;C:\Program file\Oracle目录。&lt;/li&gt;
&lt;li&gt;ORACLE_BASE目录(oracle的安装目录)。&lt;/li&gt;
&lt;li&gt;C:\WINDOWS\system32\config\systemprofile\Oracle目录。&lt;/li&gt;
&lt;li&gt;C:\Users\Administrator\Oracle或C:\Documents and Settings\Administrator\Oracle目录。&lt;/li&gt;
&lt;li&gt;C:\WINDOWS下删除以下文件ORACLE.INI、oradim73.INI、oradim80.INI、oraodbc.ini等等。&lt;/li&gt;
&lt;li&gt;C:\WINDOWS下的WIN.INI文件中若有[ORACLE]的标记段，删除该段。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;在运行框中输入“win.ini”，回车。WIN.INI文件中若有[ORACLE]的标记段，删除该段&lt;/li&gt;
&lt;li&gt;如有必要，删除所有Oracle相关的ODBC的DSN&lt;/li&gt;
&lt;li&gt;到事件查看器中，删除Oracle相关的日志&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;说明： 如果有个别DLL文件无法删除的情况，则不用理会，重新启动，开始新的安装，安装时，选择一个新的目录，则，安装完毕并重新启动后，老的目录及文件就可以删除掉了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Oracle安装异常——INS-13001</title>
      <link>https://ianeiu.github.io/2018/09/10/oracle%E5%AE%89%E8%A3%85%E5%BC%82%E5%B8%B8ins-13001/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/10/oracle%E5%AE%89%E8%A3%85%E5%BC%82%E5%B8%B8ins-13001/</guid>
      
        <description>

&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;

&lt;p&gt;win10系统安装oracle11g时遇到INS-13001环境不满足最低要求&lt;/p&gt;

&lt;h2 id=&#34;解决&#34;&gt;解决&lt;/h2&gt;

&lt;p&gt;打开database-&amp;gt;stage-&amp;gt;cvu-&amp;gt;cvu_prereq.xml，编辑内容&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;OPERATING_SYSTEM RELEASE=&amp;quot;6.2&amp;quot;&amp;gt;
    &amp;lt;VERSION VALUE=&amp;quot;3&amp;quot;/&amp;gt;
        &amp;lt;ARCHITECTURE VALUE=&amp;quot;32-bit&amp;quot;/&amp;gt;
        &amp;lt;NAME VALUE=&amp;quot;Windows 10&amp;quot;/&amp;gt;
        &amp;lt;ENV_VAR_LIST&amp;gt;
            &amp;lt;ENV_VAR NAME=&amp;quot;PATH&amp;quot; MAX_LENGTH=&amp;quot;1023&amp;quot; /&amp;gt;
        &amp;lt;/ENV_VAR_LIST&amp;gt;
&amp;lt;/OPERATING_SYSTEM&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一段和原先不同就是6.2和window10&lt;/p&gt;

&lt;p&gt;如何你系统安装的是64位的，则将32-bit改成64bit即可，然后重新安装&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Oracle异常——ORA-12505</title>
      <link>https://ianeiu.github.io/2018/09/10/oracle%E5%BC%82%E5%B8%B8ora-12505/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/10/oracle%E5%BC%82%E5%B8%B8ora-12505/</guid>
      
        <description>

&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;

&lt;p&gt;使用SQL Developer 连接DB报错 ORA-12505，报错信息如下：&lt;br /&gt;
ORA-12505, TNS:listener does not currently know of SID given in connect descriptor&lt;/p&gt;

&lt;h2 id=&#34;解决&#34;&gt;解决&lt;/h2&gt;

&lt;p&gt;找到Oracle安装目录（类似D:\app\mian\product\11.2.0\dbhome_1\NETWORK\ADMIN  ）下的tnsnames.ora和listener.ora文件，备份下，然后对照下面配置进行修改&lt;/p&gt;

&lt;h4 id=&#34;tnsnames-ora&#34;&gt;tnsnames.ora&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# tnsnames.ora Network Configuration File: D:\app\mian\product\11.2.0\dbhome_1\network\admin\tnsnames.ora
# Generated by Oracle configuration tools.

LISTENER_ORCL =
  (ADDRESS = (PROTOCOL = TCP)(HOST = DESKTOP-UKQ7RTS)(PORT = 1521))


ORACLR_CONNECTION_DATA =
  (DESCRIPTION =
    (ADDRESS_LIST =
      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))
    )
    (CONNECT_DATA =
      (SID = CLRExtProc)
      (PRESENTATION = RO)
    )
  )

ORCL =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = DESKTOP-UKQ7RTS)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = orcl)
    )
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;listener-ora&#34;&gt;listener.ora&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# listener.ora Network Configuration File: D:\app\mian\product\11.2.0\dbhome_1\network\admin\listener.or
# Generated by Oracle configuration tools.

SID_LIST_LISTENER =
  (SID_LIST =
    (SID_DESC =
      (SID_NAME = CLRExtProc)
      (ORACLE_HOME = D:\app\mian\product\11.2.0\dbhome_1)
      (PROGRAM = extproc)
      (ENVS = &amp;quot;EXTPROC_DLLS=ONLY:D:\app\mian\product\11.2.0\dbhome_1\bin\oraclr11.dll&amp;quot;)
    )
    (SID_DESC =
      (GLOBAL_DBNAME = oracle)
      (ORACLE_HOME = D:\app\mian\product\11.2.0\dbhome_1)
      (SID_NAME = oracle)
    )
  )

LISTENER =
  (DESCRIPTION_LIST =
    (DESCRIPTION =
        (ADDRESS = (PROTOCOL = TCP)(HOST = DESKTOP-UKQ7RTS)(PORT = 1521))
    )
    (DESCRIPTION =
      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))
      (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))
    )
  )

ADR_BASE_LISTENER = D:\app\mian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：&lt;br /&gt;
1. DESKTOP-UKQ7RTS 为计算机名&lt;br /&gt;
2. 更改文件后需要重启服务&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Spring——@Value注入static属性</title>
      <link>https://ianeiu.github.io/2018/09/04/springvalue%E6%B3%A8%E5%85%A5static%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/04/springvalue%E6%B3%A8%E5%85%A5static%E5%B1%9E%E6%80%A7/</guid>
      
        <description>

&lt;h2 id=&#34;value注入static属性&#34;&gt;@Value注入static属性&lt;/h2&gt;

&lt;p&gt;方式1：&lt;br /&gt;
通过执行set方法进行参数注入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static String userName;
@Value(&amp;quot;${git.userName}&amp;quot;)
public void setUserName(String userName) {
	GitUtils.userName = userName;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方式2：&lt;br /&gt;
通过中间变量赋值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static String userName; 
@Value(&amp;quot;${git.userName}&amp;quot;)
private String userNameTmp;
 
@PostConstruct
public void init() {
	userName = userNameTmp;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>正则的运用——短信模版配置</title>
      <link>https://ianeiu.github.io/2018/09/04/%E6%AD%A3%E5%88%99%E7%9A%84%E8%BF%90%E7%94%A8%E7%9F%AD%E4%BF%A1%E6%A8%A1%E7%89%88%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/04/%E6%AD%A3%E5%88%99%E7%9A%84%E8%BF%90%E7%94%A8%E7%9F%AD%E4%BF%A1%E6%A8%A1%E7%89%88%E9%85%8D%E7%BD%AE/</guid>
      
        <description>

&lt;h2 id=&#34;短信模版的配置功能&#34;&gt;短信模版的配置功能&lt;/h2&gt;

&lt;p&gt;需求功能如下图：&lt;br /&gt;
&lt;img src=&#34;https://ianeiu.github.io/resouce/短信模版-正则/dt1.png&#34;  alt=&#34;短信模版1&#34; /&gt;
&lt;img src=&#34;https://ianeiu.github.io/resouce/短信模版-正则/dt2.png&#34;  alt=&#34;短信模版2&#34; /&gt;
&lt;img src=&#34;https://ianeiu.github.io/resouce/短信模版-正则/dt3.png&#34;  alt=&#34;短信模版3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function toExa(template){

	var now = new Date();
	var syear = now.getYear();//获取当前年份(2位)
	var year = now.getFullYear(); //获取完整的年份(4位,1970-????)
	var month = now.getMonth() &amp;lt;9?&amp;quot;0&amp;quot;+(now.getMonth()+1):(now.getMonth()+1);//获取当前月份(1-12)
	var day = now.getDate()&amp;lt;10?&amp;quot;0&amp;quot;+now.getDate():now.getDate();//获取当前日(1-31)
	var hour = now.getHours()&amp;lt;10?&amp;quot;0&amp;quot;+now.getHours():now.getHours(); //获取当前小时数(00-23)
	var minu = now.getMinutes&amp;lt;10?&amp;quot;0&amp;quot;+now.getMinutes():now.getMinutes(); //获取当前分钟数(00-59)
	var seco = now.getSeconds()&amp;lt;10?&amp;quot;0&amp;quot;+now.getSeconds():now.getSeconds(); //获取当前秒数(00-59)
	var pre_syear = syear - 1;
	var pre_year = year - 1;
	var pre_month = getLastMonth(now);
	var pre_day = getYestoday(now);
	
	template = template.replace(/{yyyy}/g,year);
	template = template.replace(/{yy}/g,syear);
	template = template.replace(/{MM}/g,month);
	template = template.replace(/{dd}/g,day);
	template = template.replace(/{HH}/g,hour);
	template = template.replace(/{mm}/g,minu);
	template = template.replace(/{ss}/g,seco);
	template = template.replace(/{MMdd}/g,month+&amp;quot;&amp;quot;+day);
	template = template.replace(/{yyyyMMdd}/g,year+&amp;quot;&amp;quot;+month+&amp;quot;&amp;quot;+day);
	template = template.replace(/{yyyyMMddHHmm}/g,year+&amp;quot;&amp;quot;+month+&amp;quot;&amp;quot;+day+&amp;quot;&amp;quot;+hour+&amp;quot;&amp;quot;+minu);
	
	template = template.replace(/{pre_yy}/g,pre_year);
	template = template.replace(/{pre_yyyy}/g,pre_year);
	template = template.replace(/{pre_MM}/g,pre_month);
	template = template.replace(/{pre_dd}/g,pre_day);
	template = template.replace(/{pre_MMdd}/g,pre_month+&amp;quot;&amp;quot;+pre_day);
	template = template.replace(/{pre_yyyyMMdd}/g,pre_year+&amp;quot;&amp;quot;+pre_month+&amp;quot;&amp;quot;+pre_day);
	template = template.replace(/{pre_yyyyMMddHHmm}/g,pre_year+&amp;quot;&amp;quot;+pre_month+&amp;quot;&amp;quot;+pre_day+&amp;quot;&amp;quot;+day+&amp;quot;&amp;quot;+hour+&amp;quot;&amp;quot;+minu);
	
	//srkVal  -  输入框(值,时间)
	template = template.replace(/[\{][f]([1-9]\d*)[\}]/g,&amp;quot;&amp;lt;input onchange=&#39;caclClick(&amp;amp;#39;num&amp;amp;#39;);&#39; id=&#39;srkVal$1&#39; type=&#39;text&#39; class=&#39;n_textInp&#39;/&amp;gt;&amp;quot;);
	template = template.replace(/[\{][z]([1-9]\d*)[\}]/g,&amp;quot;&amp;lt;input onchange=&#39;caclClick();&#39; id=&#39;srkVal$1&#39; type=&#39;text&#39; class=&#39;n_textInp&#39; valid=&#39;{must:false, fieldType:&amp;amp;#39;isPositiveInteger&amp;amp;#39;, tip:&amp;amp;#39;整数输入框&amp;amp;#39;}&#39;/&amp;gt;&amp;quot;);
	template = template.replace(/[\{][x]([1-9]\d*)[\}]/g,&amp;quot;&amp;lt;input onchange=&#39;caclClick();&#39; id=&#39;srkVal$1&#39; type=&#39;text&#39; class=&#39;n_textInp&#39; valid=&#39;{must:false, fieldType:&amp;amp;#39;isSmallInteger&amp;amp;#39;, tip:&amp;amp;#39;小数输入框&amp;amp;#39;}&#39;/&amp;gt;&amp;quot;);
	
	template = template.replace(/[\{][d][i][v][1-9]\d*[\=]([1-9]\d*)[\/]([1-9]\d*)[\/]([1-9]\d*)[\}]/g,
			&amp;quot;&amp;lt;input type=&#39;text&#39; class=&#39;n_textInp njsk&#39; onclick=&#39;caclChuFaValToJSK(this,&amp;amp;#39;$1&amp;amp;#39;,&amp;amp;#39;$2&amp;amp;#39;,&amp;amp;#39;$3&amp;amp;#39;)&#39; readonly/&amp;gt;&amp;quot;);
	
	template = template.replace(/[\{][s][u][b][t][1-9]\d*[\=]([1-9])\d*[\/]([1-9])\d*[\/]([d|h|m])[\}]/g,
			&amp;quot;&amp;lt;input type=&#39;text&#39; class=&#39;n_textInp sjsk&#39; onclick=&#39;caclTimeValToJSK(this,&amp;amp;#39;$1&amp;amp;#39;,&amp;amp;#39;$2&amp;amp;#39;,&amp;amp;#39;$3&amp;amp;#39;)&#39; readonly/&amp;gt;&amp;quot;);
	
	template = template.replace(/[\{][d]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:100px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY-MM-DD&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	template = template.replace(/[\{][d][t]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:160px;&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY-MM-DD hh:mm:ss&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	template = template.replace(/[\{][d][t][\-][s]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:140px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY-MM-DD hh:mm&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	template = template.replace(/[\{][d][t][\-][m][\-][s]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:140px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY-MM-DD hh:00&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	
	template = template.replace(/[\{][d][\-][c][n]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:130px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY年MM月DD日&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	template = template.replace(/[\{][d][t][\-][c][n]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:220px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY年MM月DD日 hh时mm分ss秒&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	template = template.replace(/[\{][d][t][\-][s][\-][c][n]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:190px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY年MM月DD日 hh时mm分&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	template = template.replace(/[\{][d][t][\-][m][\-][s][\-][c][n]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:160px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY年MM月DD日 hh时&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);

	$(&amp;quot;#tExaDiv&amp;quot;).html(template);
}

function checkDate(){
	caclClick(&#39;date&#39;);
}

function caclClick(type){
	if(type==&#39;num&#39;){
		$(&#39;.njsk&#39;).trigger(&amp;quot;click&amp;quot;);
	}else if(type==&#39;date&#39;){
		$(&#39;.sjsk&#39;).trigger(&amp;quot;click&amp;quot;);
	}
}

//除法计算并将值放入计算框
function caclChuFaValToJSK(obj,n1,n2,weiShu){
	$(obj).val(&amp;quot;&amp;quot;);

	var one =&#39;&#39;;//序号a的值
	var two =&#39;&#39;;//序号b的值
	
	one = $(&#39;#srkVal&#39;+n1).val();
	two = $(&#39;#srkVal&#39;+n2).val();
	
	var finaVal = &#39;&#39;;//计算后的值
	if(one==&amp;quot;&amp;quot;||two==&amp;quot;&amp;quot;){
		$(obj).val(&amp;quot;&amp;quot;);
		return;
	}else{
		finaVal=(parseFloat(one)/parseFloat(two)).toFixed(weiShu);
	}
	$(obj).val(finaVal);
}

//计算并将值放入计算框
function caclTimeValToJSK(obj,d1,d2,oper){
	var eTime =&#39;&#39;;//序号a的值
	var sTime =&#39;&#39;;//序号b的值
	
	eTime = $(&#39;#srkVal&#39;+d1).val();
	sTime = $(&#39;#srkVal&#39;+d2).val();
	
	var finalVal =&#39;&#39;;
	if(eTime==&amp;quot;&amp;quot;||sTime==&amp;quot;&amp;quot;){
		$(obj).val(&amp;quot;&amp;quot;);
		return;
	}else{
		switch (oper) {
		    case (&amp;quot;d&amp;quot;):  //日
		    	finalVal = GetDateDiff(sTime,eTime,&#39;day&#39;)+&#39;天&#39;;
		    	break;
		    case (&amp;quot;h&amp;quot;):  //时
		    	finalVal = GetDateDiff(sTime,eTime,&#39;hour&#39;)+&#39;小时&#39;;
		        break;
		    case (&amp;quot;m&amp;quot;):  //分
		    	finalVal = GetDateDiff(sTime,eTime,&#39;minute&#39;)+&#39;分钟&#39;;
		        break;
		    default: 
		       console.log(&amp;quot;caclTimeValToJSK传入无效操作参数&amp;quot;+oper);
		}
	}
	$(obj).val(finalVal);
}

//获取上个月
function getLastMonth(date){      
    var daysInMonth = new Array([0],[31],[28],[31],[30],[31],[30],[31],[31],[30],[31],[30],[31]);      
    var strYear = date.getFullYear();        
    //var strDay = date.getDate();        
    var strMonth = date.getMonth()+1;      
    if(strYear%4 == 0 &amp;amp;&amp;amp; strYear%100 != 0){      
       daysInMonth[2] = 29;      
    }      
    if(strMonth - 1 == 0)      
    {      
       strYear -= 1;      
       strMonth = 12;      
    }      
    else     
    {      
       strMonth -= 1;      
    }      
    //strDay = daysInMonth[strMonth] &amp;gt;= strDay ? strDay : daysInMonth[strMonth];      
    if(strMonth&amp;lt;10)        
    {        
       strMonth=&amp;quot;0&amp;quot;+strMonth;        
    }      
    /* if(strDay&amp;lt;10)        
    {        
       strDay=&amp;quot;0&amp;quot;+strDay;        
    }  */
    //datastr = strYear+&amp;quot;-&amp;quot;+strMonth+&amp;quot;-&amp;quot;+strDay;      
    datastr = strMonth;      
    return datastr;      
}

//获取昨天
function getYestoday(date){          
   var yesterday_milliseconds=date.getTime()-1000*60*60*24;           
   var yesterday = new Date();           
   yesterday.setTime(yesterday_milliseconds);           
           
  // var strYear = yesterday.getFullYear();        
   var strDay = yesterday.getDate();        
  // var strMonth = yesterday.getMonth()+1;      
  /*  if(strMonth&amp;lt;10) 
   {        
       strMonth=&amp;quot;0&amp;quot;+strMonth;        
   }   */      
   //datastr = strYear+&amp;quot;-&amp;quot;+strMonth+&amp;quot;-&amp;quot;+strDay;      
   datastr = strDay;      
   return datastr;      
}   

//获取时间差
function GetDateDiff(startTime, endTime, diffType) {
    //转换时间格式，如xxxx-xx-xx转换为 xxxx/xx/xx的格式 
    startTime = startTime.replace(/\-/g, &amp;quot;/&amp;quot;).replace(/[\u5e74|\u6708]/g,&amp;quot;/&amp;quot;).replace(/[\u65e5]/g,&amp;quot;&amp;quot;);
    endTime = endTime.replace(/\-/g, &amp;quot;/&amp;quot;).replace(/[\u5e74|\u6708]/g,&amp;quot;/&amp;quot;).replace(/[\u65e5]/g,&amp;quot;&amp;quot;);
    
    if(startTime.endWith(&#39;时&#39;)){
    	startTime = startTime.replace(/[\u65f6]/g,&amp;quot;:00&amp;quot;);
	}else if(startTime.endWith(&#39;分&#39;)){
		startTime = startTime.replace(/[\u65f6]/g,&amp;quot;:&amp;quot;).replace(/[\u5206]/g,&amp;quot;&amp;quot;);
	}else if(startTime.endWith(&#39;秒&#39;)){
		startTime = startTime.replace(/[\u65f6|\u5206]/g,&amp;quot;:&amp;quot;).replace(/[\u79d2]/g,&amp;quot;&amp;quot;);
	}
	
	if(endTime.endWith(&#39;时&#39;)){
		endTime = endTime.replace(/[\u65f6]/g,&amp;quot;:00&amp;quot;);
	}else if(endTime.endWith(&#39;分&#39;)){
		endTime = endTime.replace(/[\u65f6]/g,&amp;quot;:&amp;quot;).replace(/[\u5206]/g,&amp;quot;&amp;quot;);
	}else if(endTime.endWith(&#39;秒&#39;)){
		endTime = endTime.replace(/[\u65f6|\u5206]/g,&amp;quot;:&amp;quot;).replace(/[\u79d2]/g,&amp;quot;&amp;quot;);
	}
    
    //将计算间隔类性字符转换为小写
    diffType = diffType.toLowerCase();
    var sTime =new Date(startTime); //开始时间
    var eTime =new Date(endTime); //结束时间
    //作为除数的数字
    var timeType =1;
    switch (diffType) {
        case&amp;quot;second&amp;quot;:
            timeType =1000;
        break;
        case&amp;quot;minute&amp;quot;:
            timeType =1000*60;
        break;
        case&amp;quot;hour&amp;quot;:
            timeType =1000*3600;
        break;
        case&amp;quot;day&amp;quot;:
            timeType =1000*3600*24;
        break;
        default:
        break;
    }
    return parseInt((eTime.getTime() - sTime.getTime()) / parseInt(timeType));
}

String.prototype.endWith=function(s){
  if(s==null||s==&amp;quot;&amp;quot;||this.length==0||s.length&amp;gt;this.length)
     return false;
  if(this.substring(this.length-s.length)==s)
     return true;
  else
     return false;
  return true;
 }

 String.prototype.startWith=function(s){
  if(s==null||s==&amp;quot;&amp;quot;||this.length==0||s.length&amp;gt;this.length)
   return false;
  if(this.substr(0,s.length)==s)
     return true;
  else
     return false;
  return true;
 }
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>正则贪婪模式与懒惰模式(扩展元字符)</title>
      <link>https://ianeiu.github.io/2018/09/04/%E6%AD%A3%E5%88%99%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%87%92%E6%83%B0%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95%E5%85%83%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/04/%E6%AD%A3%E5%88%99%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%87%92%E6%83%B0%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95%E5%85%83%E5%AD%97%E7%AC%A6/</guid>
      
        <description>

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;之前做过一个短信模版的配置功能，需要用到大量的正则判断，其中有一个方法涉及到正则贪婪模式与懒惰模式，今天刚好抽时间整理下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
/**
 * 创建文本预览（取出input值替换input）
 */
function createContentPreview(){
	var vals=[];
	$(&amp;quot;#tExaDiv&amp;quot;).find(&amp;quot;input&amp;quot;).each(function(){
		var val=$(this).val();
		vals.push(val);
	})
	
	var html=$(&amp;quot;#tExaDiv&amp;quot;).html();
	var reg=/[/&amp;lt;][i][n][p][u][t][^]*?[&amp;gt;]/;
	for(var i=0;i&amp;lt;vals.length;i++){
		html=html.replace(reg,vals[i]);
	}
	$(&amp;quot;#contentPreview&amp;quot;).html(html);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;懒惰模式&#34;&gt;懒惰模式&lt;/h2&gt;

&lt;p&gt;像上面代码的匹配就是正则表达式的懒惰模式，对字符串进行最小长度匹配。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;栗子&lt;/kbd&gt;&lt;br /&gt;
字符串：&lt;code&gt;&amp;lt;span&amp;gt;321&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;12&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;br /&gt;
正则表达式：&lt;code&gt;&amp;lt;span&amp;gt;.*?&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;br /&gt;
匹配结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;共找到 2 处匹配：  
	&amp;lt;span&amp;gt;321&amp;lt;/span&amp;gt; 
	&amp;lt;span&amp;gt;12&amp;lt;/span&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;贪婪模式&#34;&gt;贪婪模式&lt;/h2&gt;

&lt;p&gt;贪婪模式则是对字符串进行最大长度匹配。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;栗子&lt;/kbd&gt;&lt;br /&gt;
字符串：&lt;code&gt;&amp;lt;span&amp;gt;321&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;12&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;br /&gt;
正则表达式：&lt;code&gt;&amp;lt;span&amp;gt;.*&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;br /&gt;
匹配结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;共找到 1 处匹配：
&amp;lt;span&amp;gt;321&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;12&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;总结&#34;&gt;总结&lt;/h4&gt;

&lt;p&gt;正则表达式，表示字符串重复个数元字符，&amp;rsquo;?,+,*,{}&amp;rsquo; 默认都会选择贪婪模式，会最大长度匹配字符串，而要切换到懒惰模式，就只是在该元字符，后面加多一个”?” 即可。&lt;/p&gt;

&lt;h2 id=&#34;元字符&#34;&gt;元字符&lt;/h2&gt;

&lt;p&gt;常见元字符及其含义&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;符号               含义
————————————————————————————————————————————————————
.                  匹配除换行符之外的任意字符
^                  匹配字符的开始位置
$                  匹配字符的结束位置
*                  匹配0次，1次或多次前面的原子
?                  匹配0次或1次前面的原子
+                  匹配1次或多次前面的原子
{n}                前面的原子恰好出现n次
{n,}               前面的原子至少出现n次
{n,m}              前面的原子至少出现n次，至多出现m次
|                  模式选择符
()                 模式单元符   
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
  </channel>
</rss>