<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IanEiU</title>
    <link>https://ianeiu.github.io/</link>
    <description>Recent content on IanEiU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>WuWeiMian</copyright>
    <lastBuildDate>Wed, 05 Sep 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ianeiu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[置顶]js、jq——DEMO集</title>
      <link>https://ianeiu.github.io/2018/09/05/%E7%BD%AE%E9%A1%B6jsjqdemo%E9%9B%86/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/05/%E7%BD%AE%E9%A1%B6jsjqdemo%E9%9B%86/</guid>
      
        <description>

&lt;h3 id=&#34;操作元素的样式&#34;&gt;操作元素的样式&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#msg&amp;quot;).css(&amp;quot;background&amp;quot;); //返回元素的背景颜色
$(&amp;quot;#msg&amp;quot;).css(&amp;quot;background&amp;quot;,&amp;quot;#ccc&amp;quot;) //设定元素背景为灰色
$(&amp;quot;#msg&amp;quot;).height(300); $(&amp;quot;#msg&amp;quot;).width(&amp;quot;200&amp;quot;); //设定宽高
$(&amp;quot;#msg&amp;quot;).css({ color: &amp;quot;red&amp;quot;, background: &amp;quot;blue&amp;quot; });//以名值对的形式设定样式

$(&amp;quot;p&amp;quot;).attr(&amp;quot;class&amp;quot;, &amp;quot;ddiiyy&amp;quot;); //设置p元素的class为 &amp;quot;ddiiyy&amp;quot; 
$(&amp;quot;#nm_p&amp;quot;).addClass(&amp;quot;another&amp;quot;); // 追加样式 
$(&amp;quot;p&amp;quot;).removeClass(&amp;quot;ddiiyy another&amp;quot;); //溢出样式
$(&amp;quot;p&amp;quot;).toggleClass(&amp;quot;ddiiyy&amp;quot;); //如果存在（不存在）就删除（添加）名为ddiiyy的class
$(&amp;quot;p&amp;quot;).hasClass(&amp;quot;another&amp;quot;); //是否含有某个class。是返true，否返false
$(&amp;quot;p&amp;quot;).is(&amp;quot;.another&amp;quot;); //is(&amp;quot;.&amp;quot;+class);//JQuery实现，增强代码可读性
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;readonly和disabled&#34;&gt;readonly和disabled&lt;/h3&gt;

&lt;p&gt;表单中readOnly和disabled的区别：&lt;br /&gt;
readonly只针对input(text/ password)和textarea有效，而disabled对于所有的表单元素都有效，包括select,radio, checkbox, button等。&lt;br /&gt;
但是表单元素在使用了disabled后，当我们将表单以POST或GET的方式提交的话，这个元素的值不会被传递出去，而readonly会将该值传递出去（这种情况出现在我们将某个表单中的textarea元素设置为disabled或readonly，但是submit或button却是可以使用的）。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;隐藏和显示-操作display属性&#34;&gt;隐藏和显示(操作display属性)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#id&amp;quot;).show();//表示display:block, 
$(&amp;quot;#id&amp;quot;).hide();//表示display:none; 
$(&amp;quot;#id&amp;quot;).toggle();//切换元素的可见状态。如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的。
$(&amp;quot;#id&amp;quot;).css(&#39;display&#39;,&#39;none&#39;); 
$(&amp;quot;#id&amp;quot;).css(&#39;display&#39;,&#39;block&#39;); 
或 
$(&amp;quot;#id&amp;quot;)[0].style.display = &#39;none&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;操作disabled属性&#34;&gt;操作disabled属性&lt;/h3&gt;

&lt;p&gt;js操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function disableElement(element,val){
    document.getElementById(element).disabled=val;d
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jQuery进行操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//两种方法设置disabled属性
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,true);
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,&amp;quot;disabled&amp;quot;);
//三种方法移除disabled属性
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,false);
$(&#39;#areaSelect&#39;).removeAttr(&amp;quot;disabled&amp;quot;);
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,&amp;quot;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取s:textfield，并设置其disabled属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;functiondisableTextfieldofAccountDiv(element,val) {
    $(element).find(&amp;quot;:textfield&amp;quot;).attr(&#39;disabled&#39;,val);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;禁用a-button点击&#34;&gt;禁用a，button点击&lt;/h3&gt;

&lt;p&gt;1.jquery禁用a标签方法1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document).ready(function () {
    $(&amp;quot;a&amp;quot;).each(function () {
        var textValue = $(this).html();
        if (textValue == &amp;quot;XX概况&amp;quot; || textValue == &amp;quot;服务导航&amp;quot;) {
            $(this).css(&amp;quot;cursor&amp;quot;, &amp;quot;default&amp;quot;);
            $(this).attr(&#39;href&#39;, &#39;#&#39;);     //修改&amp;lt;a&amp;gt;的 href属性值为 #  这样状态栏不会显示链接地址 
            $(this).click(function (event) {
                event.preventDefault();   // 如果&amp;lt;a&amp;gt;定义了 target=&amp;quot;_blank“ 需要这句来阻止打开新页面
            });
        }
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.jquery禁用a标签方法2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;a.tooltip&#39;).live(&#39;click&#39;, function(event) {
  alert(&amp;quot;抱歉,已停用！&amp;quot;); 
  event.preventDefault();  
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.jquery禁用a标签方法3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function(){
    $(&#39;.disableCss&#39;).removeAttr(&#39;href&#39;);//去掉a标签中的href属性
    $(&#39;.disableCss&#39;).removeAttr(&#39;onclick&#39;);//去掉a标签中的onclick事件
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.jquery控制按钮的禁用与启用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;#button&#39;).attr(&#39;disabled&#39;,&amp;quot;true&amp;quot;);//添加disabled属性
$(&#39;#button&#39;).removeAttr(&amp;quot;disabled&amp;quot;); //移除disabled属性
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;操作checked属性-回显&#34;&gt;操作checked属性\回显&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input id=&amp;quot;cb1&amp;quot; type=&amp;quot;checkbox&amp;quot; checked /&amp;gt;
&amp;lt;input id=&amp;quot;cb2&amp;quot; type=&amp;quot;checkbox&amp;quot; checked=&amp;quot;checked&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.jquery判断checked的三种方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.attr(&#39;checked&#39;)   //看版本1.6+返回:&amp;quot;checked&amp;quot;或&amp;quot;undefined&amp;quot; ;1.5-返回:true或false
.prop(&#39;checked&#39;) //16+:true/false
.is(&#39;:checked&#39;)    //所有版本:true/false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.jquery赋值checked的几种写法:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//所有的jquery版本都可以这样赋值
$(&amp;quot;#cb1&amp;quot;).attr(&amp;quot;checked&amp;quot;,&amp;quot;checked&amp;quot;);
$(&amp;quot;#cb1&amp;quot;).attr(&amp;quot;checked&amp;quot;,true);

//jquery1.6+:prop的4种赋值
$(&amp;quot;#cb1&amp;quot;).prop(&amp;quot;checked&amp;quot;,true);    //很简单就不说了哦
$(&amp;quot;#cb1&amp;quot;).prop({checked:true});    //map键值对
$(&amp;quot;#cb1&amp;quot;).prop(&amp;quot;checked&amp;quot;,function(){  return true;   }); //函数返回true或false
$(&amp;quot;#cb1&amp;quot;).prop(&amp;quot;checked&amp;quot;,&amp;quot;checked&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.check回显的一个demo：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(list){
    if(type==1){
        var checkBoxAll = $(&amp;quot;input[name=&#39;outsideFileName&#39;]&amp;quot;);
        for(var i=0;i&amp;lt;list.length;i++){
            $.each(checkBoxAll,function(j,checkbox){
                //获取复选框的value属性
                var checkValue=$(checkbox).val();
                if(list[i].filePath==checkValue){
                    $(checkbox).attr(&amp;quot;checked&amp;quot;,true);
                }
            })
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;checkbox-全选反选&#34;&gt;checkbox（全选反选..）&lt;/h3&gt;

&lt;p&gt;demo：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;注：jquery1.9.0+无法正常显示
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot; &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt; 
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&amp;gt; 
&amp;lt;head&amp;gt; 
&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt; 
&amp;lt;title&amp;gt;jQuery 对checkbox的操作&amp;lt;/title&amp;gt; 
&amp;lt;/HEAD&amp;gt; 
&amp;lt;body style=&amp;quot;text-align:center;margin: 0 auto;font-size: 12px;&amp;quot; mce_style=&amp;quot;text-align:center;margin: 0 auto;font-size: 12px;&amp;quot;&amp;gt; 
&amp;lt;div style=&amp;quot;border: 1px solid #999; width: 500px; padding: 15px; background: #eee; margin-top: 150px;&amp;quot;&amp;gt; 
&amp;lt;form name=&amp;quot;form1&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn1&amp;quot; value=&amp;quot;全选&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn2&amp;quot; value=&amp;quot;取消全选&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn3&amp;quot; value=&amp;quot;选中所有奇数&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn4&amp;quot; value=&amp;quot;反选&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn5&amp;quot; value=&amp;quot;获得选中的所有值&amp;quot;&amp;gt; 
&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox1&amp;quot;&amp;gt; 
checkbox1 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox2&amp;quot;&amp;gt; 
checkbox2 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox3&amp;quot;&amp;gt; 
checkbox3 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox4&amp;quot;&amp;gt; 
checkbox4 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox5&amp;quot;&amp;gt; 
checkbox5 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox6&amp;quot;&amp;gt; 
checkbox6 
&amp;lt;/form&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;/body&amp;gt; 
&amp;lt;/HTML&amp;gt; 

&amp;lt;script  type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;http://libs.baidu.com/jquery/1.8.0/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; 
&amp;lt;!-- 
$(&amp;quot;document&amp;quot;).ready(function(){ 
$(&amp;quot;#btn1&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]&amp;quot;).attr(&amp;quot;checked&amp;quot;,&#39;true&#39;);//全选 
}) 
$(&amp;quot;#btn2&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]&amp;quot;).removeAttr(&amp;quot;checked&amp;quot;);//取消全选 
}) 
$(&amp;quot;#btn3&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]:even&amp;quot;).attr(&amp;quot;checked&amp;quot;,&#39;true&#39;);//选中所有奇数 
}) 
$(&amp;quot;#btn4&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]&amp;quot;).each(function(){//反选 
if($(this).attr(&amp;quot;checked&amp;quot;)){ 
$(this).removeAttr(&amp;quot;checked&amp;quot;); 
} 
else{ 
$(this).attr(&amp;quot;checked&amp;quot;,&#39;true&#39;); 
} 
}) 
}) 
$(&amp;quot;#btn5&amp;quot;).click(function(){//输出选中的值 
var str=&amp;quot;&amp;quot;; 
$(&amp;quot;[name=&#39;checkbox&#39;][checked]&amp;quot;).each(function(){ 
str+=$(this).val()+&amp;quot;/r/n&amp;quot;; 
//alert($(this).val()); 
}) 
alert(str); 
}) 
}) 
--&amp;gt; 
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.获取checkbox选中的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var chk_value =[]; 
$(&#39;input[name=&amp;quot;test&amp;quot;]:checked&#39;).each(function(){ 
    chk_value.push($(this).val()); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.点击全选 非全选&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input[name=&amp;quot;pCheckBox&amp;quot;]&#39;).click(function(){  
    //alert(this.checked);  
    if($(this).is(&#39;:checked&#39;)){  
        $(&#39;input[name=&amp;quot;eventIds&amp;quot;]&#39;).each(function(){  
            //此处如果用attr，会出现第三次失效的情况  
            $(this).prop(&amp;quot;checked&amp;quot;,true);  
        });  
    }else{  
         $(&#39;input[name=&amp;quot;eventIds&amp;quot;]&#39;).each(function(){  
            $(this).removeAttr(&amp;quot;checked&amp;quot;,false);  
        });  
        //$(this).removeAttr(&amp;quot;checked&amp;quot;);  
    }  
});  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;radio&#34;&gt;radio&lt;/h3&gt;

&lt;p&gt;1.获取选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio :checked&#39;).val()；
$(&amp;quot;input[type=&#39;radio&#39;]:checked&amp;quot;).val();
$(&amp;quot;input[name=&#39;rd&#39;]:checked&amp;quot;).val();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.设置第一个Radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio :first&#39;).attr(&#39;checked&#39;, &#39;checked&#39;);
$(&#39;input:radio :first&#39;).attr(&#39;checked&#39;, &#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.设置最后一个Radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio :last&#39;).attr(&#39;checked&#39;, &#39;checked&#39;);
$(&#39;input:radio :last&#39;).attr(&#39;checked&#39;, &#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.根据索引值设置任意一个radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio&#39;).eq(索引值).attr(&#39;checked&#39;, &#39;true&#39;);//索引值=0,1,2....
$(&#39;input:radio&#39;).slice(1,2).attr(&#39;checked&#39;, &#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.根据Value值设置Radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;input:radio[value=&#39;rd2&#39;]&amp;quot;).attr(&#39;checked&#39;,&#39;true&#39;);
$(&amp;quot;input[value=&#39;rd2&#39;]&amp;quot;).attr(&#39;checked&#39;,&#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;select&#34;&gt;select&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;select id=&amp;quot;s&amp;quot;&amp;gt;
    &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;嘻嘻&amp;lt;/option&amp;gt;
    &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;呵呵&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.获取select中option被选中的文本值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;误：$(&amp;quot;#s&amp;quot;).text();  //获取所有option的文本值
$(&amp;quot;#s option:selected&amp;quot;).text();  //获取选中的option的文本值
$(&amp;quot;#s&amp;quot;).find(&amp;quot;option:selected&amp;quot;).text(); //获取选中的option的文本值
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.获取select中option被选中的value值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#s&amp;quot;).val();
$(&amp;quot;#s option:selected&amp;quot;).val();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.js获取select选中的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sel=document.getElementById(&amp;quot;s&amp;quot;); 
var index = sel.selectedIndex; // 选中索引
albumid= sel.options[index].value;//要的值
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;textarea&#34;&gt;textarea&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;textarea name=&amp;quot;content&amp;quot; id=&amp;quot;content&amp;quot; rows=&amp;quot;8&amp;quot; cols=&amp;quot;5&amp;quot;&amp;gt;这是textarea内容&amp;lt;/textarea&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.获取textarea文本值（用name和id）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;textarea[name=&#39;content&#39;]&amp;quot;).val()      $(&amp;quot;#content&amp;quot;).val()    
$(&amp;quot;textarea[name=&#39;content&#39;]&amp;quot;).text()      $(&amp;quot;#content&amp;quot;).text()    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.赋值textarea文本值（只能用id）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#content&amp;quot;).val(&amp;quot;这是要写入的textarea文本内容&amp;quot;)
$(&amp;quot;#content&amp;quot;).text(&amp;quot;这是要写入的textarea文本内容&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;val和text的区别是：val()可以体现换行符，而text()不能。&lt;/p&gt;

&lt;p&gt;3.禁止文本域textarea可拖拽的方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;textarea{ resize:none;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.让textarea没有黄框且不能拖拽：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;textarea{outline:none;resize:none;}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;confirm-二次确认&#34;&gt;confirm，二次确认&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if(confirm(&amp;quot;确定要删除该记录吗？&amp;quot;)){
    doSomething();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;重置表单reset&#34;&gt;重置表单reset&lt;/h3&gt;

&lt;p&gt;使用jquery方法重置form表单&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;误：$(&#39;#formName&#39;).reset();//得到的是数组。
正：$(&#39;#formName&#39;)[0].reset();//得到的是jQuery对象。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：这种方式虽然可以重置表单，但是不能重置隐藏字段。隐藏字段要单独处理。&lt;br /&gt;
小知识：$(&amp;lsquo;#formName&amp;rsquo;).get(0)得到的是DOM对象。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jquery-获取元素个数&#34;&gt;jquery 获取元素个数&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;#div1&#39;).children().length;
$(&#39;#div1&#39;).children(&#39;span&#39;).length;//获取id=div1下的span元素个数
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;定位&#34;&gt;定位&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id =&#39;&#39;localid&amp;quot;&amp;gt; xixi&amp;lt;/div&amp;gt;
window.location.href=&#39;#localid&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;修改标题title&#34;&gt;修改标题title&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;document.title=&amp;quot;批量业务单&amp;quot;; 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq的事件处理功能&#34;&gt;JQ的事件处理功能&lt;/h3&gt;

&lt;p&gt;1.hover&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//当鼠标放在表格的某行上时将class置为over，离开时置为out。
$(&amp;quot;tr&amp;quot;).hover(
function(){
     $(this).addClass(&amp;quot;over&amp;quot;);
}, 
function(){ 
    $(this).addClass(&amp;quot;out&amp;quot;); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;demo鼠标移入出现悬浮框&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;td class=&#39;linkTd&#39;&amp;gt;
    &amp;lt;div style=&#39;position:relative;&#39;&amp;gt;
        @link&amp;lt;span class=&#39;linkHover&#39;&amp;gt;@detailLink&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/td&amp;gt;

.linkHover{         
    position: absolute;  
    top: 20px;  
    width: 320px;
    max-height: 250px;           /* 设置最大高度，当高度达到此值时出现滚动条 */  
    z-index: 10;  
    background-color: #E0E5E5;   
    overflow: auto;              /* 自动添加滚动条 */  
    box-shadow:0px 0px 10px #000;   /* 外阴影 */  
    display:none;
}

$(&#39;.linkTd&#39;).hover(  
    function(){   
        $(this).find(&#39;.linkHover&#39;).show();
    } ,  
    function(){  
        $(this).find(&#39;.linkHover&#39;).hide();
    }   
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.ready&lt;br /&gt;
在文档加载后激活函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document).ready(function(){
  $(&amp;quot;.btn1&amp;quot;).click(function(){
    $(&amp;quot;p&amp;quot;).slideToggle();
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;语法 1  &lt;code&gt;$(document).ready(function)&lt;/code&gt;&lt;br /&gt;
语法 2  &lt;code&gt;$().ready(function)&lt;/code&gt;&lt;br /&gt;
语法 3  &lt;code&gt;$(function)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3.toggle&lt;br /&gt;
toggle()和slidetoggle()方法提供了状态切换功能。&lt;br /&gt;
toggle()方法包括了hide()和show()方法。 slideToggle()方法包括了slideDown()和slideUp()方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//每次点击时轮换添加和删除名为selected的class。
$(&amp;quot;p&amp;quot;).toggle(function(){ 
     $(this).addClass(&amp;quot;selected&amp;quot;); 
},function(){ 
     $(this).removeClass(&amp;quot;selected&amp;quot;); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.trigger&lt;br /&gt;
    在每一个匹配的元素上触发某类事件,如模拟点击，回车登录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//模拟点击
$(&amp;quot;#b&amp;quot;).click(function(){$(&amp;quot;#a&amp;quot;).trigger(&amp;quot;click&amp;quot;)})
$(&amp;quot;#a&amp;quot;).trigger(&amp;quot;click&amp;quot;);//执行#a的click事件

//回车点击
$(document).keyup(function(event){
  if(event.keyCode ==13){
    $(&amp;quot;#btn_login&amp;quot;).trigger(&amp;quot;click&amp;quot;);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;推荐：keyup，防止笔记本键盘不小心触摸到了
有些文档中有写成这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(window).keydown（function(){
...
}）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;XP系统IE6下是不成功的。&lt;/p&gt;

&lt;p&gt;5.bind(eventtype,fn)，unbind(eventtype)&lt;br /&gt;
事件的绑定与反绑定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;p&amp;quot;).bind(&amp;quot;click&amp;quot;, function(){alert($(this).text());}); //为每个p元素添加单击事件 
$(&amp;quot;p&amp;quot;).unbind(); //删除所有p元素上的所有事件 
$(&amp;quot;p&amp;quot;).unbind(&amp;quot;click&amp;quot;) //删除所有p元素上的单击事件
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq集合遍历&#34;&gt;JQ集合遍历&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;//为索引分别为0，1，2的p元素分别设定不同的字体颜色。
$(&amp;quot;p&amp;quot;).each(function(i){this.style.color=[&#39;#f00&#39;,&#39;#0f0&#39;,&#39;#00f&#39;][i]})
//实现表格的隔行换色效果
$(&amp;quot;tr&amp;quot;).each(function(i){this.style.backgroundColor=[&#39;#ccc&#39;,&#39;#fff&#39;][i%2]})
//为每个p元素增加了click事件，单击某个p元素则弹出其内容
$(&amp;quot;p&amp;quot;).click(function(){alert($(this).html())})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;demo遍历table的tr获取td的值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tbody id=&amp;quot;history_income_list&amp;quot;&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;&amp;quot; onclick=&amp;quot;history_income_del(this);&amp;quot; href=&amp;quot;###&amp;quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;&amp;quot; href=&amp;quot;###&amp;quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;&amp;quot; href=&amp;quot;###&amp;quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for循环遍历&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var trList = $(&amp;quot;#history_income_list&amp;quot;).children(&amp;quot;tr&amp;quot;)
for (var i=0;i&amp;lt;trList.length;i++) {
    var tdArr = trList.eq(i).find(&amp;quot;td&amp;quot;);
    var history_income_type = tdArr.eq(0).find(&amp;quot;input&amp;quot;).val();//收入类别
    var history_income_money = tdArr.eq(1).find(&amp;quot;input&amp;quot;).val();//收入金额
    var history_income_remark = tdArr.eq(2).find(&amp;quot;input&amp;quot;).val();//  备注
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JQ遍历&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#history_income_list&amp;quot;).find(&amp;quot;tr&amp;quot;).each(function(){
    var tdArr = $(this).children();
    var history_income_type = tdArr.eq(0).find(&amp;quot;input&amp;quot;).val();//收入类别
    var history_income_money = tdArr.eq(1).find(&amp;quot;input&amp;quot;).val();//收入金额
    var history_income_remark = tdArr.eq(2).find(&amp;quot;input&amp;quot;).val();//  备注
    ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jquery&#34;&gt;jquery $.&lt;/h3&gt;

&lt;h4 id=&#34;extend&#34;&gt;$.extend&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//为jquery扩展了min,max两个方法
$.extend({ 
    min: function(a, b){return a &amp;lt; b?a:b; },
    max: function(a, b){return a &amp;gt; b?a:b; }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用扩展的方法（通过“$.方法名”调用）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alert(&amp;quot;a=10,b=20,max=&amp;quot;+$.max(10,20)+&amp;quot;,min=&amp;quot;+$.min(10,20));
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;each&#34;&gt;$.each&lt;/h4&gt;

&lt;p&gt;$.each(obj, fn)：通用的迭代函数。可用于代替循环。 如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.each( [0,1,2], function(i, n){ alert( &amp;quot;Item #&amp;quot; + i + &amp;quot;: &amp;quot; + n ); });
//等价 
var tempArr=[0,1,2]; 
for(var i=0;i&amp;lt;tempArr.length;i++){ alert(&amp;quot;Item #&amp;quot;+i+&amp;quot;: &amp;quot;+tempArr[i]); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以处理json数据，如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.each( { name: &amp;quot;John&amp;quot;, lang: &amp;quot;JS&amp;quot; }, function(i, n){ alert( &amp;quot;Name: &amp;quot; + i + &amp;quot;, Value: &amp;quot; + n ); });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;map&#34;&gt;$.map&lt;/h4&gt;

&lt;p&gt;$.map(array, fn)：数组映射。把一个数组中的项目(处理转换后)保存到到另一个新数组中，并返回生成的新数组。 如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var tempArr=$.map( [0,1,2], function(i){ return i + 4; });//[4,5,6] 
var tempArr=$.map( [0,1,2], function(i){ return i &amp;gt; 0 ? i + 1 : null; });//[2,3] 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;merge&#34;&gt;$.merge&lt;/h4&gt;

&lt;p&gt;$.merge(arr1,arr2):合并两个数组并删除其中重复的项目。 如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.merge( [0,1,2], [2,3,4] ) //返回[0,1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;trim&#34;&gt;$.trim&lt;/h4&gt;

&lt;p&gt;$.trim(str)：删除字符串两端的空白字符。 如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.trim(&amp;quot; hello, how are you? &amp;quot;); //返回&amp;quot;hello,how are you? &amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-获取数组长度&#34;&gt;JS 获取数组长度&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var myarray = [1,2,3];
myarray.length // 初始的长度是3
myarray.length = 2; // 删除最后一个元素
myarray.length = 20 // 添加18个元素到数组中
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-判断-undefined&#34;&gt;JS 判断 undefined&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if(typeof(value)==&amp;quot;undefined&amp;quot;){ 
    alert(&amp;quot;undefined&amp;quot;); 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-join将数组转字符串&#34;&gt;JS  join将数组转字符串&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;zs&amp;quot;/&amp;gt;张三
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;ls&amp;quot;/&amp;gt;李四
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;we&amp;quot;/&amp;gt;王二
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;sw&amp;quot;/&amp;gt;三五
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;sl&amp;quot;/&amp;gt;四六

var chk_value =[]; 
$(&#39;input[name=&amp;quot;nextDeal&amp;quot;]:checked&#39;).each(function(){ 
    chk_value.push($(this).val()); 
});
var userNames = chk_value.join(&amp;quot;,&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-遮罩功能&#34;&gt;JS 遮罩功能&lt;/h3&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!--弹窗背景--&amp;gt;
&amp;lt;div class=&amp;quot;flexBg&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;!--loading--&amp;gt;
&amp;lt;div class=&amp;quot;loading&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;
    &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;p&amp;gt;加载中...&amp;lt;/p&amp;gt;
    &amp;lt;%-- &amp;lt;img src=&amp;quot;${baseURL }/themes/zsyx/images/loading.gif&amp;quot;&amp;gt;&amp;lt;/img&amp;gt; --%&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.flexBg {
    background: url(../images/flexBg.png);
    position: fixed;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    z-index: 999;
}
.loading {
    width: 100px;
    height: 100px;
    position: absolute;
    top: 50%;
    left: 50%;
    margin: -50px 0 0 -50px;
    z-index: 999;
    background: #fff;
    padding: 15px;
    border-radius: 5px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function sZZ(){
    $(&#39;.flexBg&#39;).show();
    $(&#39;.loading&#39;).show();
}
function hZZ(){
    $(&#39;.flexBg&#39;).hide();
    $(&#39;.loading&#39;).hide();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IMG&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ianeiu.github.io/resouce/收藏册JSJQ/flexBg.png&#34;  alt=&#34;BG&#34; /&gt;
&lt;img src=&#34;https://ianeiu.github.io/resouce/收藏册JSJQ/loading.gif&#34;  alt=&#34;LOAD&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js中的encodeuri-decodeuri-decodeuricomponent-解决传值中文乱码&#34;&gt;js中的encodeURI、decodeURI、decodeURIComponent,解决传值中文乱码&lt;/h3&gt;

&lt;p&gt;一、基本概念&lt;br /&gt;
encodeURI和decodeURI是成对来使用的，因为浏览器的地址栏有中文字符的话，可以会出现不可预期的错误，所以可以encodeURI把非英文字符转化为英文编码，decodeURI可以用来把字符还原回来。&lt;br /&gt;
encodeURI方法不会对下列字符进行编码：&amp;rdquo;:&amp;ldquo;、&amp;rdquo;/&amp;ldquo;、&amp;rdquo;;&amp;rdquo; 和 &amp;ldquo;?&amp;ldquo;，encodeURIComponent方法可以对这些字符进行编码。&lt;/p&gt;

&lt;p&gt;decodeURI()方法相当于java.net.URLDecoder.decode(URIString, &amp;ldquo;UTF-8&amp;rdquo;);&lt;br /&gt;
encodeURI()方法相当于java.net.URLEncoder.encode(URIString, &amp;ldquo;UTF-8&amp;rdquo;);&lt;br /&gt;
二、例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.location.href = encodeURI(encodeURI(jumpURL));
//http://127.0.0.1:8081/zsyx/jsp/component/demandwork/functiontest/functiontest.jsp?id=NEW20183123134021852&amp;amp;slink=%25E9%259C%2580%25E6%25B1%2582%25E5%25A4%2584%25E7%2590%2586

var slink = decodeURI(decodeURI(&#39;${param.slink}&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js判断文件是否存在&#34;&gt;JS判断文件是否存在&lt;/h3&gt;

&lt;p&gt;方法1：判断图片是否存在&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isHasImg(pathImg){  
    var ImgObj=new Image();  
    ImgObj.src= pathImg;  
    if(ImgObj.fileSize &amp;gt; 0 || (ImgObj.width &amp;gt; 0 &amp;amp;&amp;amp; ImgObj.height &amp;gt; 0))  
    {  
    return true;  
    } else {  
    return false;  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法2：AJAX验证图片或文件链接是否存在&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function validateImage(url) {      
var xmlHttp ;  
if (window.ActiveXObject)  
{  
xmlHttp = new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);  
}  
else if (window.XMLHttpRequest)  
{  
xmlHttp = new XMLHttpRequest();  
}   
xmlHttp.open(&amp;quot;Get&amp;quot;,url,false);  
xmlHttp.send();  
if(xmlHttp.status==404)  
return false;  
else  
return true;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法3：用onerror替换不存在的图片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;images/img1.jpg&amp;quot; height=&amp;quot;300&amp;quot; width=&amp;quot;800&amp;quot; onerror=&amp;quot;images/defaultImg.jpg&amp;quot;&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;解决自定义方法或其他类库与jquery的冲突&#34;&gt;解决自定义方法或其他类库与jQuery的冲突&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;//使用jquery中的jQuery.noConflict();方法即可把变量$的控制权让渡给第一个实现它的那个库或之前自定义的$方法。之后应用Jquery的时候只要将所有的$换成jQuery即可
jQuery.noConflict(); 
// 开始使用jQuery 
jQuery(&amp;quot;div p&amp;quot;).hide(); 
// 使用其他库的 $() 
$(&amp;quot;content&amp;quot;).style.display = &#39;none&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;获取iframe中文档内容&#34;&gt;获取iframe中文档内容&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;function getIframeContent(){  //获取iframe中文档内容
    var doc;
    if (document.all){ // IE 
        doc = document.frames[&amp;quot;ueditor_0&amp;quot;].document; 
    }else{ // 标准
        doc = document.getElementById(&amp;quot;ueditor_0&amp;quot;).contentDocument; 
    }
    return doc.body.innerHTML;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;子窗体调父窗体方法&#34;&gt;子窗体调父窗体方法&lt;/h3&gt;

&lt;p&gt;父窗体&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function selectProduct(commitBrand){    window.open(&amp;quot;${baseURL}/jsp/component/selectlist/SelectProductList.jsp?ecs=ecs&amp;amp;productName=productName&amp;amp;brandId=brandId&amp;amp;brandName=brandName&amp;amp;specification=specification&amp;quot;,&amp;quot;选择产品&amp;quot;,
        &amp;quot;width=1366,height=768,top=0,left=0,scrollbars=YES,resizable=yes&amp;quot;);
}
function setProductValue(ecs,productName,brandId,brandNameDesc,guige,guigeDesc,color,colorDesc,productXinghao,productXinghaoDesc,haveImei,fundCost){
        $(&amp;quot;#ecs&amp;quot;).attr(&amp;quot;value&amp;quot;,ecs);
        $(&amp;quot;#productName&amp;quot;).attr(&amp;quot;value&amp;quot;,productName);
        $(&amp;quot;#brandId&amp;quot;).attr(&amp;quot;value&amp;quot;,brandId);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;子窗体 SelectProductList.jsp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.opener.setProductValue(content.ecs,content.productName,content.zhongduanPinpai,content.zhongduanPinpaiDesc,content.guige,content.guigeDesc,content.color,content.colorDesc,content.productXinghao,content.productXinghaoDesc,content.haveImei,content.fundCost);
window.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq-ajax请求demo&#34;&gt;JQ AJAX请求demo&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(function() {
    $(&#39;#send&#39;).click(function() {
        $.ajax({
            type: &amp;quot;GET&amp;quot;, //GET或POST,
            async:true, //默认设置为true，所有请求均为异步请求。
            url: &amp;quot;http://www.idaima.com/xxxxx.php&amp;quot;,
            data: {
                username: $(&amp;quot;#username&amp;quot;).val(),
                content: $(&amp;quot;#content&amp;quot;).val()
            },
            dataType: &amp;quot;json&amp;quot;, //xml、html、script、jsonp、text
            beforeSend:function(){},
            complete:function(){},
            success: function(data) {
                alert(data)
            },
            error:function(){},
        });
    });
});


$.get(baseURL+&#39;/childorderdeal/childorderdealActAction!getWorkSati.action&#39;, { orderId: &amp;quot;NEW2018425164215552&amp;quot; }, function(data){
             if(data.code==&amp;quot;0&amp;quot;){
                 $(&#39;input:[value=&amp;quot;&#39;+data.data.code+&#39;&amp;quot;]&#39;).attr(&#39;checked&#39;,&#39;true&#39;);
             }
        },&#39;json&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq-设置ajax同步&#34;&gt;JQ 设置AJAX同步&lt;/h3&gt;

&lt;p&gt;由于$.post() 和 $.get() 默认是 异步请求，如果需要同步请求，则可以进行如下使用：&lt;br /&gt;
在$.post()前把ajax设置为同步：$.ajaxSettings.async = false;&lt;br /&gt;
在$.post()后把ajax改回为异步：$.ajaxSettings.async = true;&lt;br /&gt;
如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.ajaxSettings.async = false;  
$.post(&amp;quot;/finance/getLastTimeCard&amp;quot;, data, function(result) {  
    // 请求处理  
},&amp;quot;json&amp;quot;);  
$.ajaxSettings.async = true;  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;页面刷新篇&#34;&gt;页面刷新篇&lt;/h3&gt;

&lt;p&gt;1.刷新&lt;br /&gt;
reload 方法，该方法强迫浏览器刷新当前页面。&lt;br /&gt;
语法：location.reload([bForceGet])&lt;br /&gt;
参数： bForceGet， 可选参数， 默认为 false，从客户端缓存里取当前页。true, 则以 GET 方式，从服务端取最新的页面, 相当于客户端点击 F5(&amp;ldquo;刷新&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;replace 方法，该方法通过指定URL替换当前缓存在历史里（客户端）的项目，因此当使用replace方法之后，你不能通过“前进”和“后退”来访问已经被替换的URL。&lt;br /&gt;
语法： location.replace(URL)&lt;/p&gt;

&lt;p&gt;在实际应用的时候，重新刷新页面的时候，我们通常使用： &lt;strong&gt;location.reload()&lt;/strong&gt; 或者是 &lt;strong&gt;history.go(0) &lt;/strong&gt;来做。&lt;br /&gt;
因为这种做法就像是客户端点F5刷新页面，所以页面的method=&amp;ldquo;post&amp;rdquo;的时候，会出现&amp;rdquo;网页过期&amp;rdquo;的提示。那是因为Session的安全保护机制。&lt;br /&gt;
这里，location.replace() 就可以完成此任务。被replace的页面每次都在服务端重新生成。&lt;br /&gt;
你可以这么写： &lt;strong&gt;location.replace(location.href)&lt;/strong&gt;;&lt;/p&gt;

&lt;p&gt;2.返回并刷新页面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location.replace(document.referrer); //document.referre为r前一个页面的URL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不要用 history.go(-1)，或 history.back();来返回并刷新页面，这两种方法不会刷新页面。&lt;/p&gt;

&lt;h4 id=&#34;javascript刷新页面的几种方法&#34;&gt;Javascript刷新页面的几种方法&lt;/h4&gt;

&lt;p&gt;1    history.go(0)&lt;br /&gt;
2    location.reload()&lt;br /&gt;
3    location=location&lt;br /&gt;
4    location.assign(location)&lt;br /&gt;
5    document.execCommand(&amp;lsquo;Refresh&amp;rsquo;)&lt;br /&gt;
6    window.navigate(location)&lt;br /&gt;
7    location.replace(location)&lt;br /&gt;
8    document.URL=location.href&lt;/p&gt;

&lt;h4 id=&#34;自动刷新页面的方法&#34;&gt;自动刷新页面的方法&lt;/h4&gt;

&lt;p&gt;1.页面自动刷新：把如下代码加入&lt;head&gt;区域中,20秒刷新一次页面.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;20&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.页面自动跳转：把如下代码加入&lt;head&gt;区域中,20秒后跳转到&lt;a href=&#34;https://ianeiu.github.io/页面&#34;&gt;https://ianeiu.github.io/页面&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;20;url=https://ianeiu.github.io/&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.页面自动刷新js版&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; 
    function myrefresh(){  window.location.reload(); }
    setTimeout(&#39;myrefresh()&#39;,1000); //指定1秒刷新一次
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;窗口刷新&#34;&gt;窗口刷新&lt;/h4&gt;

&lt;p&gt;1.JS刷新框架的脚本语句&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//如何刷新包含该框架的页面用   
&amp;lt;script language=JavaScript&amp;gt;
   parent.location.reload();
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.子窗口刷新父窗口&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script language=JavaScript&amp;gt;
    self.opener.location.reload();
&amp;lt;/script&amp;gt;
//或　&amp;lt;a href=&amp;quot;javascript:opener.location.reload()&amp;quot;&amp;gt;刷新&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.如何刷新另一个框架的页面用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script language=JavaScript&amp;gt;
   parent.另一FrameID.location.reload();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.如果想关闭窗口时刷新或者想开窗时刷新的话，在&lt;body&gt;中调用以下语句即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body onload=&amp;quot;opener.location.reload()&amp;quot;&amp;gt; 开窗时刷新
&amp;lt;body onUnload=&amp;quot;opener.location.reload()&amp;quot;&amp;gt; 关闭时刷新
&amp;lt;script language=&amp;quot;javascript&amp;quot;&amp;gt;
    window.opener.document.location.reload()
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jquery对象与dom对象&#34;&gt;jQuery对象与dom对象&lt;/h3&gt;

&lt;p&gt;通过jquery的$()引用元素包括通过id、class、元素名以及元素的层级关系及dom或者xpath条件等方法，且返回的对象为jquery对象（集合对象），不能直接调用dom定义的方法。&lt;br /&gt;
转换&lt;br /&gt;
普通的dom对象一般可以通过$()转换成jquery对象。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document.getElementById(&amp;quot;msg&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于jquery对象本身是一个集合。所以如果jquery对象要转换为dom对象则必须取出其中的某一项，一般可通过索引取出。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#msg&amp;quot;)[0]，
$(&amp;quot;div&amp;quot;).eq(1)[0]，
$(&amp;quot;div&amp;quot;).get()[1]，
$(&amp;quot;td&amp;quot;)[5]

$(&amp;quot;#msg&amp;quot;).html();
$(&amp;quot;#msg&amp;quot;)[0].innerHTML;
$(&amp;quot;#msg&amp;quot;).eq(0)[0].innerHTML;
$(&amp;quot;#msg&amp;quot;).get(0).innerHTML;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取jQuery集合的某一项(获取第三个div元素的内容)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;div&amp;quot;).eq(2).html(); //调用jquery对象的方法
$(&amp;quot;div&amp;quot;).get(2).innerHTML; //调用dom的方法属性
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;form表单-注意点&#34;&gt;form表单 注意点&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;查询页面，有绑定回车事件提交表单的，要在form中加上onsubmit=&amp;ldquo;return false;&amp;ldquo;。不然会出现回车查询时页面直接显示JSON数据了。&lt;/li&gt;
&lt;li&gt;直接在form标签中加入属性accept-charset=&amp;lsquo;UTF-8&amp;rsquo;,防止中文乱码。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>[置顶]Good knowledge</title>
      <link>https://ianeiu.github.io/2018/09/11/%E7%BD%AE%E9%A1%B6good-knowledge/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/11/%E7%BD%AE%E9%A1%B6good-knowledge/</guid>
      
        <description>

&lt;h3 id=&#34;http超文本协议&#34;&gt;HTTP超文本协议&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://ianeiu.github.io/resouce/思维导图/HTTP超文本协议.png&#34; target=&#34;blank&#34;&gt;HTTP超文本协议&lt;/a&gt;
来源：微信公众号 java思维导图&lt;/p&gt;

&lt;h3 id=&#34;fail-fast机制&#34;&gt;fail-fast机制&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://cmsblogs.com/?p=1220&#34; target=&#34;blank&#34;&gt;fail-fast机制&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.csdn.net/biglxl/article/details/77462266&#34; target=&#34;blank&#34;&gt;fail-fast和fail-safe详解&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;swagger&#34;&gt;swagger&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/xupeng874395012/article/details/68946676&#34; target=&#34;blank&#34;&gt;swagger注释API详细说明&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.csdn.net/hellopeng1/article/details/82227942&#34; target=&#34;blank&#34;&gt;Swagger2 关于Map参数在API文档中展示详细参数以及参数说明&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;mybatis&#34;&gt;mybatis&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/ClassNotFoundException/p/6425558.html&#34; target=&#34;blank&#34;&gt;Spring-Mybatis &amp;mdash; 配置SqlSessionFactoryBean，整合Spring-Mybatis&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;eclipse&#34;&gt;Eclipse&lt;/h3&gt;

&lt;h4 id=&#34;与svn&#34;&gt;与SVN&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/v123411739/article/details/22512133&#34; target=&#34;blank&#34;&gt;Eclipse中使用SVN：&lt;/a&gt;
&lt;a href=&#34;https://ianeiu.github.io/resouce/eclipse/Eclipse-工具-使用SVN.docx&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;与maven&#34;&gt;与Maven&lt;/h4&gt;

&lt;p&gt;如何在eclipse jee中创建Maven project并且转换为Dynamic web project（原文链接找不到）：
&lt;a href=&#34;https://ianeiu.github.io/resouce/eclipse/如何在eclipse jee中创建Maven project并且转换为Dynamic web project.docx&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;&lt;br /&gt;
如何在eclipse jee中检出项目并转换为Maven project,最后转换为Dynamic web project（原文链接找不到）：
&lt;a href=&#34;https://ianeiu.github.io/resouce/eclipse/如何在eclipse jee中检出项目并转换为Maven project,最后转换为Dynamic web project.docx&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;项目跨域&#34;&gt;项目跨域&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/teach/p/5888958.html&#34; target=&#34;blank&#34;&gt;解决项目中的跨域操作问题：&lt;/a&gt;
&lt;a href=&#34;https://ianeiu.github.io/resouce/项目跨域问题.docx&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://ianeiu.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://ianeiu.github.io/about/</guid>
      
        <description>

&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;

&lt;p&gt;一名Java渣渣、LOL&lt;del&gt;黄金&lt;/del&gt;白银段位&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;邮箱：weimianwu@foxmail.com&lt;/li&gt;
&lt;li&gt;微信：qq747151921&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;友链&#34;&gt;友链&lt;/h3&gt;

&lt;p&gt;木有&lt;/p&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>Eclipse——记录集</title>
      <link>https://ianeiu.github.io/2018/09/19/eclipse%E8%AE%B0%E5%BD%95%E9%9B%86/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/19/eclipse%E8%AE%B0%E5%BD%95%E9%9B%86/</guid>
      
        <description>

&lt;h2 id=&#34;删除某个工作空间&#34;&gt;删除某个工作空间&lt;/h2&gt;

&lt;p&gt;方式1（推荐）：&lt;br /&gt;
   打开你的Eclipse，菜单中找到：Window&amp;ndash;&amp;gt;Preferences&amp;ndash;&amp;gt;General&amp;ndash;&amp;gt;Startup and Shutdown&amp;ndash;&amp;gt;WorkSpace，
然后选中你想要删除的工作空间，点击右边的remove按钮即可。&lt;/p&gt;

&lt;p&gt;方式2：&lt;br /&gt;
   在你的Eclipse目录中找到以下文件configuration.settings\org.eclipse.ui.ide.prefs，这个就是工作空间的配置文件了。
然后将RECENT_WORKSPACES后面你想删除的工作空间删除即可。&lt;/p&gt;

&lt;h2 id=&#34;tomcat启动报nullpointerexception&#34;&gt;tomcat启动报NullPointerException&lt;/h2&gt;

&lt;p&gt;在自己设置的workspace目录下面，打开目录：.metadata.plugins\org.eclipse.wst.server.core\ ，然后删除“temp0”文件夹即可。&lt;/p&gt;

&lt;h2 id=&#34;server视图加载项目之后项目名后边有带括号的名字&#34;&gt;Server视图加载项目之后项目名后边有带括号的名字&lt;/h2&gt;

&lt;p&gt;复制过来的项目会出现的一种情况：有时即使是项目改了名字在添加到Server上的时候在Server视图中看到项目名后边有一个带括号的名字,还是复制之前的项目名。&lt;/p&gt;

&lt;p&gt;解决：打开文件“你的工程目录.settings\org.eclipse.wst.common.component”看到内容，将里面所有为你原来工程名的字符串替换为新工程名字。&lt;/p&gt;

&lt;h2 id=&#34;修改tomcat设置内存大小&#34;&gt;修改tomcat设置内存大小&lt;/h2&gt;

&lt;p&gt;方式1（推荐）：&lt;br /&gt;
在Eclipse中下面Servers双击Tomcat Server&amp;hellip; 然后点击General InformAtion 下的Open launch configuration；&lt;br /&gt;
会弹出Edit Configuration，然后在选中Arguments选项卡；在VM arguments文本框中最后面添加
-Xms256m -Xmx1024m -XX:MaxPermSize=256m 。&lt;/p&gt;

&lt;p&gt;方式2：&lt;br /&gt;
在Eclipse菜单栏中Window ——》Preferences ——》Server ———》 Runtime Environment；&lt;br /&gt;
选择您用的Tomcat 然后点击Edit&amp;hellip;弹出Edit Server Runtime Ecvironment 下面JRE选项后面的Installed JREs&amp;hellip;
点击弹出Installed JREs；在选中您用的Jre在点击Edit..在Defaul VM Arguments：中填入-Xms256m -Xmx512m&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>IDEA——快捷键</title>
      <link>https://ianeiu.github.io/2018/09/19/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/19/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      
        <description>

&lt;h2 id=&#34;快捷键设置&#34;&gt;快捷键设置&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;默认情况下，我们输入代码时IDEA会自动弹出代码提示框，这时候是不用按快捷键的，直接使用方向键选择我们需要的条目就可以了。&lt;/li&gt;
&lt;li&gt;如果我们想主动 使用代码提示时，默认的快捷键是CTRL+空格，但是中文系统这个快捷键为切换输入法，我们应该调整一下这个快捷键的功能。
首先我们点击左上角的File（文件）——》Setting（设置），打开全局设置。&lt;/li&gt;
&lt;li&gt;我们在左侧菜单选择KeyMap，Main Menu-&amp;gt;Code-&amp;gt;Complation，找到Basic和Cyclic Expand Word两个快捷键设置。&lt;/li&gt;
&lt;li&gt;在Cyclic Expand Word上点击右键，移除原本的快捷键（AIT+/）。&lt;/li&gt;
&lt;li&gt;Basic就是代码提示功能的选项了，我们在这条项目上点击右键，选择第一项，增加快捷键。&lt;/li&gt;
&lt;li&gt;在这个界面，我们按下的键就会成为快捷键，此时我们按下AIT+/ 把它作为代码提示的快捷键。&lt;/li&gt;
&lt;li&gt;添加完之后代码提示有了两个快捷键了，我们再次点击右键，删除原来的AIT+空格的快捷键就可以了！&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;常用快捷键&#34;&gt;常用快捷键&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;DESC&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;KEY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;查找接口实现类&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + alt +B ，ctrl + T&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;自动处理（异常）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;alt+回车&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;自动生成方法&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;alt+insert，然后根据提示继续&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;复制当前行&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl +alt + ↓&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;查找文本&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + k ,ctrl + shfit + k&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;如何跳转到文件中的特定行&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + l&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;调出搜索文本的视图&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + f&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;进行全局搜索和局部搜索&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + h&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;关闭所有文件&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + shift + w&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;显示最近打开的所有文件&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + e&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;文件切换&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + pg、up&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;删除当前行&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + d&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;大小写转换&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;变小写ctrl + shift + u,变大写ctrl +shift + y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;重构-修改名字&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;alt + shift + r 统一修改方法的参数名字、或者类变量、方法变量&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;重构-抽取类方法&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选中代码，然后使用alt + shift + m,就会弹出抽取视图&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
      
    </item>
    
    <item>
      <title>IDEA——问题集</title>
      <link>https://ianeiu.github.io/2018/09/19/idea%E9%97%AE%E9%A2%98%E9%9B%86/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/19/idea%E9%97%AE%E9%A2%98%E9%9B%86/</guid>
      
        <description>

&lt;h2 id=&#34;idea-修复-弹窗license-activation报this-license-big3clik6f-has-been-cancelled&#34;&gt;IDEA 修复 弹窗License activation报this license BIG3CLIK6F has been cancelled&lt;/h2&gt;

&lt;p&gt;修改系统配置 ：&lt;br /&gt;
Linux在/etc/hosts中添加 0.0.0.0 account.jetbrains.com&lt;br /&gt;
windows在C:\Windows\System32\drivers\etc\hosts，将“0.0.0.0 account.jetbrains.com”添加到hosts文件中&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Java基础题（Integer、String、内部类与final）</title>
      <link>https://ianeiu.github.io/2018/09/19/java%E5%9F%BA%E7%A1%80%E9%A2%98integerstring%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8Efinal/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/19/java%E5%9F%BA%E7%A1%80%E9%A2%98integerstring%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8Efinal/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;翻了翻之前收藏的文章，找到几道有意思的题，这里整理汇总一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;integer&#34;&gt;Integer&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Integer a = 1000,b=1000;
Integer c = 100,d=100;    
@Test
public void testIntegerDD(){
    System.out.println(a==b);//false  
    System.out.println(c==d);//true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行代码，我们会得到 false  true。这道题笔试用经常出现，原理也很简单
,可看Integer源码valueOf(int i)方法&lt;br /&gt;
    public static Integer valueOf(int i) {
        if (i &amp;gt;= IntegerCache.low &amp;amp;&amp;amp; i &amp;lt;= IntegerCache.high)
        return IntegerCache.cache[i + (-IntegerCache.low)];
        return new Integer(i);
    }&lt;/p&gt;

&lt;p&gt;接下来，简单的扩展几个Integer的关系运算符==的比较。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Test
public void testIntegerDD(){

    Integer a = 1000,b=1000;
    Integer c = 100,d=100;   
    Integer e = new Integer(100);
    Integer f = new Integer(100);
    int g = 1000;
    Integer h = new Integer(1000);  


    //1、进行自动装箱操作；2、Integer中把-128-127 缓存了下来
    System.out.println(a==b);//false  
    System.out.println(c==d);//true

    //这里并不是用的缓存，而是new创建的对象存放在堆内存中，俩个变量指向不同引用，所以结果是false
    System.out.println(e==f);//false
    //当int和Integer进行==比较的时候，Java会把Integer进行自动拆箱为int类型的值
    System.out.println(g==h);//true

    //进行自动装箱操作
    System.out.println(c==e);//false
    System.out.println(a==h);//false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;string&#34;&gt;String&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;阅读前先要理解 ==，==如果作用于基本数据类型的变量，则直接比较其存储的 “值”是否相等；如果作用于引用类型的变量，则比较的是所指向的对象的地址。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;@Test
public void testStringDD() {
    String s1 = &amp;quot;hello&amp;quot;;
    String s2 = &amp;quot;hello&amp;quot;;
    String s3 = new String(&amp;quot;hello&amp;quot;);

    System.out.println(s1==s2); // true
    System.out.println(s1==s3); // false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文章解释：&lt;br /&gt;
一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配，而堆内存中则存放new出来的对象和数组。然而除此之外还有一块区域叫做常量池。&lt;br /&gt;
像我们通常想String s1 = &amp;ldquo;hello&amp;rdquo;; 这样申明的字符串对象，其值就是存储在常量池中。&lt;br /&gt;
当我们创建String s1 =&amp;ldquo;hello&amp;rdquo;这样一个对象之后，&amp;rdquo;hello&amp;rdquo;就存储到了常量池（也可叫做字符串池）中，当我们创建引用String s2  = &amp;ldquo;hello&amp;rdquo; 的时候，Java底层会优先在常量池中查找是否存在&amp;rdquo;hello&amp;rdquo;，如果存在则让s2指向这个值，不会重新创建，如果常量池中没有则创建并添加的池中。这就是为什么答案是true 和false的原因。&lt;/p&gt;

&lt;p&gt;接下来，还是简单的扩展几个String的关系运算符==的比较。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Test
public void testStringDD() {
    String s1 = &amp;quot;hello&amp;quot;;
    String s2 = &amp;quot;hello&amp;quot;;
    String s3 = new String(&amp;quot;hello&amp;quot;);

    //都存储在常量池中,指向同一常量
    System.out.println(s1==s2); // true
    //存储在常量池中,存储在堆内存中
    System.out.println(s1==s3); // false

    String s4 = &amp;quot;helloo&amp;quot;;
    /**
     * 会重新在常量池创建常量（String不可变属性）
     */
    String s5 = s1+&amp;quot;o&amp;quot;;
    //都存储在常量池中,指向不同常量
    System.out.println(s4 == s5); // false

    //hello
    String s6 = s4.substring(0, s4.length() - 1);
    //substring返回的也是new出来的String对象
    System.out.println(s1 == s6); // false
    System.out.println(s3 == s6); // false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;扩展：equals方法。equals方法不能作用于基本数据类型的变量，如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址；诸如String、Date等类对equals方法进行了重写的话，比较的是所指向的对象的内容。&lt;/p&gt;

&lt;h2 id=&#34;内部类与final&#34;&gt;内部类与final&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;public void mRun(final String name){
    new Runnable() {
        public void run() {
            try {
              Thread.sleep(1000);
           } catch (InterruptedException e) {
             // TODO Auto-generated catch block
            e.printStackTrace();
           }  
           System.out.println(name);
        }
    }.start();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文章解释：&lt;br /&gt;
这种代码相信大家写过很多，当内部类访问局部变量的时候，需要在局部变量前加final修饰符，不然编译器就会报错。通常我们也是这么干的。&lt;/p&gt;

&lt;p&gt;为什么要加final修饰符？&lt;br /&gt;
首先内部类的生命周期是成员级别的，而局部变量的生命周期实在方法体之类。也就是说会出现这样一种情况，当mRun方法执行，new 的线程运行，新线程里面会睡一秒。&lt;br /&gt;
主线程会继续执行，mRun执行完毕，name属性生命周期结束。1秒之后，Syetem.out.printh(name)执行。然而此时name已经寿终正寝，不在内存中了。&lt;/p&gt;

&lt;p&gt;Java就是为了杜绝这种错误，严格要求内部类中方位局部变量，必须使用final关键字修饰。&lt;br /&gt;
局部变量被final修饰之后，此时会在内存中保有一份局部变得的复制品，当内部类访问的时候其实访问的是这个复制品。这就好像是把局部变量的生命周期变长了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Maven——问题集</title>
      <link>https://ianeiu.github.io/2018/09/19/maven%E9%97%AE%E9%A2%98%E9%9B%86/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/19/maven%E9%97%AE%E9%A2%98%E9%9B%86/</guid>
      
        <description>

&lt;h2 id=&#34;could-not-calculate-build-plan&#34;&gt;Could not calculate build plan&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;将C:\User.m2\repository\org\apache\maven\plugins\maven-deploy-plugin目录下的文件夹删除;&lt;/li&gt;
&lt;li&gt;右击项目Maven-&amp;gt;Update Project-&amp;gt;Update Dependencies&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;missing-artifact&#34;&gt;Missing artifact&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;看看本地仓库是否有这个jar的目录，目录里是否有该jar的一个后缀为lastUpdated的文件;&lt;/li&gt;
&lt;li&gt;如果有就把这个文件删掉，再update一下dependency就行了。&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>SVN——记录集</title>
      <link>https://ianeiu.github.io/2018/09/19/svn%E8%AE%B0%E5%BD%95%E9%9B%86/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/19/svn%E8%AE%B0%E5%BD%95%E9%9B%86/</guid>
      
        <description>

&lt;h2 id=&#34;cmd-提示不是内部或者外部命令&#34;&gt;cmd 提示不是内部或者外部命令&lt;/h2&gt;

&lt;p&gt;windows安装svn的时候默认是不安装 svn comand line这个东西的，重装下svn客户端安装，安装时勾选 svn comand line&lt;/p&gt;

&lt;h2 id=&#34;windows-查看项目svn路径&#34;&gt;windows 查看项目svn路径&lt;/h2&gt;

&lt;p&gt;选择项目根目录&amp;mdash;-&amp;gt;鼠标右键&amp;mdash;-&amp;gt;属性&amp;mdash;-&amp;gt;版本控制（Subversion）&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Tomcat——记录集</title>
      <link>https://ianeiu.github.io/2018/09/19/tomcat%E8%AE%B0%E5%BD%95%E9%9B%86/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/19/tomcat%E8%AE%B0%E5%BD%95%E9%9B%86/</guid>
      
        <description>

&lt;h2 id=&#34;修改startup-bat启动窗口名&#34;&gt;修改startup.bat启动窗口名&lt;/h2&gt;

&lt;p&gt;打开 catlina.bat 文件，修改title&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:doStart  
shift  
if &amp;quot;%TITLE%&amp;quot; == &amp;quot;&amp;quot; set TITLE=zsyx_8232
set _EXECJAVA=start &amp;quot;%TITLE%&amp;quot; %_RUNJAVA%  
if not &amp;quot;&amp;quot;%1&amp;quot;&amp;quot; == &amp;quot;&amp;quot;-security&amp;quot;&amp;quot; goto execCmd  
shift  
echo Using Security Manager  
set &amp;quot;SECURITY_POLICY_FILE=%CATALINA_BASE%\conf\catalina.policy&amp;quot;  
goto execCmd
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tomcat指定jdk&#34;&gt;tomcat指定jdk&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows环境&lt;br /&gt;
打开 catlina.bat 文件、增加配置&lt;br /&gt;
&lt;code&gt;set JAVA_HOME=C:\Program Files\Java\jdk1.7.0_79&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;linux环境&lt;br /&gt;
编辑 setclasspath.sh，在文件的最开始加入如下代码&lt;br /&gt;
&lt;code&gt;
set JAVA_HOME=/home/jdk/Java\jdk7\jdk1.7.0_51&lt;br /&gt;
set JRE_HOME=/home/jdk/Java\jdk7\jre7
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;占用8080端口问题&#34;&gt;占用8080端口问题&lt;/h2&gt;

&lt;p&gt;tomcat死机了，重启eclipse之后，发现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Several&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ports&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8009&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;required&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tomcat&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Server&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;localhost&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;are&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;already&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;  
&lt;span class=&#34;n&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;may&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;already&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;be&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;running&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;another&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;may&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;be&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;   
&lt;span class=&#34;n&#34;&gt;To&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;will&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;need&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stop&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;change&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决办法：&lt;br /&gt;
方法1.重启电脑&lt;br /&gt;
方法2.在dos下，输入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;netstat   -ano|findstr  8080   
//说明：查看占用8080端口的进程  
taskkill  /pid  6856  /f   
//说明，运行windows自带taskkill命令，将上面显示的进程号，结束掉。 
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Oracle——查看及修改编码</title>
      <link>https://ianeiu.github.io/2018/09/18/oracle%E6%9F%A5%E7%9C%8B%E5%8F%8A%E4%BF%AE%E6%94%B9%E7%BC%96%E7%A0%81/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/18/oracle%E6%9F%A5%E7%9C%8B%E5%8F%8A%E4%BF%AE%E6%94%B9%E7%BC%96%E7%A0%81/</guid>
      
        <description>

&lt;h3 id=&#34;查看&#34;&gt;查看&lt;/h3&gt;

&lt;h4 id=&#34;查看oracle数据库的编码&#34;&gt;查看oracle数据库的编码&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#来源于props$，表示数据库的字符集
select * from nls_database_parameters where parameter =&#39;NLS_CHARACTERSET&#39;;

结果：
PARAMETER        |  VALUE
————————————————————————————
NLS_CHARACTERSET |  ZHS16GBK
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看oracle数据库的编码-1&#34;&gt;查看oracle数据库的编码&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#来源于v$parameter，表示客户端的字符集的设置，
#可能是参数文件，环境变量或者是注册表会话字符集环境
select * from nls_instance_parameters where parameter=&#39;NLS_LANGUAGE&#39;;

结果：
PARAMETER    |  VALUE
————————————————————————
NLS_LANGUAGE |  AMERICAN
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看session编码&#34;&gt;查看session编码&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#来源于v$nls_parameters，表示会话自己的设置，
#可能是会话的环境变量或者是alter session完成，
#如果会话没有特殊的设置，将与nls_instance_parameters一致。
select * from nls_session_parameters;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;修改&#34;&gt;修改&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;首先以sysdba的身份登录上去 conn /as sysdba&lt;/li&gt;
&lt;li&gt;关闭数据库shutdown immediate;&lt;/li&gt;
&lt;li&gt;以mount打来数据库，startup mount&lt;/li&gt;
&lt;li&gt;设置session&lt;br /&gt;
SQL&amp;gt;ALTER SYSTEM ENABLE RESTRICTED SESSION;
SQL&amp;gt; ALTER SYSTEM SET JOB_QUEUE_PROCESSES=0;
SQL&amp;gt; ALTER SYSTEM SET AQ_TM_PROCESSES=0;&lt;/li&gt;
&lt;li&gt;启动数据库  alter database open;&lt;/li&gt;
&lt;li&gt;修改字符集&lt;br /&gt;
ALTER DATABASE CHARACTER SET ZHS16GBK;&lt;br /&gt;
这会可能会报错，提示我们的字符集：新字符集必须为旧字符集的超集，这时我们可以跳过超集的检查做更改。&lt;br /&gt;
ALTER DATABASE character set INTERNAL_USE ZHS16GBK;&lt;br /&gt;
这条语句就可以了，TERNAL_USE提供的帮助就会使oracle绕过了子集与超集的验证，这条语句和上面的语句内部操作时完全相同的。&lt;/li&gt;
&lt;li&gt;关闭，重新启动&lt;br /&gt;
SQL&amp;gt;shutdown immediate;&lt;br /&gt;
SQL&amp;gt; startup&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当然字符集最好不要轻易修改，因为这会对数据库的数据有直接的影响，如果是生产环境的话，可能会造成不可估计得损失。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>SpringBoot——web项目改造为springboot所见问题简单记录</title>
      <link>https://ianeiu.github.io/2018/09/17/springbootweb%E9%A1%B9%E7%9B%AE%E6%94%B9%E9%80%A0%E4%B8%BAspringboot%E6%89%80%E8%A7%81%E9%97%AE%E9%A2%98%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/17/springbootweb%E9%A1%B9%E7%9B%AE%E6%94%B9%E9%80%A0%E4%B8%BAspringboot%E6%89%80%E8%A7%81%E9%97%AE%E9%A2%98%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</guid>
      
        <description>&lt;p&gt;现象1：引入layer.js出现undefinedcss目录.txt&lt;br /&gt;
原因：layer.js与layui.js冲突&lt;br /&gt;
解决：将layui.js 第二个.link 中的n.dir改为(n.dir?n.dir:r)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;现象2：配置CommonsMultipartResolver，上传文件返回异常HttpMediaTypeNotSupportedException&lt;br /&gt;
原因：同下&lt;br /&gt;
解决：FUN1、不配置CommonsMultipartResolver&lt;br /&gt;
    FUN2、启动类@EnableAutoConfiguration(exclude = {MultipartAutoConfiguration.class}) （不建议）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;现象3：上传文件返回异常java.lang.ClassCastException:   org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile cannot be cast to org.springframework.web.multipart.commons.CommonsMultipartFile&lt;br /&gt;
原因：FileUtil中multipartToFile的代码片段  CommonsMultipartFile cf = (CommonsMultipartFile)multfile  与springboot自带的org.springframework.web.multipart.MultipartFile冲突&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import org.springframework.web.multipart.commons.CommonsMultipartResolver;//这是旧项目引入的  
import org.springframework.web.multipart.MultipartFile;//这是springboot整合的  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决：采用输入流方式获取File对象，具体代码自行百度&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;现象4：Shiro 自定义 filter 匹配异常，无限拦截重定向&lt;br /&gt;
参考：&lt;a href=&#34;http://www.hillfly.com/2017/179.html&#34; target=&#34;blank&#34;&gt;Shiro 自定义 filter 匹配异常&lt;/a&gt;&lt;br /&gt;
原因：自定义Filter注册为了 Bean交给 Spring托管,它会被自动注册到  FilterChain中。请求先经过自定义Filter，导致请求被其先消费掉了，而ShiroFilter成了摆设。&lt;br /&gt;
解决：FUN1、利用 FilterRegistrationBean 注册自定义 Filter （建议使用）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ex：
    @Bean
    public CasFilter casFilter(){
        CasFilter cf = new CasFilter();
        cf.setSuccessUrl(successUrl);
        cf.setFailureUrl(failureUrl);
        return cf;
    }

    /**
     * 注册casFilter
     * @param casFilter
     * @return
     */
    @Bean
    public FilterRegistrationBean registCasFilter(CasFilter casFilter) {
        FilterRegistrationBean cas = new FilterRegistrationBean();
        cas.setFilter(casFilter);
        cas.setEnabled(false);  //该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理  x
        return cas;
    }

    /**
     * 注册shiroFilter
     * @param securityManager
     * @param casFilter
     * @param logoutFilter
     * @return
     */
    @Bean
    public ShiroFilterFactoryBean shiroFilter(DefaultWebSecurityManager securityManager,
            CasFilter casFilter,LogoutFilter logoutFilter) {
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        ...
        Map&amp;lt;String,Filter&amp;gt; filters = new HashMap&amp;lt;&amp;gt;();
        filters.put(&amp;quot;casFilter&amp;quot;,casFilter);
        filters.put(&amp;quot;logoutFilter&amp;quot;, logoutFilter);
        shiroFilterFactoryBean.setFilters(filters);     //添加casFilter到shiroFilter
        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;FUN2、将 CasFilter注册为了 Bean交给 Spring托管,它会被自动注册到 FilterChain中，那我们如果不把它注册为 Bean就可以避免这个问题了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ex:
    /**
     * 注册shiroFilter
     * @param securityManager
     * @return
     */
    @Bean
    public ShiroFilterFactoryBean shiroFilter(DefaultWebSecurityManager securityManager) {
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        ...
        Map&amp;lt;String,Filter&amp;gt; filters = new HashMap&amp;lt;&amp;gt;();
        filters.put(&amp;quot;casFilter&amp;quot;,new CasFilter());
        filters.put(&amp;quot;logoutFilter&amp;quot;, new LogoutFilter());
        shiroFilterFactoryBean.setFilters(filters);     //添加casFilter到shiroFilter
        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;现象5：启动报错Caused by: java.lang.NoClassDefFoundError: ch/qos/logback/classic/turbo/TurboFilter&lt;br /&gt;
原因:springboot1.3.x和1.3.x以下版本才支持log4j的日志配置，1.3.x以上版本只支持log4j2和logback的日志配置&lt;br /&gt;
解决：使用log4j2或logback&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;现象6：项目mvn install后jar包，启动报错，未获取到某个包下的class对象集合&lt;br /&gt;
原因：springboot项目打包后获取包资源所在路径与启动main不一样&lt;br /&gt;
ex：//jarPaht:file:/E:/IDEABuilder/fs/tyrz-springboot/tyrz-front/target/fsrzfw.jar!/BOOT-INF/classes!/cn/com/do1/component/identitySource/service/impl&lt;br /&gt;
解决：逐一分割路径获取类对象&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 获得包下面的所有的class
 * @author FengHuayuan
 * @date 2018年4月21日 下午12:25:20.
 * @param pack
 * @return
 */
public static List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; getClassesFromPackage(String pack) {
    List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; clazzs = new ArrayList&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;();
    // 是否循环搜索子包
    boolean recursive = true;
    // 包名字
    String packageName = pack;
    // 包名对应的路径名称
    String packageDirName = packageName.replace(&#39;.&#39;, &#39;/&#39;);
    Enumeration&amp;lt;URL&amp;gt; dirs;
    try {
        dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);
        while (dirs.hasMoreElements()) {
            URL url = dirs.nextElement();
            String protocol = url.getProtocol();
            if (&amp;quot;file&amp;quot;.equals(protocol)) {
                log.debug(&amp;quot;*****【File类型】的扫描！&amp;quot;);
                String filePath = URLDecoder.decode(url.getFile(), &amp;quot;UTF-8&amp;quot;);
                findClassInPackageByFile(packageName, filePath, recursive, clazzs);
            } else if (&amp;quot;jar&amp;quot;.equals(protocol)) {
                log.debug(&amp;quot;*****【Jar类型】的扫描！&amp;quot;);
                String filePath = URLDecoder.decode(url.getFile(), &amp;quot;UTF-8&amp;quot;);
                getClasssFromJarFile(filePath, clazzs);//wm add
            }
        }

    } catch (Exception e) {
        log.error(e.getMessage(),e);
    }
    return clazzs;
}

/** 
 * 从jar文件中读取指定目录下面的所有的class文件 
 * springboot打jar包专用
 * @author wm
 * @param jarPaht   jar文件存放的位置 
 * @param filePaht    指定的文件目录 
 * @param clazzs 所有的的class的对象 
 */  
public static void getClasssFromJarFile(String jarPath,List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; clazzs) {  

    log.info(&amp;quot;getClasssFromJarFile - jarPath:&amp;quot;+jarPath);//wm
    //jarPaht:file:/E:/IDEABuilder/fs/tyrz-springboot/tyrz-front/target/fsrzfw.jar!/BOOT-INF/classes!/cn/com/do1/component/identitySource/service/impl
    String[] jarPaths = jarPath.split(&amp;quot;!&amp;quot;);
    String jarPaht=jarPaths[0].substring(6);//去掉file:/
    String startDir = (jarPaths[1]+jarPaths[2]).substring(1);//去掉/

    JarFile jarFile = null;  
    try {  
        jarFile = new JarFile(jarPaht);  
    } catch (IOException e1) {  
        e1.printStackTrace();  
    }  

    List&amp;lt;JarEntry&amp;gt; jarEntryList = new ArrayList&amp;lt;JarEntry&amp;gt;();  

    Enumeration&amp;lt;JarEntry&amp;gt; ee = jarFile.entries();  
    while (ee.hasMoreElements()) {  
        JarEntry entry = (JarEntry) ee.nextElement();  
        if (entry.getName().startsWith(startDir) &amp;amp;&amp;amp; entry.getName().endsWith(&amp;quot;.class&amp;quot;)) {  
            log.info(&amp;quot;getClasssFromJarFile - entry:&amp;quot;+entry.getName());//wm
            jarEntryList.add(entry);  
        }  
    }  
    for (JarEntry entry : jarEntryList) {  
        String className = entry.getName().replace(&#39;/&#39;, &#39;.&#39;);  
        //   BOOT-INF/classes/cn/com/do1/component/identitySource/service/impl/XXX.class
        className = className.substring(17, className.length() - 6);//去掉  BOOT-INF/classes/     .class
        try {  
            clazzs.add(Thread.currentThread().getContextClassLoader().loadClass(className));  
        } catch (ClassNotFoundException e) {  
            e.printStackTrace();  
        }  
    }  

}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;现象7：启动jar包，访问登录，报NoClassDefFoundError RedisCacheManager&lt;br /&gt;
解决：注释pom配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-devtools&amp;lt;/artifactId&amp;gt;
    &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;现象8：jar包启动无法访问jsp的问题&lt;br /&gt;
原因:&lt;a href=&#34;https://www.jb51.net/article/141474.htm&#34; target=&#34;blank&#34;&gt;深入Spring Boot实现对Fat Jar jsp的支持&lt;/a&gt;&lt;br /&gt;
解决：亲测有效，需两步&lt;br /&gt;
&amp;emsp;步骤1、新增两个类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    import java.io.File;
    import java.net.MalformedURLException;
    import java.net.URL;

    import org.apache.catalina.Context;
    import org.apache.catalina.Lifecycle;
    import org.apache.catalina.LifecycleEvent;
    import org.apache.catalina.LifecycleListener;
    import org.apache.catalina.WebResourceRoot.ResourceSetType;
    import org.springframework.util.ResourceUtils;

    /**
     * Add main class fat jar/exploded directory into tomcat ResourceSet.
     *
     * @author hengyunabc 2017-07-29
     *
     */
    public class StaticResourceConfigurer implements LifecycleListener {

        private final Context context;

        StaticResourceConfigurer(Context context) {
            this.context = context;
        }

        @Override
        public void lifecycleEvent(LifecycleEvent event) {
            if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) {
                URL location = this.getClass().getProtectionDomain().getCodeSource().getLocation();

                if (ResourceUtils.isFileURL(location)) {
                    // when run as exploded directory
                    String rootFile = location.getFile();
                    if (rootFile.endsWith(&amp;quot;/BOOT-INF/classes/&amp;quot;)) {
                        rootFile = rootFile.substring(0, rootFile.length() - &amp;quot;/BOOT-INF/classes/&amp;quot;.length() + 1);
                    }
                    if (!new File(rootFile, &amp;quot;META-INF&amp;quot; + File.separator + &amp;quot;resources&amp;quot;).isDirectory()) {
                        return;
                    }

                    try {
                        location = new File(rootFile).toURI().toURL();
                    } catch (MalformedURLException e) {
                        throw new IllegalStateException(&amp;quot;Can not add tomcat resources&amp;quot;, e);
                    }
                }

                String locationStr = location.toString();
                if (locationStr.endsWith(&amp;quot;/BOOT-INF/classes!/&amp;quot;)) {
                    // when run as fat jar
                    locationStr = locationStr.substring(0, locationStr.length() - &amp;quot;/BOOT-INF/classes!/&amp;quot;.length() + 1);
                    try {
                        location = new URL(locationStr);
                    } catch (MalformedURLException e) {
                        throw new IllegalStateException(&amp;quot;Can not add tomcat resources&amp;quot;, e);
                    }
                }
                this.context.getResources().createWebResourceSet(ResourceSetType.RESOURCE_JAR, &amp;quot;/&amp;quot;, location,
                        &amp;quot;/META-INF/resources&amp;quot;);

            }
        }
    }

    import org.apache.catalina.Context;
    import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
    import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
    import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
    import org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;
    import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;

    /**
     * 处理1.5版本jar包启动无法访问jsp的问题
     * &amp;lt;p&amp;gt;Title: TomcatConfig&amp;lt;/p&amp;gt;  
     * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;  
     * @author wm  
     * @date 2018年7月24日
     */
    @Configuration
    @ConditionalOnProperty(name = &amp;quot;tomcat.staticResourceCustomizer.enabled&amp;quot;, matchIfMissing = true)
    public class TomcatConfig {
        @Bean
        public EmbeddedServletContainerCustomizer staticResourceCustomizer() {
            return new EmbeddedServletContainerCustomizer() {
                @Override
                public void customize(ConfigurableEmbeddedServletContainer container) {
                    if (container instanceof TomcatEmbeddedServletContainerFactory) {
                        ((TomcatEmbeddedServletContainerFactory) container)
                                .addContextCustomizers(new TomcatContextCustomizer() {
                                    @Override
                                    public void customize(Context context) {
                                        context.addLifecycleListener(new StaticResourceConfigurer(context));
                                    }
                                });
                    }
                }

            };
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;步骤2，pom配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;resources&amp;gt;
        ...
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/webapp&amp;lt;/directory&amp;gt;
            &amp;lt;!-- 处理jar包启动无法访问jsp的问题 --&amp;gt;
            &amp;lt;targetPath&amp;gt;META-INF/resources&amp;lt;/targetPath&amp;gt;
            &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;**/**&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
        &amp;lt;/resource&amp;gt; 
    &amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;现象9：启动项目报错ClassNotFoundException: javax.ws.rs.core.Response$StatusType&lt;br /&gt;
解决：pom引入jsr311-api（g:javax.ws.rs）(a:jsr311-api)（v:1.1.1）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;现象10：整合redis报 NOAUTH Authentication required&lt;br /&gt;
原因：spring.redis.password=yourpassword 配置在JedisConnectionFactory中没有被加载进去&lt;br /&gt;
解决：手动获取自定义或原配置密码进行配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Value(&amp;quot;${redis.address}&amp;quot;)
private String hostName;
@Value(&amp;quot;${redis.port}&amp;quot;)
private String port;
@Value(&amp;quot;${redis.password}&amp;quot;)
private String password;

@Bean
public JedisConnectionFactory jedisConnectionFactory(){
    JedisConnectionFactory jcf = new JedisConnectionFactory();
    jcf.setHostName(hostName);
    jcf.setPort(Integer.parseInt(port));
    jcf.setPassword(password);
    return jcf;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;现象11：整合swagger组件，HTTP接口统一处理异常失效&lt;br /&gt;
原因：GlobalExceptionResolver implements HandlerExceptionResolver&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private boolean isReturnReponseBody(Object handler) {
    if(((HandlerMethod) handler).hasMethodAnnotation(ResponseBody.class)) {
        return true;
    }
    HandlerMethod hm = (HandlerMethod) handler;
    if(hm.getBean().getClass().isAnnotationPresent(RestController.class)) {
        return true;
    }
    /*Method method = hm.getMethod();
    Class&amp;lt;?&amp;gt; returnType = method.getReturnType();
    if(returnType.isAnnotationPresent(ResponseBody.class)) {
        return true;
    }*/ 
    return false;
}
result ： false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决：新增判断&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(((HandlerMethod) handler).hasMethodAnnotation(ApiOperation.class)) {
    return true;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>SpringBoot——整合（项目改造）</title>
      <link>https://ianeiu.github.io/2018/09/17/springboot%E6%95%B4%E5%90%88%E9%A1%B9%E7%9B%AE%E6%94%B9%E9%80%A0/</link>
      <pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/17/springboot%E6%95%B4%E5%90%88%E9%A1%B9%E7%9B%AE%E6%94%B9%E9%80%A0/</guid>
      
        <description>

&lt;p&gt;本文只进行简单的代码提示，具体内容可自行百度&lt;/p&gt;

&lt;h3 id=&#34;cxf&#34;&gt;CXF&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;@Bean
public ServletRegistrationBean CXFServlet() {
    ServletRegistrationBean cxfBean = new ServletRegistrationBean(new CXFServlet(), &amp;quot;/webservice/*&amp;quot;);
    cxfBean.setName(&amp;quot;CXFServlet&amp;quot;);
    cxfBean.setLoadOnStartup(1);
    return cxfBean;
}

@Configuration
public class CXFConfig {
    @Autowired
    private Bus bus;
    @Autowired
    private SSOService sSOService;

    @Bean
    public Endpoint endpointSSO() {
        EndpointImpl endpoint = new EndpointImpl(bus, sSOService);
        endpoint.publish(&amp;quot;/sso&amp;quot;);
        return endpoint;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;redis-jedis&#34;&gt;redis&amp;amp;jedis&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;package cn.com.do1.component.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CachingConfigurerSupport;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import redis.clients.jedis.JedisPoolConfig;

/**
 * redis配置
 * @author wm
 *
 */
@Configuration
@EnableCaching
public class RedisConfig extends CachingConfigurerSupport{

    @Bean
    public CacheManager cacheManager(RedisTemplate&amp;lt;?, ?&amp;gt; redisTemplate) {
        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);        
        //设置缓存过期时间
        //rcm.setDefaultExpiration(60);//秒
        return rcm;
    }

    @Bean
    public RedisTemplate&amp;lt;String, Object&amp;gt; redisTemplate() {
        RedisTemplate&amp;lt;String, Object&amp;gt; template = new RedisTemplate&amp;lt;&amp;gt;();
        template.setConnectionFactory(jedisConnectionFactory());
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(new JdkSerializationRedisSerializer());
        template.setHashKeySerializer(new StringRedisSerializer());
        template.setHashValueSerializer(new JdkSerializationRedisSerializer());
        return template;
    }


    @Value(&amp;quot;${redis.address}&amp;quot;)
    private String hostName;
    @Value(&amp;quot;${redis.port}&amp;quot;)
    private String port;

    @Bean
    public JedisConnectionFactory jedisConnectionFactory(){
        JedisConnectionFactory jcf = new JedisConnectionFactory();
        jcf.setHostName(hostName);
        jcf.setPort(Integer.parseInt(port));
        //jcf.setPassword(&amp;quot;&amp;quot;);
        return jcf;
    }

    @Bean
    public JedisPoolConfig jedisPoolConfig(){
        JedisPoolConfig jpc = new JedisPoolConfig();
        jpc.setMaxIdle(1);
        jpc.setMaxTotal(5);
        jpc.setBlockWhenExhausted(true);
        jpc.setMaxWaitMillis(3000);
        jpc.setTestOnBorrow(true);
        return jpc;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;错误页面配置&#34;&gt;错误页面配置&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 跳转至错误页面
 * add 2018.07.11
 * @author wm
 * @param code
 * @return
 */
@RequestMapping(&amp;quot;/error/{code}&amp;quot;)
public String goToErrorPage(@PathVariable(value=&amp;quot;code&amp;quot;) String code){
    return code;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新增拦截器：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 错误页面拦截器
 * 替代EmbeddedServletContainerCustomizer在war中不起作用的方法
 * @author wm
 */
@Component
public class ErrorPageInterceptor extends HandlerInterceptorAdapter {
    private List&amp;lt;Integer&amp;gt; errorCodeList = Arrays.asList(404,500);
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws
        Exception {
       if (errorCodeList.contains(response.getStatus())) {
            response.sendRedirect(request.getContextPath()+&amp;quot;/error/&amp;quot; + response.getStatus());
            return false;
        }
        return super.preHandle(request, response, handler);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新增拦截配置:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void addInterceptors(InterceptorRegistry registry) {
    registry.addInterceptor(errorPageInterceptor);//.addPathPatterns(&amp;quot;/action/**&amp;quot;, &amp;quot;/mine/**&amp;quot;);默认所有
    super.addInterceptors(registry);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;定时任务&#34;&gt;定时任务&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 定时任务配置
 * @author wm
 *
 */
@Configuration
@EnableScheduling
public class SchedulerConfig implements SchedulingConfigurer{

    @Override
    public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {
        taskRegistrar.setScheduler(setTaskExecutors());
    }

    @Bean(destroyMethod=&amp;quot;shutdown&amp;quot;)
    public Executor setTaskExecutors(){
        return Executors.newScheduledThreadPool(10); // 10个线程来处理。
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;兼容jsp&#34;&gt;兼容JSP&lt;/h3&gt;

&lt;p&gt;pom新增：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    ...
    &amp;lt;!--jsp支持 --&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;tomcat-embed-jasper&amp;lt;/artifactId&amp;gt;
        &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;!-- 配置jsp-jstl的支持 --&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;javax.servlet.jsp.jstl&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;jstl-api&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    ...
&amp;lt;/dependencies&amp;gt;

&amp;lt;build&amp;gt; 
    ...
    &amp;lt;resources&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/webapp&amp;lt;/directory&amp;gt;
            &amp;lt;!-- 处理jar包启动无法访问jsp的问题 --&amp;gt;
            &amp;lt;targetPath&amp;gt;META-INF/resources&amp;lt;/targetPath&amp;gt;
            &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;**/**&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
        &amp;lt;/resource&amp;gt; 
    &amp;lt;/resources&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新增配置类（处理jar包启动无法访问jsp的问题）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;

import org.apache.catalina.Context;
import org.apache.catalina.Lifecycle;
import org.apache.catalina.LifecycleEvent;
import org.apache.catalina.LifecycleListener;
import org.apache.catalina.WebResourceRoot.ResourceSetType;
import org.springframework.util.ResourceUtils;

/**
 * Add main class fat jar/exploded directory into tomcat ResourceSet.
 *
 * @author hengyunabc 2017-07-29
 *
 */
public class StaticResourceConfigurer implements LifecycleListener {

    private final Context context;

    public StaticResourceConfigurer(Context context) {
        this.context = context;
    }

    @Override
    public void lifecycleEvent(LifecycleEvent event) {
        if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) {
            URL location = this.getClass().getProtectionDomain().getCodeSource().getLocation();

            if (ResourceUtils.isFileURL(location)) {
                // when run as exploded directory
                String rootFile = location.getFile();
                if (rootFile.endsWith(&amp;quot;/BOOT-INF/classes/&amp;quot;)) {
                    rootFile = rootFile.substring(0, rootFile.length() - &amp;quot;/BOOT-INF/classes/&amp;quot;.length() + 1);
                }
                if (!new File(rootFile, &amp;quot;META-INF&amp;quot; + File.separator + &amp;quot;resources&amp;quot;).isDirectory()) {
                    return;
                }

                try {
                    location = new File(rootFile).toURI().toURL();
                } catch (MalformedURLException e) {
                    throw new IllegalStateException(&amp;quot;Can not add tomcat resources&amp;quot;, e);
                }
            }

            String locationStr = location.toString();
            if (locationStr.endsWith(&amp;quot;/BOOT-INF/classes!/&amp;quot;)) {
                // when run as fat jar
                locationStr = locationStr.substring(0, locationStr.length() - &amp;quot;/BOOT-INF/classes!/&amp;quot;.length() + 1);
                try {
                    location = new URL(locationStr);
                } catch (MalformedURLException e) {
                    throw new IllegalStateException(&amp;quot;Can not add tomcat resources&amp;quot;, e);
                }
            }
            this.context.getResources().createWebResourceSet(ResourceSetType.RESOURCE_JAR, &amp;quot;/&amp;quot;, location,
                    &amp;quot;/META-INF/resources&amp;quot;);

        }
    }
}

import org.apache.catalina.Context;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
import org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;
import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import cn.com.do1.component.config.assembly.StaticResourceConfigurer;

/**
 * 处理jar包启动无法访问jsp的问题
 * &amp;lt;p&amp;gt;Title: TomcatConfig&amp;lt;/p&amp;gt;  
 * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;  
 * @author wm  
 * @date 2018年7月24日
 */
@Configuration
@ConditionalOnProperty(name = &amp;quot;tomcat.staticResourceCustomizer.enabled&amp;quot;, matchIfMissing = true)
public class TomcatConfig {
    @Bean
    public EmbeddedServletContainerCustomizer staticResourceCustomizer() {
        return new EmbeddedServletContainerCustomizer() {
            @Override
            public void customize(ConfigurableEmbeddedServletContainer container) {
                if (container instanceof TomcatEmbeddedServletContainerFactory) {
                    ((TomcatEmbeddedServletContainerFactory) container)
                            .addContextCustomizers(new TomcatContextCustomizer() {
                                @Override
                                public void customize(Context context) {
                                    context.addLifecycleListener(new StaticResourceConfigurer(context));
                                }
                            });
                }
            }

        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;静态资源&#34;&gt;静态资源&lt;/h3&gt;

&lt;p&gt;方式一：&lt;br /&gt;
pom新增配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;resources&amp;gt;
    &amp;lt;resource&amp;gt;
        &amp;lt;directory&amp;gt;src/main/webapp&amp;lt;/directory&amp;gt;
        &amp;lt;!--注意此次必须要放在此目录下才能被访问到--&amp;gt;
        &amp;lt;targetPath&amp;gt;META-INF/resources&amp;lt;/targetPath&amp;gt;
        &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
        &amp;lt;includes&amp;gt;
            &amp;lt;include&amp;gt;**/**&amp;lt;/include&amp;gt;
        &amp;lt;/includes&amp;gt;
    &amp;lt;/resource&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新增配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void addResourceHandlers(ResourceHandlerRegistry registry) {
    registry.addResourceHandler(&amp;quot;/js/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/META-INF/resources/WEB-INF/js/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/css/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/META-INF/resources/WEB-INF/css/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/images/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/META-INF/resources/WEB-INF/images/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/common/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/META-INF/resources/WEB-INF/common/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/register/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/META-INF/resources/WEB-INF/register/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/plugin/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/META-INF/resources/WEB-INF/plugin/&amp;quot;);
    super.addResourceHandlers(registry);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方式二（推荐）：&lt;br /&gt;
将静态资源文件放到resouce/static目录下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void addResourceHandlers(ResourceHandlerRegistry registry) {
    registry.addResourceHandler(&amp;quot;/js/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/static/js/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/css/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/static/css/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/images/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/static/images/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/register/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/static/register/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/plugin/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/static/plugin/&amp;quot;);
    super.addResourceHandlers(registry);
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;文件上传&#34;&gt;文件上传&lt;/h3&gt;

&lt;p&gt;配置文件新增：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#upload
spring.http.multipart.enabled=true
spring.http.multipart.file-size-threshold=0  #0-ALLFILE
spring.http.multipart.location=D:/fsrzfw/temp
spring.http.multipart.max-file-size=10Mb
spring.http.multipart.max-request-size=10Mb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新增配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 配置上传文件大小的配置
 * @return
 */
@Bean
public MultipartConfigElement multipartConfigElement() {
   MultipartConfigFactory factory = new MultipartConfigFactory();
   //  单个数据大小
   factory.setMaxFileSize(&amp;quot;102400KB&amp;quot;);
   /// 总上传数据大小
   factory.setMaxRequestSize(&amp;quot;102400KB&amp;quot;);
   return factory.createMultipartConfig();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;打jar包运行&#34;&gt;打JAR包运行&lt;/h3&gt;

&lt;p&gt;pom新增配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;build&amp;gt;
    &amp;lt;finalName&amp;gt;fsrzfw&amp;lt;/finalName&amp;gt;
    &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;
                &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;
                &amp;lt;encoding&amp;gt;UTF-8&amp;lt;/encoding&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;mainClass&amp;gt;cn.com.do1.component.Application&amp;lt;/mainClass&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;executions&amp;gt;
                &amp;lt;execution&amp;gt;
                    &amp;lt;goals&amp;gt;
                        &amp;lt;goal&amp;gt;repackage&amp;lt;/goal&amp;gt;
                    &amp;lt;/goals&amp;gt;
                &amp;lt;/execution&amp;gt;
            &amp;lt;/executions&amp;gt;
            &amp;lt;dependencies&amp;gt;
                &amp;lt;!-- spring热部署 --&amp;gt;
                &amp;lt;dependency&amp;gt;
                    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;springloaded&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;1.2.6.RELEASE&amp;lt;/version&amp;gt;
                &amp;lt;/dependency&amp;gt;
            &amp;lt;/dependencies&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;maven-resources-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;nonFilteredFileExtensions&amp;gt;
                    &amp;lt;nonFilteredFileExtension&amp;gt;ttf&amp;lt;/nonFilteredFileExtension&amp;gt;
                    &amp;lt;nonFilteredFileExtension&amp;gt;woff&amp;lt;/nonFilteredFileExtension&amp;gt;
                    &amp;lt;nonFilteredFileExtension&amp;gt;woff2&amp;lt;/nonFilteredFileExtension&amp;gt;
                &amp;lt;/nonFilteredFileExtensions&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
    &amp;lt;resources&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/java&amp;lt;/directory&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;**/**&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
        &amp;lt;/resource&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/resource&amp;lt;/directory&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;**/**&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
        &amp;lt;/resource&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/webapp&amp;lt;/directory&amp;gt;
            &amp;lt;!-- 处理jar包启动无法访问jsp的问题 --&amp;gt;
            &amp;lt;targetPath&amp;gt;META-INF/resources&amp;lt;/targetPath&amp;gt;
            &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;**/**&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
        &amp;lt;/resource&amp;gt; 
    &amp;lt;/resources&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行mvn install，target目录下（生成fsrzfw.jar）执行 java -jar fsrzfw.jar&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>HashMap——工作原理</title>
      <link>https://ianeiu.github.io/2018/09/13/hashmap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/13/hashmap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      
        <description>

&lt;p&gt;&lt;span style=&#34;color:red;font-size:13px&#34;&gt;建议边看边阅读源码&lt;/red&gt;&lt;/p&gt;

&lt;h3 id=&#34;hashmap-数组-链表&#34;&gt;HashMap（数组+链表）&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;HashMap储存的是键值对&lt;/li&gt;
&lt;li&gt;HashMap可以接受null键值和值，而Hashtable则不能；&lt;/li&gt;
&lt;li&gt;HashMap是非synchronized&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;hashmap的工作原理&#34;&gt;HashMap的工作原理&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;HashMap基于hashing原理，我们通过put()和get()方法储存和获取对象。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;当我们将键值对传递给put()方法时，它调用键对象的hashCode()方法来计算hashcode，然后找到bucket位置来储存值对象。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;当获取对象时，通过键对象的equals()方法找到正确的键值对，然后返回值对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;当两个对象的hashcode相同&#34;&gt;当两个对象的hashcode相同&lt;/h3&gt;

&lt;p&gt;它们会储存在同一个bucket位置的链表中。因为hashcode相同，所以它们的bucket位置相同，‘碰撞’会发生。因为HashMap使用链表存储对象，这个Entry(包含有键值对的Map.Entry对象)会存储在链表中。&lt;/p&gt;

&lt;h3 id=&#34;两个键的hashcode相同-如何获取值对象&#34;&gt;两个键的hashcode相同,如何获取值对象&lt;/h3&gt;

&lt;p&gt;当我们调用get()方法，HashMap会使用键对象的hashcode找到bucket位置，找到bucket位置之后，会调用keys.equals()方法去找到链表中正确的节点，最终找到要找的值对象。&lt;/p&gt;

&lt;h3 id=&#34;hashmap的大小超过了负载因子-load-factor-定义的容量-会发生什么&#34;&gt;HashMap的大小超过了负载因子(load factor)定义的容量，会发生什么？&lt;/h3&gt;

&lt;p&gt;对象会进行rehashing，调用hash方法找到新的bucket位置。&lt;br /&gt;
默认的负载因子大小为0.75，也就是说，当一个map填满了75%的bucket时候，和其它集合类(如ArrayList等)一样，将会创建原来HashMap大小的两倍的bucket数组，来重新调整map的大小，并将原来的对象放入新的bucket数组中。&lt;/p&gt;

&lt;h3 id=&#34;调整hashmap大小存在什么问题&#34;&gt;调整HashMap大小存在什么问题&lt;/h3&gt;

&lt;p&gt;多线程的情况下，可能产生条件竞争(race condition)。如果两个线程都发现HashMap需要重新调整大小了，它们会同时试着调整大小。&lt;/p&gt;

&lt;h3 id=&#34;为什么string-interger这样的wrapper类适合作为键&#34;&gt;为什么String, Interger这样的wrapper类适合作为键&lt;/h3&gt;

&lt;p&gt;因为wrapper类如String是不可变的，也是final的，而且重写了equals()和hashCode()方法了，防止计算hashCode()改变键值。&lt;/p&gt;

&lt;p&gt;如果键值在放入时和获取时返回不同的hashcode的话，那么就不能从HashMap中找到你想要的对象。&lt;/p&gt;

&lt;p&gt;也可以使用自定义的对象作为键，条件是遵守equals()和hashCode()方法的定义规则，并且当对象插入到Map中之后将不会再改变了。&lt;/p&gt;

&lt;h3 id=&#34;hashmap与hashset&#34;&gt;HashMap与HashSet&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;HashMap&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;HashSet&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;实现了Map接口&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;实现了Set接口（构造new HashMap）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;put()存键值对&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;add()存储对象&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;使用键对象来计算hashcode值&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以equals()方法用来判断对象的相等性，如果两个对象不同的话，那么返回false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;hashmap与hashtable&#34;&gt;HashMap与Hashtable&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;HashMap几乎等于Hashtable，除了HashMap是非synchronized的，并可以接受null(HashMap可以接受为null的键值(key)和值(value)，而Hashtable则不行)。&lt;/li&gt;
&lt;li&gt;HashMap是非synchronized，而Hashtable是synchronized。Java 5提供了ConcurrentHashMap，可以替代HashTable&lt;/li&gt;
&lt;li&gt;HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器非fail-fast。所以当有其它线程通过map对象改变了HashMap的结构（增加或者移除元素），会抛出ConcurrentModificationException，但迭代器本身的remove()方法移除元素则不会抛出这个异常。&lt;/li&gt;
&lt;li&gt;由于Hashtable是线程安全的也是synchronized，所以在单线程环境下它比HashMap要慢。&lt;/li&gt;
&lt;li&gt;HashMap不能保证随着时间的推移Map中的元素次序是不变的。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;cocurrenthashmap与hashtable&#34;&gt;CocurrentHashMap与Hashtable&lt;/h3&gt;

&lt;p&gt;Hashtable是synchronized的，但是ConcurrentHashMap同步性能更好，因为它仅仅根据同步级别对map的一部分进行上锁。ConcurrentHashMap当然可以代替HashTable，但是HashTable提供更强的线程安全性。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Java笔记整理——基础</title>
      <link>https://ianeiu.github.io/2018/09/13/java%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/13/java%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%E5%9F%BA%E7%A1%80/</guid>
      
        <description>

&lt;p&gt;Java基础笔记整理&lt;/p&gt;

&lt;h2 id=&#34;关键字&#34;&gt;关键字&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;用于定义数据类型&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;class interface  【引用数据类型：类、接口、数组】&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;boolean(1) char(2) byte(1) short(2) int(4) long(8) float(4) double(8) 【8个内置数据类型】&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;void&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;用于定义数据类型值&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;true false null&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;用于定义流程控制

&lt;ul&gt;
&lt;li&gt;if else switch case default【选择】&lt;br /&gt;
【switch jdk5前：case byte\short\int\char。jdk5：case：enum。jdk7：case String】&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;while do for【循环】&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;break continue return【流程跳转】&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;用于定义访问权限修饰符

&lt;ul&gt;
&lt;li&gt;private public protected&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;用于定义类、函数、变量

&lt;ul&gt;
&lt;li&gt;abstract final static synchronized&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;类与类之间的关系

&lt;ul&gt;
&lt;li&gt;extends implements&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;建立实例、引用实例、判断实例

&lt;ul&gt;
&lt;li&gt;new this super instanceof&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;异常处理

&lt;ul&gt;
&lt;li&gt;try catch throw throws finally&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;包

&lt;ul&gt;
&lt;li&gt;package import&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;其它

&lt;ul&gt;
&lt;li&gt;native strictfp transient volatile assert&lt;/li&gt;
&lt;li&gt;goto const 【保留字】&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;标识符&#34;&gt;标识符&lt;/h2&gt;

&lt;p&gt;类、接口、方法、变量的名字&lt;br /&gt;
合法字符组成：英文字幕、数字、$、_【不能以数字开头】&lt;/p&gt;

&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;单行 //&lt;/li&gt;
&lt;li&gt;多行 /**/&lt;/li&gt;
&lt;li&gt;文档 /**  */&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;常量&#34;&gt;常量&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;字面值 &amp;ldquo;hello&amp;rdquo;,10.true&lt;/li&gt;
&lt;li&gt;自定义 final int LINK_CODE = 0;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;变量&#34;&gt;变量&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类变量（静态变量）&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;实例变量（成员变量）&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;局部变量（本地变量）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;位置（代码）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;类中&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;类中方法外&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;方法定义中、方法声明上&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;位置（内存）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;方法区中静态区&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;堆&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;栈&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;生命周期&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;随类加载而加载&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;随对象&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;随方法&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;this无法存在静态中；&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;静态方法只能访问静态变量&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;运算符&#34;&gt;运算符&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;算术运算符&lt;br /&gt;
&lt;code&gt;
% + - * / ++  --
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;赋值运算符&lt;br /&gt;
&lt;code&gt;
= += -= *= /= %=
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;比较运算符&lt;br /&gt;
&lt;code&gt;
== != &amp;gt; &amp;lt; &amp;gt;= &amp;lt;= 
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;逻辑运算符&lt;br /&gt;
&lt;code&gt;
&amp;amp; | ^(异或) ! &amp;amp;&amp;amp; || 【&amp;amp;&amp;amp; || 有短路效果】
&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;位运算符&lt;br /&gt;
&lt;code&gt;
&amp;lt;&amp;lt; &amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;(无符号右移) &amp;amp; | ^ ~(按位取反)
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;三元运算符&lt;br /&gt;
&lt;code&gt;
max = a &amp;gt; b ? a : b
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;代码块&#34;&gt;代码块&lt;/h2&gt;

&lt;p&gt;代码块加载顺序： 静态代码块（类初始化）&amp;ndash;&amp;gt; 构造代码块（对象初始化） &amp;ndash;&amp;gt; 局部代码块&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Importtant06Code {
    static { System.out.println(&amp;quot;Importtant06Code静态代码块&amp;quot;);}

    public static void main(String[] args) {
        System.out.println(&amp;quot;main&amp;quot;);
        User user = new User();
        User user2 = new User();
    }
}

class User{
    static { System.out.println(&amp;quot;User静态代码块&amp;quot;);}
    {System.out.println(&amp;quot;User局部代码块&amp;quot;);}
    public User() {System.out.println(&amp;quot;User构造代码块&amp;quot;);}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Importtant06Code静态代码块
main
User静态代码块
User局部代码块
User构造代码块
User局部代码块
User构造代码块
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
  </channel>
</rss>