<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IanEiU</title>
    <link>https://ianeiu.github.io/</link>
    <description>Recent content on IanEiU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>WuWeiMian</copyright>
    <lastBuildDate>Thu, 23 Aug 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ianeiu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[置顶]收藏册——js、jq</title>
      <link>https://ianeiu.github.io/2018/08/23/%E7%BD%AE%E9%A1%B6%E6%94%B6%E8%97%8F%E5%86%8Cjsjq/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/23/%E7%BD%AE%E9%A1%B6%E6%94%B6%E8%97%8F%E5%86%8Cjsjq/</guid>
      
        <description>

&lt;h3 id=&#34;操作元素的样式&#34;&gt;操作元素的样式&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#msg&amp;quot;).css(&amp;quot;background&amp;quot;); //返回元素的背景颜色
$(&amp;quot;#msg&amp;quot;).css(&amp;quot;background&amp;quot;,&amp;quot;#ccc&amp;quot;) //设定元素背景为灰色
$(&amp;quot;#msg&amp;quot;).height(300); $(&amp;quot;#msg&amp;quot;).width(&amp;quot;200&amp;quot;); //设定宽高
$(&amp;quot;#msg&amp;quot;).css({ color: &amp;quot;red&amp;quot;, background: &amp;quot;blue&amp;quot; });//以名值对的形式设定样式

$(&amp;quot;p&amp;quot;).attr(&amp;quot;class&amp;quot;, &amp;quot;ddiiyy&amp;quot;); //设置p元素的class为 &amp;quot;ddiiyy&amp;quot; 
$(&amp;quot;#nm_p&amp;quot;).addClass(&amp;quot;another&amp;quot;); // 追加样式 
$(&amp;quot;p&amp;quot;).removeClass(&amp;quot;ddiiyy another&amp;quot;); //溢出样式
$(&amp;quot;p&amp;quot;).toggleClass(&amp;quot;ddiiyy&amp;quot;); //如果存在（不存在）就删除（添加）名为ddiiyy的class
$(&amp;quot;p&amp;quot;).hasClass(&amp;quot;another&amp;quot;); //是否含有某个class。是返true，否返false
$(&amp;quot;p&amp;quot;).is(&amp;quot;.another&amp;quot;); //is(&amp;quot;.&amp;quot;+class);//JQuery实现，增强代码可读性
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;readonly和disabled&#34;&gt;readonly和disabled&lt;/h3&gt;

&lt;p&gt;表单中readOnly和disabled的区别：&lt;br /&gt;
readonly只针对input(text/ password)和textarea有效，而disabled对于所有的表单元素都有效，包括select,radio, checkbox, button等。&lt;br /&gt;
但是表单元素在使用了disabled后，当我们将表单以POST或GET的方式提交的话，这个元素的值不会被传递出去，而readonly会将该值传递出去（这种情况出现在我们将某个表单中的textarea元素设置为disabled或readonly，但是submit或button却是可以使用的）。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;隐藏和显示-操作display属性&#34;&gt;隐藏和显示(操作display属性)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#id&amp;quot;).show();//表示display:block, 
$(&amp;quot;#id&amp;quot;).hide();//表示display:none; 
$(&amp;quot;#id&amp;quot;).toggle();//切换元素的可见状态。如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的。
$(&amp;quot;#id&amp;quot;).css(&#39;display&#39;,&#39;none&#39;); 
$(&amp;quot;#id&amp;quot;).css(&#39;display&#39;,&#39;block&#39;); 
或 
$(&amp;quot;#id&amp;quot;)[0].style.display = &#39;none&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;操作disabled属性&#34;&gt;操作disabled属性&lt;/h3&gt;

&lt;p&gt;js操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function disableElement(element,val){
    document.getElementById(element).disabled=val;d
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jQuery进行操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//两种方法设置disabled属性
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,true);
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,&amp;quot;disabled&amp;quot;);
//三种方法移除disabled属性
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,false);
$(&#39;#areaSelect&#39;).removeAttr(&amp;quot;disabled&amp;quot;);
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,&amp;quot;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取s:textfield，并设置其disabled属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;functiondisableTextfieldofAccountDiv(element,val) {
    $(element).find(&amp;quot;:textfield&amp;quot;).attr(&#39;disabled&#39;,val);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;禁用a-button点击&#34;&gt;禁用a，button点击&lt;/h3&gt;

&lt;p&gt;1.jquery禁用a标签方法1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document).ready(function () {
    $(&amp;quot;a&amp;quot;).each(function () {
        var textValue = $(this).html();
        if (textValue == &amp;quot;XX概况&amp;quot; || textValue == &amp;quot;服务导航&amp;quot;) {
            $(this).css(&amp;quot;cursor&amp;quot;, &amp;quot;default&amp;quot;);
            $(this).attr(&#39;href&#39;, &#39;#&#39;);     //修改&amp;lt;a&amp;gt;的 href属性值为 #  这样状态栏不会显示链接地址 
            $(this).click(function (event) {
                event.preventDefault();   // 如果&amp;lt;a&amp;gt;定义了 target=&amp;quot;_blank“ 需要这句来阻止打开新页面
            });
        }
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.jquery禁用a标签方法2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;a.tooltip&#39;).live(&#39;click&#39;, function(event) {
  alert(&amp;quot;抱歉,已停用！&amp;quot;); 
  event.preventDefault();  
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.jquery禁用a标签方法3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function(){
    $(&#39;.disableCss&#39;).removeAttr(&#39;href&#39;);//去掉a标签中的href属性
    $(&#39;.disableCss&#39;).removeAttr(&#39;onclick&#39;);//去掉a标签中的onclick事件
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.jquery控制按钮的禁用与启用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;#button&#39;).attr(&#39;disabled&#39;,&amp;quot;true&amp;quot;);//添加disabled属性
$(&#39;#button&#39;).removeAttr(&amp;quot;disabled&amp;quot;); //移除disabled属性
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;操作checked属性-回显&#34;&gt;操作checked属性\回显&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input id=&amp;quot;cb1&amp;quot; type=&amp;quot;checkbox&amp;quot; checked /&amp;gt;
&amp;lt;input id=&amp;quot;cb2&amp;quot; type=&amp;quot;checkbox&amp;quot; checked=&amp;quot;checked&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.jquery判断checked的三种方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.attr(&#39;checked&#39;)   //看版本1.6+返回:&amp;quot;checked&amp;quot;或&amp;quot;undefined&amp;quot; ;1.5-返回:true或false
.prop(&#39;checked&#39;) //16+:true/false
.is(&#39;:checked&#39;)    //所有版本:true/false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.jquery赋值checked的几种写法:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//所有的jquery版本都可以这样赋值
$(&amp;quot;#cb1&amp;quot;).attr(&amp;quot;checked&amp;quot;,&amp;quot;checked&amp;quot;);
$(&amp;quot;#cb1&amp;quot;).attr(&amp;quot;checked&amp;quot;,true);

//jquery1.6+:prop的4种赋值
$(&amp;quot;#cb1&amp;quot;).prop(&amp;quot;checked&amp;quot;,true);    //很简单就不说了哦
$(&amp;quot;#cb1&amp;quot;).prop({checked:true});    //map键值对
$(&amp;quot;#cb1&amp;quot;).prop(&amp;quot;checked&amp;quot;,function(){  return true;   }); //函数返回true或false
$(&amp;quot;#cb1&amp;quot;).prop(&amp;quot;checked&amp;quot;,&amp;quot;checked&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.check回显的一个demo：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(list){
    if(type==1){
        var checkBoxAll = $(&amp;quot;input[name=&#39;outsideFileName&#39;]&amp;quot;);
        for(var i=0;i&amp;lt;list.length;i++){
            $.each(checkBoxAll,function(j,checkbox){
                //获取复选框的value属性
                var checkValue=$(checkbox).val();
                if(list[i].filePath==checkValue){
                    $(checkbox).attr(&amp;quot;checked&amp;quot;,true);
                }
            })
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;checkbox-全选反选&#34;&gt;checkbox（全选反选..）&lt;/h3&gt;

&lt;p&gt;demo：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;注：jquery1.9.0+无法正常显示
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot; &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt; 
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&amp;gt; 
&amp;lt;head&amp;gt; 
&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt; 
&amp;lt;title&amp;gt;jQuery 对checkbox的操作&amp;lt;/title&amp;gt; 
&amp;lt;/HEAD&amp;gt; 
&amp;lt;body style=&amp;quot;text-align:center;margin: 0 auto;font-size: 12px;&amp;quot; mce_style=&amp;quot;text-align:center;margin: 0 auto;font-size: 12px;&amp;quot;&amp;gt; 
&amp;lt;div style=&amp;quot;border: 1px solid #999; width: 500px; padding: 15px; background: #eee; margin-top: 150px;&amp;quot;&amp;gt; 
&amp;lt;form name=&amp;quot;form1&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn1&amp;quot; value=&amp;quot;全选&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn2&amp;quot; value=&amp;quot;取消全选&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn3&amp;quot; value=&amp;quot;选中所有奇数&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn4&amp;quot; value=&amp;quot;反选&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn5&amp;quot; value=&amp;quot;获得选中的所有值&amp;quot;&amp;gt; 
&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox1&amp;quot;&amp;gt; 
checkbox1 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox2&amp;quot;&amp;gt; 
checkbox2 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox3&amp;quot;&amp;gt; 
checkbox3 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox4&amp;quot;&amp;gt; 
checkbox4 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox5&amp;quot;&amp;gt; 
checkbox5 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox6&amp;quot;&amp;gt; 
checkbox6 
&amp;lt;/form&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;/body&amp;gt; 
&amp;lt;/HTML&amp;gt; 

&amp;lt;script  type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;http://libs.baidu.com/jquery/1.8.0/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; 
&amp;lt;!-- 
$(&amp;quot;document&amp;quot;).ready(function(){ 
$(&amp;quot;#btn1&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]&amp;quot;).attr(&amp;quot;checked&amp;quot;,&#39;true&#39;);//全选 
}) 
$(&amp;quot;#btn2&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]&amp;quot;).removeAttr(&amp;quot;checked&amp;quot;);//取消全选 
}) 
$(&amp;quot;#btn3&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]:even&amp;quot;).attr(&amp;quot;checked&amp;quot;,&#39;true&#39;);//选中所有奇数 
}) 
$(&amp;quot;#btn4&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]&amp;quot;).each(function(){//反选 
if($(this).attr(&amp;quot;checked&amp;quot;)){ 
$(this).removeAttr(&amp;quot;checked&amp;quot;); 
} 
else{ 
$(this).attr(&amp;quot;checked&amp;quot;,&#39;true&#39;); 
} 
}) 
}) 
$(&amp;quot;#btn5&amp;quot;).click(function(){//输出选中的值 
var str=&amp;quot;&amp;quot;; 
$(&amp;quot;[name=&#39;checkbox&#39;][checked]&amp;quot;).each(function(){ 
str+=$(this).val()+&amp;quot;/r/n&amp;quot;; 
//alert($(this).val()); 
}) 
alert(str); 
}) 
}) 
--&amp;gt; 
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.获取checkbox选中的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var chk_value =[]; 
$(&#39;input[name=&amp;quot;test&amp;quot;]:checked&#39;).each(function(){ 
    chk_value.push($(this).val()); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.点击全选 非全选&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input[name=&amp;quot;pCheckBox&amp;quot;]&#39;).click(function(){  
    //alert(this.checked);  
    if($(this).is(&#39;:checked&#39;)){  
        $(&#39;input[name=&amp;quot;eventIds&amp;quot;]&#39;).each(function(){  
            //此处如果用attr，会出现第三次失效的情况  
            $(this).prop(&amp;quot;checked&amp;quot;,true);  
        });  
    }else{  
         $(&#39;input[name=&amp;quot;eventIds&amp;quot;]&#39;).each(function(){  
            $(this).removeAttr(&amp;quot;checked&amp;quot;,false);  
        });  
        //$(this).removeAttr(&amp;quot;checked&amp;quot;);  
    }  
});  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;radio&#34;&gt;radio&lt;/h3&gt;

&lt;p&gt;1.获取选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio :checked&#39;).val()；
$(&amp;quot;input[type=&#39;radio&#39;]:checked&amp;quot;).val();
$(&amp;quot;input[name=&#39;rd&#39;]:checked&amp;quot;).val();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.设置第一个Radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio :first&#39;).attr(&#39;checked&#39;, &#39;checked&#39;);
$(&#39;input:radio :first&#39;).attr(&#39;checked&#39;, &#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.设置最后一个Radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio :last&#39;).attr(&#39;checked&#39;, &#39;checked&#39;);
$(&#39;input:radio :last&#39;).attr(&#39;checked&#39;, &#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.根据索引值设置任意一个radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio&#39;).eq(索引值).attr(&#39;checked&#39;, &#39;true&#39;);//索引值=0,1,2....
$(&#39;input:radio&#39;).slice(1,2).attr(&#39;checked&#39;, &#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.根据Value值设置Radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;input:radio[value=&#39;rd2&#39;]&amp;quot;).attr(&#39;checked&#39;,&#39;true&#39;);
$(&amp;quot;input[value=&#39;rd2&#39;]&amp;quot;).attr(&#39;checked&#39;,&#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;select&#34;&gt;select&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;select id=&amp;quot;s&amp;quot;&amp;gt;
    &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;嘻嘻&amp;lt;/option&amp;gt;
    &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;呵呵&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.获取select中option被选中的文本值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;误：$(&amp;quot;#s&amp;quot;).text();  //获取所有option的文本值
$(&amp;quot;#s option:selected&amp;quot;).text();  //获取选中的option的文本值
$(&amp;quot;#s&amp;quot;).find(&amp;quot;option:selected&amp;quot;).text(); //获取选中的option的文本值
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.获取select中option被选中的value值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#s&amp;quot;).val();
$(&amp;quot;#s option:selected&amp;quot;).val();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.js获取select选中的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sel=document.getElementById(&amp;quot;s&amp;quot;); 
var index = sel.selectedIndex; // 选中索引
albumid= sel.options[index].value;//要的值
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;textarea&#34;&gt;textarea&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;textarea name=&amp;quot;content&amp;quot; id=&amp;quot;content&amp;quot; rows=&amp;quot;8&amp;quot; cols=&amp;quot;5&amp;quot;&amp;gt;这是textarea内容&amp;lt;/textarea&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.获取textarea文本值（用name和id）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;textarea[name=&#39;content&#39;]&amp;quot;).val()      $(&amp;quot;#content&amp;quot;).val()    
$(&amp;quot;textarea[name=&#39;content&#39;]&amp;quot;).text()      $(&amp;quot;#content&amp;quot;).text()    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.赋值textarea文本值（只能用id）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#content&amp;quot;).val(&amp;quot;这是要写入的textarea文本内容&amp;quot;)
$(&amp;quot;#content&amp;quot;).text(&amp;quot;这是要写入的textarea文本内容&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;val和text的区别是：val()可以体现换行符，而text()不能。&lt;/p&gt;

&lt;p&gt;3.禁止文本域textarea可拖拽的方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;textarea{ resize:none;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.让textarea没有黄框且不能拖拽：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;textarea{outline:none;resize:none;}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;confirm-二次确认&#34;&gt;confirm，二次确认&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if(confirm(&amp;quot;确定要删除该记录吗？&amp;quot;)){
    doSomething();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;重置表单reset&#34;&gt;重置表单reset&lt;/h3&gt;

&lt;p&gt;使用jquery方法重置form表单&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;误：$(&#39;#formName&#39;).reset();//得到的是数组。
正：$(&#39;#formName&#39;)[0].reset();//得到的是jQuery对象。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：这种方式虽然可以重置表单，但是不能重置隐藏字段。隐藏字段要单独处理。&lt;br /&gt;
小知识：$(&amp;lsquo;#formName&amp;rsquo;).get(0)得到的是DOM对象。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jquery-获取元素个数&#34;&gt;jquery 获取元素个数&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;#div1&#39;).children().length;
$(&#39;#div1&#39;).children(&#39;span&#39;).length;//获取id=div1下的span元素个数
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;定位&#34;&gt;定位&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id =&#39;&#39;localid&amp;quot;&amp;gt; xixi&amp;lt;/div&amp;gt;
window.location.href=&#39;#localid&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;修改标题title&#34;&gt;修改标题title&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;document.title=&amp;quot;批量业务单&amp;quot;; 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq的事件处理功能&#34;&gt;JQ的事件处理功能&lt;/h3&gt;

&lt;p&gt;1.hover&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//当鼠标放在表格的某行上时将class置为over，离开时置为out。
$(&amp;quot;tr&amp;quot;).hover(
function(){
     $(this).addClass(&amp;quot;over&amp;quot;);
}, 
function(){ 
    $(this).addClass(&amp;quot;out&amp;quot;); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;demo鼠标移入出现悬浮框&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;td class=&#39;linkTd&#39;&amp;gt;
    &amp;lt;div style=&#39;position:relative;&#39;&amp;gt;
        @link&amp;lt;span class=&#39;linkHover&#39;&amp;gt;@detailLink&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/td&amp;gt;

.linkHover{         
    position: absolute;  
    top: 20px;  
    width: 320px;
    max-height: 250px;           /* 设置最大高度，当高度达到此值时出现滚动条 */  
    z-index: 10;  
    background-color: #E0E5E5;   
    overflow: auto;              /* 自动添加滚动条 */  
    box-shadow:0px 0px 10px #000;   /* 外阴影 */  
    display:none;
}

$(&#39;.linkTd&#39;).hover(  
    function(){   
        $(this).find(&#39;.linkHover&#39;).show();
    } ,  
    function(){  
        $(this).find(&#39;.linkHover&#39;).hide();
    }   
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.ready&lt;br /&gt;
在文档加载后激活函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document).ready(function(){
  $(&amp;quot;.btn1&amp;quot;).click(function(){
    $(&amp;quot;p&amp;quot;).slideToggle();
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;语法 1  &lt;code&gt;$(document).ready(function)&lt;/code&gt;&lt;br /&gt;
语法 2  &lt;code&gt;$().ready(function)&lt;/code&gt;&lt;br /&gt;
语法 3  &lt;code&gt;$(function)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3.toggle&lt;br /&gt;
toggle()和slidetoggle()方法提供了状态切换功能。&lt;br /&gt;
toggle()方法包括了hide()和show()方法。 slideToggle()方法包括了slideDown()和slideUp()方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//每次点击时轮换添加和删除名为selected的class。
$(&amp;quot;p&amp;quot;).toggle(function(){ 
     $(this).addClass(&amp;quot;selected&amp;quot;); 
},function(){ 
     $(this).removeClass(&amp;quot;selected&amp;quot;); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.trigger&lt;br /&gt;
    在每一个匹配的元素上触发某类事件,如模拟点击，回车登录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//模拟点击
$(&amp;quot;#b&amp;quot;).click(function(){$(&amp;quot;#a&amp;quot;).trigger(&amp;quot;click&amp;quot;)})
$(&amp;quot;#a&amp;quot;).trigger(&amp;quot;click&amp;quot;);//执行#a的click事件

//回车点击
$(document).keyup(function(event){
  if(event.keyCode ==13){
    $(&amp;quot;#btn_login&amp;quot;).trigger(&amp;quot;click&amp;quot;);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;推荐：keyup，防止笔记本键盘不小心触摸到了
有些文档中有写成这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(window).keydown（function(){
...
}）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;XP系统IE6下是不成功的。&lt;/p&gt;

&lt;p&gt;5.bind(eventtype,fn)，unbind(eventtype)&lt;br /&gt;
事件的绑定与反绑定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;p&amp;quot;).bind(&amp;quot;click&amp;quot;, function(){alert($(this).text());}); //为每个p元素添加单击事件 
$(&amp;quot;p&amp;quot;).unbind(); //删除所有p元素上的所有事件 
$(&amp;quot;p&amp;quot;).unbind(&amp;quot;click&amp;quot;) //删除所有p元素上的单击事件
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq集合遍历&#34;&gt;JQ集合遍历&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;//为索引分别为0，1，2的p元素分别设定不同的字体颜色。
$(&amp;quot;p&amp;quot;).each(function(i){this.style.color=[&#39;#f00&#39;,&#39;#0f0&#39;,&#39;#00f&#39;][i]})
//实现表格的隔行换色效果
$(&amp;quot;tr&amp;quot;).each(function(i){this.style.backgroundColor=[&#39;#ccc&#39;,&#39;#fff&#39;][i%2]})
//为每个p元素增加了click事件，单击某个p元素则弹出其内容
$(&amp;quot;p&amp;quot;).click(function(){alert($(this).html())})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;demo遍历table的tr获取td的值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tbody id=&amp;quot;history_income_list&amp;quot;&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;&amp;quot; onclick=&amp;quot;history_income_del(this);&amp;quot; href=&amp;quot;###&amp;quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;&amp;quot; href=&amp;quot;###&amp;quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;&amp;quot; href=&amp;quot;###&amp;quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for循环遍历&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var trList = $(&amp;quot;#history_income_list&amp;quot;).children(&amp;quot;tr&amp;quot;)
for (var i=0;i&amp;lt;trList.length;i++) {
    var tdArr = trList.eq(i).find(&amp;quot;td&amp;quot;);
    var history_income_type = tdArr.eq(0).find(&amp;quot;input&amp;quot;).val();//收入类别
    var history_income_money = tdArr.eq(1).find(&amp;quot;input&amp;quot;).val();//收入金额
    var history_income_remark = tdArr.eq(2).find(&amp;quot;input&amp;quot;).val();//  备注
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JQ遍历&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#history_income_list&amp;quot;).find(&amp;quot;tr&amp;quot;).each(function(){
    var tdArr = $(this).children();
    var history_income_type = tdArr.eq(0).find(&amp;quot;input&amp;quot;).val();//收入类别
    var history_income_money = tdArr.eq(1).find(&amp;quot;input&amp;quot;).val();//收入金额
    var history_income_remark = tdArr.eq(2).find(&amp;quot;input&amp;quot;).val();//  备注
    ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jquery&#34;&gt;jquery $.&lt;/h3&gt;

&lt;h4 id=&#34;extend&#34;&gt;$.extend&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//为jquery扩展了min,max两个方法
$.extend({ 
    min: function(a, b){return a &amp;lt; b?a:b; },
    max: function(a, b){return a &amp;gt; b?a:b; }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用扩展的方法（通过“$.方法名”调用）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alert(&amp;quot;a=10,b=20,max=&amp;quot;+$.max(10,20)+&amp;quot;,min=&amp;quot;+$.min(10,20));
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;each&#34;&gt;$.each&lt;/h4&gt;

&lt;p&gt;$.each(obj, fn)：通用的迭代函数。可用于代替循环。 如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.each( [0,1,2], function(i, n){ alert( &amp;quot;Item #&amp;quot; + i + &amp;quot;: &amp;quot; + n ); });
//等价 
var tempArr=[0,1,2]; 
for(var i=0;i&amp;lt;tempArr.length;i++){ alert(&amp;quot;Item #&amp;quot;+i+&amp;quot;: &amp;quot;+tempArr[i]); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以处理json数据，如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.each( { name: &amp;quot;John&amp;quot;, lang: &amp;quot;JS&amp;quot; }, function(i, n){ alert( &amp;quot;Name: &amp;quot; + i + &amp;quot;, Value: &amp;quot; + n ); });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;map&#34;&gt;$.map&lt;/h4&gt;

&lt;p&gt;$.map(array, fn)：数组映射。把一个数组中的项目(处理转换后)保存到到另一个新数组中，并返回生成的新数组。 如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var tempArr=$.map( [0,1,2], function(i){ return i + 4; });//[4,5,6] 
var tempArr=$.map( [0,1,2], function(i){ return i &amp;gt; 0 ? i + 1 : null; });//[2,3] 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;merge&#34;&gt;$.merge&lt;/h4&gt;

&lt;p&gt;$.merge(arr1,arr2):合并两个数组并删除其中重复的项目。 如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.merge( [0,1,2], [2,3,4] ) //返回[0,1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;trim&#34;&gt;$.trim&lt;/h4&gt;

&lt;p&gt;$.trim(str)：删除字符串两端的空白字符。 如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.trim(&amp;quot; hello, how are you? &amp;quot;); //返回&amp;quot;hello,how are you? &amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-获取数组长度&#34;&gt;JS 获取数组长度&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var myarray = [1,2,3];
myarray.length // 初始的长度是3
myarray.length = 2; // 删除最后一个元素
myarray.length = 20 // 添加18个元素到数组中
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-判断-undefined&#34;&gt;JS 判断 undefined&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if(typeof(value)==&amp;quot;undefined&amp;quot;){ 
    alert(&amp;quot;undefined&amp;quot;); 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-join将数组转字符串&#34;&gt;JS  join将数组转字符串&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;zs&amp;quot;/&amp;gt;张三
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;ls&amp;quot;/&amp;gt;李四
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;we&amp;quot;/&amp;gt;王二
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;sw&amp;quot;/&amp;gt;三五
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;sl&amp;quot;/&amp;gt;四六

var chk_value =[]; 
$(&#39;input[name=&amp;quot;nextDeal&amp;quot;]:checked&#39;).each(function(){ 
    chk_value.push($(this).val()); 
});
var userNames = chk_value.join(&amp;quot;,&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-遮罩功能&#34;&gt;JS 遮罩功能&lt;/h3&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!--弹窗背景--&amp;gt;
&amp;lt;div class=&amp;quot;flexBg&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;!--loading--&amp;gt;
&amp;lt;div class=&amp;quot;loading&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;
    &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;p&amp;gt;加载中...&amp;lt;/p&amp;gt;
    &amp;lt;%-- &amp;lt;img src=&amp;quot;${baseURL }/themes/zsyx/images/loading.gif&amp;quot;&amp;gt;&amp;lt;/img&amp;gt; --%&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.flexBg {
    background: url(../images/flexBg.png);
    position: fixed;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    z-index: 999;
}
.loading {
    width: 100px;
    height: 100px;
    position: absolute;
    top: 50%;
    left: 50%;
    margin: -50px 0 0 -50px;
    z-index: 999;
    background: #fff;
    padding: 15px;
    border-radius: 5px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function sZZ(){
    $(&#39;.flexBg&#39;).show();
    $(&#39;.loading&#39;).show();
}
function hZZ(){
    $(&#39;.flexBg&#39;).hide();
    $(&#39;.loading&#39;).hide();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IMG&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ianeiu.github.io/resouce/收藏册JSJQ/flexBg.png&#34;  alt=&#34;BG&#34; /&gt;
&lt;img src=&#34;https://ianeiu.github.io/resouce/收藏册JSJQ/loading.gif&#34;  alt=&#34;LOAD&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js中的encodeuri-decodeuri-decodeuricomponent-解决传值中文乱码&#34;&gt;js中的encodeURI、decodeURI、decodeURIComponent,解决传值中文乱码&lt;/h3&gt;

&lt;p&gt;一、基本概念&lt;br /&gt;
encodeURI和decodeURI是成对来使用的，因为浏览器的地址栏有中文字符的话，可以会出现不可预期的错误，所以可以encodeURI把非英文字符转化为英文编码，decodeURI可以用来把字符还原回来。&lt;br /&gt;
encodeURI方法不会对下列字符进行编码：&amp;rdquo;:&amp;ldquo;、&amp;rdquo;/&amp;ldquo;、&amp;rdquo;;&amp;rdquo; 和 &amp;ldquo;?&amp;ldquo;，encodeURIComponent方法可以对这些字符进行编码。&lt;/p&gt;

&lt;p&gt;decodeURI()方法相当于java.net.URLDecoder.decode(URIString, &amp;ldquo;UTF-8&amp;rdquo;);&lt;br /&gt;
encodeURI()方法相当于java.net.URLEncoder.encode(URIString, &amp;ldquo;UTF-8&amp;rdquo;);&lt;br /&gt;
二、例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.location.href = encodeURI(encodeURI(jumpURL));
//http://127.0.0.1:8081/zsyx/jsp/component/demandwork/functiontest/functiontest.jsp?id=NEW20183123134021852&amp;amp;slink=%25E9%259C%2580%25E6%25B1%2582%25E5%25A4%2584%25E7%2590%2586

var slink = decodeURI(decodeURI(&#39;${param.slink}&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js判断文件是否存在&#34;&gt;JS判断文件是否存在&lt;/h3&gt;

&lt;p&gt;方法1：判断图片是否存在&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isHasImg(pathImg){  
    var ImgObj=new Image();  
    ImgObj.src= pathImg;  
    if(ImgObj.fileSize &amp;gt; 0 || (ImgObj.width &amp;gt; 0 &amp;amp;&amp;amp; ImgObj.height &amp;gt; 0))  
    {  
    return true;  
    } else {  
    return false;  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法2：AJAX验证图片或文件链接是否存在&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function validateImage(url) {      
var xmlHttp ;  
if (window.ActiveXObject)  
{  
xmlHttp = new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);  
}  
else if (window.XMLHttpRequest)  
{  
xmlHttp = new XMLHttpRequest();  
}   
xmlHttp.open(&amp;quot;Get&amp;quot;,url,false);  
xmlHttp.send();  
if(xmlHttp.status==404)  
return false;  
else  
return true;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法3：用onerror替换不存在的图片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;images/img1.jpg&amp;quot; height=&amp;quot;300&amp;quot; width=&amp;quot;800&amp;quot; onerror=&amp;quot;images/defaultImg.jpg&amp;quot;&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;解决自定义方法或其他类库与jquery的冲突&#34;&gt;解决自定义方法或其他类库与jQuery的冲突&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;//使用jquery中的jQuery.noConflict();方法即可把变量$的控制权让渡给第一个实现它的那个库或之前自定义的$方法。之后应用Jquery的时候只要将所有的$换成jQuery即可
jQuery.noConflict(); 
// 开始使用jQuery 
jQuery(&amp;quot;div p&amp;quot;).hide(); 
// 使用其他库的 $() 
$(&amp;quot;content&amp;quot;).style.display = &#39;none&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;获取iframe中文档内容&#34;&gt;获取iframe中文档内容&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;function getIframeContent(){  //获取iframe中文档内容
    var doc;
    if (document.all){ // IE 
        doc = document.frames[&amp;quot;ueditor_0&amp;quot;].document; 
    }else{ // 标准
        doc = document.getElementById(&amp;quot;ueditor_0&amp;quot;).contentDocument; 
    }
    return doc.body.innerHTML;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;子窗体调父窗体方法&#34;&gt;子窗体调父窗体方法&lt;/h3&gt;

&lt;p&gt;父窗体&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function selectProduct(commitBrand){    window.open(&amp;quot;${baseURL}/jsp/component/selectlist/SelectProductList.jsp?ecs=ecs&amp;amp;productName=productName&amp;amp;brandId=brandId&amp;amp;brandName=brandName&amp;amp;specification=specification&amp;quot;,&amp;quot;选择产品&amp;quot;,
        &amp;quot;width=1366,height=768,top=0,left=0,scrollbars=YES,resizable=yes&amp;quot;);
}
function setProductValue(ecs,productName,brandId,brandNameDesc,guige,guigeDesc,color,colorDesc,productXinghao,productXinghaoDesc,haveImei,fundCost){
        $(&amp;quot;#ecs&amp;quot;).attr(&amp;quot;value&amp;quot;,ecs);
        $(&amp;quot;#productName&amp;quot;).attr(&amp;quot;value&amp;quot;,productName);
        $(&amp;quot;#brandId&amp;quot;).attr(&amp;quot;value&amp;quot;,brandId);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;子窗体 SelectProductList.jsp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.opener.setProductValue(content.ecs,content.productName,content.zhongduanPinpai,content.zhongduanPinpaiDesc,content.guige,content.guigeDesc,content.color,content.colorDesc,content.productXinghao,content.productXinghaoDesc,content.haveImei,content.fundCost);
window.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq-ajax请求demo&#34;&gt;JQ AJAX请求demo&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(function() {
    $(&#39;#send&#39;).click(function() {
        $.ajax({
            type: &amp;quot;GET&amp;quot;, //GET或POST,
            async:true, //默认设置为true，所有请求均为异步请求。
            url: &amp;quot;http://www.idaima.com/xxxxx.php&amp;quot;,
            data: {
                username: $(&amp;quot;#username&amp;quot;).val(),
                content: $(&amp;quot;#content&amp;quot;).val()
            },
            dataType: &amp;quot;json&amp;quot;, //xml、html、script、jsonp、text
            beforeSend:function(){},
            complete:function(){},
            success: function(data) {
                alert(data)
            },
            error:function(){},
        });
    });
});


$.get(baseURL+&#39;/childorderdeal/childorderdealActAction!getWorkSati.action&#39;, { orderId: &amp;quot;NEW2018425164215552&amp;quot; }, function(data){
             if(data.code==&amp;quot;0&amp;quot;){
                 $(&#39;input:[value=&amp;quot;&#39;+data.data.code+&#39;&amp;quot;]&#39;).attr(&#39;checked&#39;,&#39;true&#39;);
             }
        },&#39;json&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq-设置ajax同步&#34;&gt;JQ 设置AJAX同步&lt;/h3&gt;

&lt;p&gt;由于$.post() 和 $.get() 默认是 异步请求，如果需要同步请求，则可以进行如下使用：&lt;br /&gt;
在$.post()前把ajax设置为同步：$.ajaxSettings.async = false;&lt;br /&gt;
在$.post()后把ajax改回为异步：$.ajaxSettings.async = true;&lt;br /&gt;
如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.ajaxSettings.async = false;  
$.post(&amp;quot;/finance/getLastTimeCard&amp;quot;, data, function(result) {  
    // 请求处理  
},&amp;quot;json&amp;quot;);  
$.ajaxSettings.async = true;  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;页面刷新篇&#34;&gt;页面刷新篇&lt;/h3&gt;

&lt;p&gt;1.刷新&lt;br /&gt;
reload 方法，该方法强迫浏览器刷新当前页面。&lt;br /&gt;
语法：location.reload([bForceGet])&lt;br /&gt;
参数： bForceGet， 可选参数， 默认为 false，从客户端缓存里取当前页。true, 则以 GET 方式，从服务端取最新的页面, 相当于客户端点击 F5(&amp;ldquo;刷新&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;replace 方法，该方法通过指定URL替换当前缓存在历史里（客户端）的项目，因此当使用replace方法之后，你不能通过“前进”和“后退”来访问已经被替换的URL。&lt;br /&gt;
语法： location.replace(URL)&lt;/p&gt;

&lt;p&gt;在实际应用的时候，重新刷新页面的时候，我们通常使用： &lt;strong&gt;location.reload()&lt;/strong&gt; 或者是 &lt;strong&gt;history.go(0) &lt;/strong&gt;来做。&lt;br /&gt;
因为这种做法就像是客户端点F5刷新页面，所以页面的method=&amp;ldquo;post&amp;rdquo;的时候，会出现&amp;rdquo;网页过期&amp;rdquo;的提示。那是因为Session的安全保护机制。&lt;br /&gt;
这里，location.replace() 就可以完成此任务。被replace的页面每次都在服务端重新生成。&lt;br /&gt;
你可以这么写： &lt;strong&gt;location.replace(location.href)&lt;/strong&gt;;&lt;/p&gt;

&lt;p&gt;2.返回并刷新页面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location.replace(document.referrer); //document.referre为r前一个页面的URL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不要用 history.go(-1)，或 history.back();来返回并刷新页面，这两种方法不会刷新页面。&lt;/p&gt;

&lt;h4 id=&#34;javascript刷新页面的几种方法&#34;&gt;Javascript刷新页面的几种方法&lt;/h4&gt;

&lt;p&gt;1    history.go(0)&lt;br /&gt;
2    location.reload()&lt;br /&gt;
3    location=location&lt;br /&gt;
4    location.assign(location)&lt;br /&gt;
5    document.execCommand(&amp;lsquo;Refresh&amp;rsquo;)&lt;br /&gt;
6    window.navigate(location)&lt;br /&gt;
7    location.replace(location)&lt;br /&gt;
8    document.URL=location.href&lt;/p&gt;

&lt;h4 id=&#34;自动刷新页面的方法&#34;&gt;自动刷新页面的方法&lt;/h4&gt;

&lt;p&gt;1.页面自动刷新：把如下代码加入&lt;head&gt;区域中,20秒刷新一次页面.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;20&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.页面自动跳转：把如下代码加入&lt;head&gt;区域中,20秒后跳转到&lt;a href=&#34;https://ianeiu.github.io/页面&#34;&gt;https://ianeiu.github.io/页面&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;20;url=https://ianeiu.github.io/&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.页面自动刷新js版&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; 
    function myrefresh(){  window.location.reload(); }
    setTimeout(&#39;myrefresh()&#39;,1000); //指定1秒刷新一次
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;窗口刷新&#34;&gt;窗口刷新&lt;/h4&gt;

&lt;p&gt;1.JS刷新框架的脚本语句&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//如何刷新包含该框架的页面用   
&amp;lt;script language=JavaScript&amp;gt;
   parent.location.reload();
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.子窗口刷新父窗口&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script language=JavaScript&amp;gt;
    self.opener.location.reload();
&amp;lt;/script&amp;gt;
//或　&amp;lt;a href=&amp;quot;javascript:opener.location.reload()&amp;quot;&amp;gt;刷新&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.如何刷新另一个框架的页面用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script language=JavaScript&amp;gt;
   parent.另一FrameID.location.reload();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.如果想关闭窗口时刷新或者想开窗时刷新的话，在&lt;body&gt;中调用以下语句即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body onload=&amp;quot;opener.location.reload()&amp;quot;&amp;gt; 开窗时刷新
&amp;lt;body onUnload=&amp;quot;opener.location.reload()&amp;quot;&amp;gt; 关闭时刷新
&amp;lt;script language=&amp;quot;javascript&amp;quot;&amp;gt;
    window.opener.document.location.reload()
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jquery对象与dom对象&#34;&gt;jQuery对象与dom对象&lt;/h3&gt;

&lt;p&gt;通过jquery的$()引用元素包括通过id、class、元素名以及元素的层级关系及dom或者xpath条件等方法，且返回的对象为jquery对象（集合对象），不能直接调用dom定义的方法。&lt;br /&gt;
转换&lt;br /&gt;
普通的dom对象一般可以通过$()转换成jquery对象。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document.getElementById(&amp;quot;msg&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于jquery对象本身是一个集合。所以如果jquery对象要转换为dom对象则必须取出其中的某一项，一般可通过索引取出。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#msg&amp;quot;)[0]，
$(&amp;quot;div&amp;quot;).eq(1)[0]，
$(&amp;quot;div&amp;quot;).get()[1]，
$(&amp;quot;td&amp;quot;)[5]

$(&amp;quot;#msg&amp;quot;).html();
$(&amp;quot;#msg&amp;quot;)[0].innerHTML;
$(&amp;quot;#msg&amp;quot;).eq(0)[0].innerHTML;
$(&amp;quot;#msg&amp;quot;).get(0).innerHTML;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取jQuery集合的某一项(获取第三个div元素的内容)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;div&amp;quot;).eq(2).html(); //调用jquery对象的方法
$(&amp;quot;div&amp;quot;).get(2).innerHTML; //调用dom的方法属性
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://ianeiu.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://ianeiu.github.io/about/</guid>
      
        <description>

&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;

&lt;p&gt;一名Java渣渣、LOL&lt;del&gt;黄金&lt;/del&gt;白银段位&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;邮箱：weimianwu@foxmail.com&lt;/li&gt;
&lt;li&gt;微信：qq747151921&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;友链&#34;&gt;友链&lt;/h3&gt;

&lt;p&gt;木有&lt;/p&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>Spring——@Value注入static属性</title>
      <link>https://ianeiu.github.io/2018/09/04/springvalue%E6%B3%A8%E5%85%A5static%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/04/springvalue%E6%B3%A8%E5%85%A5static%E5%B1%9E%E6%80%A7/</guid>
      
        <description>

&lt;h2 id=&#34;value注入static属性&#34;&gt;@Value注入static属性&lt;/h2&gt;

&lt;p&gt;方式1：&lt;br /&gt;
通过执行set方法进行参数注入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static String userName;
@Value(&amp;quot;${git.userName}&amp;quot;)
public void setUserName(String userName) {
	GitUtils.userName = userName;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方式2：&lt;br /&gt;
通过中间变量赋值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static String userName; 
@Value(&amp;quot;${git.userName}&amp;quot;)
private String userNameTmp;
 
@PostConstruct
public void init() {
	userName = userNameTmp;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>正则的运用——短信模版配置</title>
      <link>https://ianeiu.github.io/2018/09/04/%E6%AD%A3%E5%88%99%E7%9A%84%E8%BF%90%E7%94%A8%E7%9F%AD%E4%BF%A1%E6%A8%A1%E7%89%88%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/04/%E6%AD%A3%E5%88%99%E7%9A%84%E8%BF%90%E7%94%A8%E7%9F%AD%E4%BF%A1%E6%A8%A1%E7%89%88%E9%85%8D%E7%BD%AE/</guid>
      
        <description>

&lt;h2 id=&#34;短信模版的配置功能&#34;&gt;短信模版的配置功能&lt;/h2&gt;

&lt;p&gt;需求功能如下图：&lt;br /&gt;
&lt;img src=&#34;https://ianeiu.github.io/resouce/短信模版-正则/dt1.png&#34;  alt=&#34;短信模版1&#34; /&gt;
&lt;img src=&#34;https://ianeiu.github.io/resouce/短信模版-正则/dt2.png&#34;  alt=&#34;短信模版2&#34; /&gt;
&lt;img src=&#34;https://ianeiu.github.io/resouce/短信模版-正则/dt3.png&#34;  alt=&#34;短信模版3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function toExa(template){

	var now = new Date();
	var syear = now.getYear();//获取当前年份(2位)
	var year = now.getFullYear(); //获取完整的年份(4位,1970-????)
	var month = now.getMonth() &amp;lt;9?&amp;quot;0&amp;quot;+(now.getMonth()+1):(now.getMonth()+1);//获取当前月份(1-12)
	var day = now.getDate()&amp;lt;10?&amp;quot;0&amp;quot;+now.getDate():now.getDate();//获取当前日(1-31)
	var hour = now.getHours()&amp;lt;10?&amp;quot;0&amp;quot;+now.getHours():now.getHours(); //获取当前小时数(00-23)
	var minu = now.getMinutes&amp;lt;10?&amp;quot;0&amp;quot;+now.getMinutes():now.getMinutes(); //获取当前分钟数(00-59)
	var seco = now.getSeconds()&amp;lt;10?&amp;quot;0&amp;quot;+now.getSeconds():now.getSeconds(); //获取当前秒数(00-59)
	var pre_syear = syear - 1;
	var pre_year = year - 1;
	var pre_month = getLastMonth(now);
	var pre_day = getYestoday(now);
	
	template = template.replace(/{yyyy}/g,year);
	template = template.replace(/{yy}/g,syear);
	template = template.replace(/{MM}/g,month);
	template = template.replace(/{dd}/g,day);
	template = template.replace(/{HH}/g,hour);
	template = template.replace(/{mm}/g,minu);
	template = template.replace(/{ss}/g,seco);
	template = template.replace(/{MMdd}/g,month+&amp;quot;&amp;quot;+day);
	template = template.replace(/{yyyyMMdd}/g,year+&amp;quot;&amp;quot;+month+&amp;quot;&amp;quot;+day);
	template = template.replace(/{yyyyMMddHHmm}/g,year+&amp;quot;&amp;quot;+month+&amp;quot;&amp;quot;+day+&amp;quot;&amp;quot;+hour+&amp;quot;&amp;quot;+minu);
	
	template = template.replace(/{pre_yy}/g,pre_year);
	template = template.replace(/{pre_yyyy}/g,pre_year);
	template = template.replace(/{pre_MM}/g,pre_month);
	template = template.replace(/{pre_dd}/g,pre_day);
	template = template.replace(/{pre_MMdd}/g,pre_month+&amp;quot;&amp;quot;+pre_day);
	template = template.replace(/{pre_yyyyMMdd}/g,pre_year+&amp;quot;&amp;quot;+pre_month+&amp;quot;&amp;quot;+pre_day);
	template = template.replace(/{pre_yyyyMMddHHmm}/g,pre_year+&amp;quot;&amp;quot;+pre_month+&amp;quot;&amp;quot;+pre_day+&amp;quot;&amp;quot;+day+&amp;quot;&amp;quot;+hour+&amp;quot;&amp;quot;+minu);
	
	//srkVal  -  输入框(值,时间)
	template = template.replace(/[\{][f]([1-9]\d*)[\}]/g,&amp;quot;&amp;lt;input onchange=&#39;caclClick(&amp;amp;#39;num&amp;amp;#39;);&#39; id=&#39;srkVal$1&#39; type=&#39;text&#39; class=&#39;n_textInp&#39;/&amp;gt;&amp;quot;);
	template = template.replace(/[\{][z]([1-9]\d*)[\}]/g,&amp;quot;&amp;lt;input onchange=&#39;caclClick();&#39; id=&#39;srkVal$1&#39; type=&#39;text&#39; class=&#39;n_textInp&#39; valid=&#39;{must:false, fieldType:&amp;amp;#39;isPositiveInteger&amp;amp;#39;, tip:&amp;amp;#39;整数输入框&amp;amp;#39;}&#39;/&amp;gt;&amp;quot;);
	template = template.replace(/[\{][x]([1-9]\d*)[\}]/g,&amp;quot;&amp;lt;input onchange=&#39;caclClick();&#39; id=&#39;srkVal$1&#39; type=&#39;text&#39; class=&#39;n_textInp&#39; valid=&#39;{must:false, fieldType:&amp;amp;#39;isSmallInteger&amp;amp;#39;, tip:&amp;amp;#39;小数输入框&amp;amp;#39;}&#39;/&amp;gt;&amp;quot;);
	
	template = template.replace(/[\{][d][i][v][1-9]\d*[\=]([1-9]\d*)[\/]([1-9]\d*)[\/]([1-9]\d*)[\}]/g,
			&amp;quot;&amp;lt;input type=&#39;text&#39; class=&#39;n_textInp njsk&#39; onclick=&#39;caclChuFaValToJSK(this,&amp;amp;#39;$1&amp;amp;#39;,&amp;amp;#39;$2&amp;amp;#39;,&amp;amp;#39;$3&amp;amp;#39;)&#39; readonly/&amp;gt;&amp;quot;);
	
	template = template.replace(/[\{][s][u][b][t][1-9]\d*[\=]([1-9])\d*[\/]([1-9])\d*[\/]([d|h|m])[\}]/g,
			&amp;quot;&amp;lt;input type=&#39;text&#39; class=&#39;n_textInp sjsk&#39; onclick=&#39;caclTimeValToJSK(this,&amp;amp;#39;$1&amp;amp;#39;,&amp;amp;#39;$2&amp;amp;#39;,&amp;amp;#39;$3&amp;amp;#39;)&#39; readonly/&amp;gt;&amp;quot;);
	
	template = template.replace(/[\{][d]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:100px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY-MM-DD&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	template = template.replace(/[\{][d][t]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:160px;&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY-MM-DD hh:mm:ss&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	template = template.replace(/[\{][d][t][\-][s]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:140px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY-MM-DD hh:mm&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	template = template.replace(/[\{][d][t][\-][m][\-][s]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:140px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY-MM-DD hh:00&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	
	template = template.replace(/[\{][d][\-][c][n]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:130px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY年MM月DD日&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	template = template.replace(/[\{][d][t][\-][c][n]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:220px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY年MM月DD日 hh时mm分ss秒&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	template = template.replace(/[\{][d][t][\-][s][\-][c][n]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:190px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY年MM月DD日 hh时mm分&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);
	template = template.replace(/[\{][d][t][\-][m][\-][s][\-][c][n]([1-9]\d*)[\}]/g,&#39;&amp;lt;input id=&amp;quot;srkVal$1&amp;quot; type=&amp;quot;text&amp;quot; class=&amp;quot;n_textInp&amp;quot; style=&amp;quot;width:160px&amp;quot; onclick=&amp;quot;laydate({istime: true, format: &amp;amp;#39;YYYY年MM月DD日 hh时&amp;amp;#39;,choose:checkDate})&amp;quot;/&amp;gt;&#39;);

	$(&amp;quot;#tExaDiv&amp;quot;).html(template);
}

function checkDate(){
	caclClick(&#39;date&#39;);
}

function caclClick(type){
	if(type==&#39;num&#39;){
		$(&#39;.njsk&#39;).trigger(&amp;quot;click&amp;quot;);
	}else if(type==&#39;date&#39;){
		$(&#39;.sjsk&#39;).trigger(&amp;quot;click&amp;quot;);
	}
}

//除法计算并将值放入计算框
function caclChuFaValToJSK(obj,n1,n2,weiShu){
	$(obj).val(&amp;quot;&amp;quot;);

	var one =&#39;&#39;;//序号a的值
	var two =&#39;&#39;;//序号b的值
	
	one = $(&#39;#srkVal&#39;+n1).val();
	two = $(&#39;#srkVal&#39;+n2).val();
	
	var finaVal = &#39;&#39;;//计算后的值
	if(one==&amp;quot;&amp;quot;||two==&amp;quot;&amp;quot;){
		$(obj).val(&amp;quot;&amp;quot;);
		return;
	}else{
		finaVal=(parseFloat(one)/parseFloat(two)).toFixed(weiShu);
	}
	$(obj).val(finaVal);
}

//计算并将值放入计算框
function caclTimeValToJSK(obj,d1,d2,oper){
	var eTime =&#39;&#39;;//序号a的值
	var sTime =&#39;&#39;;//序号b的值
	
	eTime = $(&#39;#srkVal&#39;+d1).val();
	sTime = $(&#39;#srkVal&#39;+d2).val();
	
	var finalVal =&#39;&#39;;
	if(eTime==&amp;quot;&amp;quot;||sTime==&amp;quot;&amp;quot;){
		$(obj).val(&amp;quot;&amp;quot;);
		return;
	}else{
		switch (oper) {
		    case (&amp;quot;d&amp;quot;):  //日
		    	finalVal = GetDateDiff(sTime,eTime,&#39;day&#39;)+&#39;天&#39;;
		    	break;
		    case (&amp;quot;h&amp;quot;):  //时
		    	finalVal = GetDateDiff(sTime,eTime,&#39;hour&#39;)+&#39;小时&#39;;
		        break;
		    case (&amp;quot;m&amp;quot;):  //分
		    	finalVal = GetDateDiff(sTime,eTime,&#39;minute&#39;)+&#39;分钟&#39;;
		        break;
		    default: 
		       console.log(&amp;quot;caclTimeValToJSK传入无效操作参数&amp;quot;+oper);
		}
	}
	$(obj).val(finalVal);
}

//获取上个月
function getLastMonth(date){      
    var daysInMonth = new Array([0],[31],[28],[31],[30],[31],[30],[31],[31],[30],[31],[30],[31]);      
    var strYear = date.getFullYear();        
    //var strDay = date.getDate();        
    var strMonth = date.getMonth()+1;      
    if(strYear%4 == 0 &amp;amp;&amp;amp; strYear%100 != 0){      
       daysInMonth[2] = 29;      
    }      
    if(strMonth - 1 == 0)      
    {      
       strYear -= 1;      
       strMonth = 12;      
    }      
    else     
    {      
       strMonth -= 1;      
    }      
    //strDay = daysInMonth[strMonth] &amp;gt;= strDay ? strDay : daysInMonth[strMonth];      
    if(strMonth&amp;lt;10)        
    {        
       strMonth=&amp;quot;0&amp;quot;+strMonth;        
    }      
    /* if(strDay&amp;lt;10)        
    {        
       strDay=&amp;quot;0&amp;quot;+strDay;        
    }  */
    //datastr = strYear+&amp;quot;-&amp;quot;+strMonth+&amp;quot;-&amp;quot;+strDay;      
    datastr = strMonth;      
    return datastr;      
}

//获取昨天
function getYestoday(date){          
   var yesterday_milliseconds=date.getTime()-1000*60*60*24;           
   var yesterday = new Date();           
   yesterday.setTime(yesterday_milliseconds);           
           
  // var strYear = yesterday.getFullYear();        
   var strDay = yesterday.getDate();        
  // var strMonth = yesterday.getMonth()+1;      
  /*  if(strMonth&amp;lt;10) 
   {        
       strMonth=&amp;quot;0&amp;quot;+strMonth;        
   }   */      
   //datastr = strYear+&amp;quot;-&amp;quot;+strMonth+&amp;quot;-&amp;quot;+strDay;      
   datastr = strDay;      
   return datastr;      
}   

//获取时间差
function GetDateDiff(startTime, endTime, diffType) {
    //转换时间格式，如xxxx-xx-xx转换为 xxxx/xx/xx的格式 
    startTime = startTime.replace(/\-/g, &amp;quot;/&amp;quot;).replace(/[\u5e74|\u6708]/g,&amp;quot;/&amp;quot;).replace(/[\u65e5]/g,&amp;quot;&amp;quot;);
    endTime = endTime.replace(/\-/g, &amp;quot;/&amp;quot;).replace(/[\u5e74|\u6708]/g,&amp;quot;/&amp;quot;).replace(/[\u65e5]/g,&amp;quot;&amp;quot;);
    
    if(startTime.endWith(&#39;时&#39;)){
    	startTime = startTime.replace(/[\u65f6]/g,&amp;quot;:00&amp;quot;);
	}else if(startTime.endWith(&#39;分&#39;)){
		startTime = startTime.replace(/[\u65f6]/g,&amp;quot;:&amp;quot;).replace(/[\u5206]/g,&amp;quot;&amp;quot;);
	}else if(startTime.endWith(&#39;秒&#39;)){
		startTime = startTime.replace(/[\u65f6|\u5206]/g,&amp;quot;:&amp;quot;).replace(/[\u79d2]/g,&amp;quot;&amp;quot;);
	}
	
	if(endTime.endWith(&#39;时&#39;)){
		endTime = endTime.replace(/[\u65f6]/g,&amp;quot;:00&amp;quot;);
	}else if(endTime.endWith(&#39;分&#39;)){
		endTime = endTime.replace(/[\u65f6]/g,&amp;quot;:&amp;quot;).replace(/[\u5206]/g,&amp;quot;&amp;quot;);
	}else if(endTime.endWith(&#39;秒&#39;)){
		endTime = endTime.replace(/[\u65f6|\u5206]/g,&amp;quot;:&amp;quot;).replace(/[\u79d2]/g,&amp;quot;&amp;quot;);
	}
    
    //将计算间隔类性字符转换为小写
    diffType = diffType.toLowerCase();
    var sTime =new Date(startTime); //开始时间
    var eTime =new Date(endTime); //结束时间
    //作为除数的数字
    var timeType =1;
    switch (diffType) {
        case&amp;quot;second&amp;quot;:
            timeType =1000;
        break;
        case&amp;quot;minute&amp;quot;:
            timeType =1000*60;
        break;
        case&amp;quot;hour&amp;quot;:
            timeType =1000*3600;
        break;
        case&amp;quot;day&amp;quot;:
            timeType =1000*3600*24;
        break;
        default:
        break;
    }
    return parseInt((eTime.getTime() - sTime.getTime()) / parseInt(timeType));
}

String.prototype.endWith=function(s){
  if(s==null||s==&amp;quot;&amp;quot;||this.length==0||s.length&amp;gt;this.length)
     return false;
  if(this.substring(this.length-s.length)==s)
     return true;
  else
     return false;
  return true;
 }

 String.prototype.startWith=function(s){
  if(s==null||s==&amp;quot;&amp;quot;||this.length==0||s.length&amp;gt;this.length)
   return false;
  if(this.substr(0,s.length)==s)
     return true;
  else
     return false;
  return true;
 }
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>正则贪婪模式与懒惰模式(扩展元字符)</title>
      <link>https://ianeiu.github.io/2018/09/04/%E6%AD%A3%E5%88%99%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%87%92%E6%83%B0%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95%E5%85%83%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/04/%E6%AD%A3%E5%88%99%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%87%92%E6%83%B0%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95%E5%85%83%E5%AD%97%E7%AC%A6/</guid>
      
        <description>

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;之前做过一个短信模版的配置功能，需要用到大量的正则判断，其中有一个方法涉及到正则贪婪模式与懒惰模式，今天刚好抽时间整理下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
/**
 * 创建文本预览（取出input值替换input）
 */
function createContentPreview(){
	var vals=[];
	$(&amp;quot;#tExaDiv&amp;quot;).find(&amp;quot;input&amp;quot;).each(function(){
		var val=$(this).val();
		vals.push(val);
	})
	
	var html=$(&amp;quot;#tExaDiv&amp;quot;).html();
	var reg=/[/&amp;lt;][i][n][p][u][t][^]*?[&amp;gt;]/;
	for(var i=0;i&amp;lt;vals.length;i++){
		html=html.replace(reg,vals[i]);
	}
	$(&amp;quot;#contentPreview&amp;quot;).html(html);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;懒惰模式&#34;&gt;懒惰模式&lt;/h2&gt;

&lt;p&gt;像上面代码的匹配就是正则表达式的懒惰模式，对字符串进行最小长度匹配。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;栗子&lt;/kbd&gt;&lt;br /&gt;
字符串：&lt;code&gt;&amp;lt;span&amp;gt;321&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;12&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;br /&gt;
正则表达式：&lt;code&gt;&amp;lt;span&amp;gt;.*?&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;br /&gt;
匹配结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;共找到 2 处匹配：  
	&amp;lt;span&amp;gt;321&amp;lt;/span&amp;gt; 
	&amp;lt;span&amp;gt;12&amp;lt;/span&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;贪婪模式&#34;&gt;贪婪模式&lt;/h2&gt;

&lt;p&gt;贪婪模式则是对字符串进行最大长度匹配。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;栗子&lt;/kbd&gt;&lt;br /&gt;
字符串：&lt;code&gt;&amp;lt;span&amp;gt;321&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;12&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;br /&gt;
正则表达式：&lt;code&gt;&amp;lt;span&amp;gt;.*&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;br /&gt;
匹配结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;共找到 1 处匹配：
&amp;lt;span&amp;gt;321&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;12&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;总结&#34;&gt;总结&lt;/h4&gt;

&lt;p&gt;正则表达式，表示字符串重复个数元字符，&amp;rsquo;?,+,*,{}&amp;rsquo; 默认都会选择贪婪模式，会最大长度匹配字符串，而要切换到懒惰模式，就只是在该元字符，后面加多一个”?” 即可。&lt;/p&gt;

&lt;h2 id=&#34;元字符&#34;&gt;元字符&lt;/h2&gt;

&lt;p&gt;常见元字符及其含义&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;符号               含义
————————————————————————————————————————————————————
.                  匹配除换行符之外的任意字符
^                  匹配字符的开始位置
$                  匹配字符的结束位置
*                  匹配0次，1次或多次前面的原子
?                  匹配0次或1次前面的原子
+                  匹配1次或多次前面的原子
{n}                前面的原子恰好出现n次
{n,}               前面的原子至少出现n次
{n,m}              前面的原子至少出现n次，至多出现m次
|                  模式选择符
()                 模式单元符   
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>侃侃而谈——WebService及框架简介</title>
      <link>https://ianeiu.github.io/2018/09/03/%E4%BE%83%E4%BE%83%E8%80%8C%E8%B0%88webservice%E5%8F%8A%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/03/%E4%BE%83%E4%BE%83%E8%80%8C%E8%B0%88webservice%E5%8F%8A%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</guid>
      
        <description>

&lt;h1 id=&#34;webservice简介&#34;&gt;WebService简介&lt;/h1&gt;

&lt;p&gt;webService（又名XML Web Service）是一种跨语言跨操作系统的远程调用技术（是一种可以接收从Internet或者Intranet上的其它系统中传递过来的请求，轻量级的独立的通讯技术）。&lt;/p&gt;

&lt;h3 id=&#34;webservice平台技术&#34;&gt;WebService平台技术&lt;/h3&gt;

&lt;h4 id=&#34;xml-xsd&#34;&gt;XML+XSD&lt;/h4&gt;

&lt;p&gt;WebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，以及服务对象的 返回结果是什么）。XML是WebService平台中表示数据的格式。除了易于建立和易于分析外，XML主要的优点在于它既是平台无关的，又是厂商无关的。无关性是比技术优越性更重要的：软件厂商是不会选择一个由竞争对手所发明的技术的。&lt;/p&gt;

&lt;h4 id=&#34;soap&#34;&gt;SOAP&lt;/h4&gt;

&lt;p&gt;SOAP是&amp;rdquo;简单对象访问协议&amp;rdquo;，是一种简单的、基于HTTP和XML的协议, 用于在WEB上交换结构化的数据。&lt;br /&gt;
soap消息：请求消息和响应消息&lt;/p&gt;

&lt;h4 id=&#34;wsdl&#34;&gt;WSDL&lt;/h4&gt;

&lt;p&gt;WSDL是webservice定义语言, 对应.wsdl文档, 一个webservice会对应一个唯一的wsdl文档, 定义了客户端与服务端发送请求和响应的数据格式和过程。&lt;/p&gt;

&lt;h3 id=&#34;工作调用原理&#34;&gt;工作调用原理&lt;/h3&gt;

&lt;p&gt;对客户端而言，我们给这各类WebService客户端API传递wsdl文件的url地址，这些API就会创建出底层的代理类，我们调用 这些代理，就可以访问到webservice服务。&lt;/p&gt;

&lt;p&gt;代理类把客户端的方法调用变成soap格式的请求数据再通过HTTP协议发出去，并把接收到的soap 数据变成返回值返回。&lt;/p&gt;

&lt;p&gt;对服务端而言，各类WebService框架的本质就是一个大大的Servlet，当远程调用客户端给它通过http协议发送过来 soap格式的请求数据时，它分析这个数据，就知道要调用哪个java类的哪个方法，于是去查找或创建这个对象，并调用其方法，再把方法返回的结果包装成 soap格式的数据，通过http响应消息回给客户端。&lt;/p&gt;

&lt;h1 id=&#34;框架简介&#34;&gt;框架简介&lt;/h1&gt;

&lt;h3 id=&#34;jws&#34;&gt;JWS&lt;/h3&gt;

&lt;p&gt;JWS是Java语言对WebService服务的一种实现，用来开发和发布服务。而从服务本身的角度来看JWS服务是没有语言界限的。但是Java语言为Java开发者提供便捷发布和调用WebService服务的一种途径。&lt;/p&gt;

&lt;h3 id=&#34;axis2&#34;&gt;Axis2&lt;/h3&gt;

&lt;p&gt;Axis2是从Axis1.x系列发展而来，不过它从底层全部重新实现，使用了新的扩展性更好模块架构。&lt;/p&gt;

&lt;p&gt;Axis2是Apache下的一个重量级WebService框架，准确说它是一个Web Services / SOAP / WSDL 的引擎，是WebService框架的集大成者，它能不但能制作和发布WebService，而且可以生成Java和其他语言版WebService客户端和服务端代码。这是它的优势所在。但是，这也不可避免的导致了Axis2的复杂性，使用过的开发者都知道，它所依赖的包数量和大小都是很惊人的，打包部署发布都比较麻烦，不能很好的与现有应用整合为一体。但是如果你要开发Java之外别的语言客户端，Axis2提供的丰富工具将是你不二的选择。&lt;/p&gt;

&lt;h3 id=&#34;xfire&#34;&gt;XFire&lt;/h3&gt;

&lt;p&gt;XFire是一个高性能的WebService框架，它的响应时间是Axis1.3的1/2到1/5，在Java6之前，它的知名度甚至超过了Apache的Axis2，XFire的优点是开发方便，与现有的Web整合很好，可以融为一体，并且开发也很方便。但是对Java之外的语言，没有提供相关的代码工具。XFire后来被Apache收购了，原因是它太优秀了，收购后，随着Java6 JWS的兴起，开源的WebService引擎已经不再被看好，渐渐的都败落了。现在估计只有老旧项目还在使用。&lt;/p&gt;

&lt;h3 id=&#34;cxf&#34;&gt;CXF&lt;/h3&gt;

&lt;p&gt;CXF是Apache旗下一个重磅的SOA简易框架，它实现了ESB（企业服务总线），支持可集成spring。CXF是XFire和Celtix项目的结合产品，是XFire经过改造后形成的，就像目前的Struts2来自WebWork一样。可以看出XFire的命运会和WebWork的命运一样，最终会淡出人们的视线。CXF不但是一个优秀的Web Services / SOAP / WSDL 引擎，也是一个不错的ESB总线，为SOA的实施提供了一种选择方案，当然他不是最好的，它仅仅实现了SOA架构的一部分。&lt;/p&gt;

&lt;h3 id=&#34;axis2与cxf比较&#34;&gt;Axis2与CXF比较&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;通用结构WS-Policy等，数据并对XMLBeans等，Axis2与CXF后面的几个版本基本都支持了，差别不大。&lt;/li&gt;
&lt;li&gt;CXF可以很好支持Spring。Axis2不能&lt;/li&gt;
&lt;li&gt;Axis2支持多语言-除了Java,他还支持C/C++版本。
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;从开发者的角度，两个框架的特性相当的不同。&lt;br /&gt;
Axis2的开发方式类似一个小型的应用服务器，Axis2的开发包要以WAR的形式部署到Servlet容器中，比如Tomcat，通过这些容器可以对工作中的Web Service进行很好的监控和管理。Axis2的Web administrion模块可以让我们动态的配置Axis2.一个新的服务可以上载，激活，使之失效，修改web服务的参数。管理UI也可以管理一个或者多个处于运行状态的服务。这种界面化管理方式的一个弊端是所有在运行时修改的参数没有办法保存，因为在重启动之后，你所做的修改就会全部失效。Axis2允许自己作为独立的应用来发布Web Service，并提供了大量的功能和一个很好的模型，这个模型可以通过它本身的架构（modular architecture）不断添加新的功能。有些开发人员认为这种方式对于他们的需求太过于繁琐。这些开发人员会更喜欢CXF。&lt;br /&gt;
CXF更注重开发人员的工效（ergonomics）和嵌入能力（embeddability）。大多数配置都可以API来完成，替代了比较繁琐的XML配置文件， Spring的集成性经常的被提及，CXF支持Spring2.0和CXF&amp;rsquo;s API和Spring的配置文件可以非常好的对应。CXF强调代码优先的设计方式（code-first design)，使用了简单的API使得从现有的应用开发服务变得方便。&lt;br /&gt;
不过你选择Axis2还是CXF，你都可以从开源社区得到大量的帮助。这两个框架都有商业公司提供服务，WSO2提供AXIS2的支持，Iona提供CXF的支持。这两公司都有很活跃的开发者社区。&lt;/p&gt;

&lt;h3 id=&#34;如何选择&#34;&gt;如何选择？&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;如果应用程序需要多语言的支持，Axis2 应当是首选了；&lt;/li&gt;
&lt;li&gt;如果应用程序侧重JAVA并希望和Spring集，Apache CXF 是一种更好的选择，特别对嵌入式的 Web Services 来说；&lt;/li&gt;
&lt;li&gt;如果应用程序没有新的特性需要的话，就仍用原来项目所用的框架，比如 Axis1，XFire，Celtrix或 BEA 等等厂家自己的 Web Services 实现。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;引用&#34;&gt;引用&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/growup/archive/2011/03/06/1972464.html&#34; target=&#34;blank&#34;&gt;每天进步一点点~&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://www.cnblogs.com/xdp-gacl/p/4048937.html&#34; target=&#34;blank&#34;&gt;孤傲苍狼&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>SpringMVC的九大组件</title>
      <link>https://ianeiu.github.io/2018/08/30/springmvc%E7%9A%84%E4%B9%9D%E5%A4%A7%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/30/springmvc%E7%9A%84%E4%B9%9D%E5%A4%A7%E7%BB%84%E4%BB%B6/</guid>
      
        <description>

&lt;h1 id=&#34;springmvc的九大组件&#34;&gt;SpringMVC的九大组件&lt;/h1&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;建议先阅读 &lt;a href=&#34;https://ianeiu.github.io/2018/08/30/springmvc%E7%9A%84%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/&#34;&gt;SpringMVC的运行流程&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;组件&#34;&gt;组件&lt;/h2&gt;

&lt;h3 id=&#34;handlermapping&#34;&gt;HandlerMapping&lt;/h3&gt;

&lt;p&gt;处理器映射器:根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet&lt;/p&gt;

&lt;h3 id=&#34;handleradapter&#34;&gt;HandlerAdapter&lt;/h3&gt;

&lt;p&gt;适配器。因为SpringMVC中的Handler可以是任意的形式,但是Servlet需要的处理方法的结构却是固定的，都是以request和response为参数的方法。HandlerAdapter的作用就是让固定的Servlet处理方法调用Handler（Controller）来进行处理。&lt;/p&gt;

&lt;p&gt;有篇文章总结的很好：Handler是用来干活的工具；HandlerMapping用于根据需要干的活找到相应的工具；HandlerAdapter是使用工具干活的人。&lt;/p&gt;

&lt;h3 id=&#34;handlerexceptionresolver&#34;&gt;HandlerExceptionResolver&lt;/h3&gt;

&lt;p&gt;异常处理:自定义异常处理类继承此类或其子类，实现resolveException方法。如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Component
public class GlobalExceptionResolver implements HandlerExceptionResolver {
	...
	/**
	 * 针对请求处理异常
	 */
	@Override
	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler,
			Exception ex) {
		boolean isHttpApi = isHttpApi(handler);
		HandleResult result = handleException(ex);
		if (isReturnReponseBody(handler) || isHttpApi) {
			if(isHttpApi){
				result =  apiHandleException(ex);
			}
			
			ModelAndView modelAndView = new ModelAndView();
			//处理异常
			response.setContentType(&amp;quot;application/json;charset=UTF-8&amp;quot;);
			byte[] bytes = JSON.toJSONBytes(Result.fail(result.getCode(), result.getMessage()), SerializerFeature.DisableCircularReferenceDetect, SerializerFeature.WriteMapNullValue);
			try {
				response.getOutputStream().write(bytes);
				response.getOutputStream().flush();
			} catch (IOException e) {
				log.error(&amp;quot;打印错误信息出错!&amp;quot;, e);
			}
			modelAndView.clear();
			return modelAndView;
		}else {
			Map&amp;lt;String, String&amp;gt; model = Maps.newHashMap();
			model.put(&amp;quot;code&amp;quot;, result.getCode());
			model.put(&amp;quot;message&amp;quot;, result.getMessage());
			return new ModelAndView(&amp;quot;500&amp;quot;, model);
		}
	}
	...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;viewresolver&#34;&gt;ViewResolver&lt;/h3&gt;

&lt;p&gt;视图解析器：当Controller将请求处理结果放入到ModelAndView中以后，DispatcherServlet会根据ModelAndView选择合适的视图进行渲染。ViewResolver接口有众多实现类，根据viewName创建合适类型的View实现。配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;bean class=&amp;quot;org.Springframework.web.servlet.view.InternalResourceViewResolve&amp;quot;&amp;gt;
	&amp;lt;property name=&amp;quot;prefix&amp;quot; value=&amp;quot;/WEB-INF/views/&amp;quot; /&amp;gt;
	&amp;lt;property name=&amp;quot;suffix&amp;quot; value=&amp;quot;.jsp&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;requesttoviewnametranslator&#34;&gt;RequestToViewNameTranslator&lt;/h3&gt;

&lt;p&gt;当Controller处理器方法没有返回一个View对象或逻辑视图名称，并且在该方法中没有直接往response的输出流里面写数据的时候，Spring就会采用约定好的方式提供一个逻辑视图名称。可通过实现接口org.Springframework.web.servlet.RequestToViewNameTranslator接口的getViewName方法来实现。&lt;/p&gt;

&lt;h3 id=&#34;localeresolver&#34;&gt;LocaleResolver&lt;/h3&gt;

&lt;p&gt;国际化配置&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring的国际化配置三种方式

&lt;ul&gt;
&lt;li&gt;基于URL参数的配置：通过URL参数来控制国际化

&lt;ol&gt;
&lt;li&gt;页面： &lt;code&gt;&amp;lt;a href=&amp;quot;myTest.jsp?locale=zh_CN&amp;quot;&amp;gt;简体中文&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置文件：&lt;code&gt;&amp;lt;bean id=&amp;quot;localeResolver&amp;quot; class=&amp;quot;org.Springframework.web.servlet.i18n.AcceptHeaderLocaleResolver&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;基于session的配置：通过检验用户会话中预置的属性来解析区域，最常用的是根据用户本次会话过程中的语言设定决定语言种类，如果该会话不存在，它会根据accept-language HTTP头部确定默认区域。配置&lt;br/&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;localeResolver&amp;quot; class=&amp;quot;org.Springframework.web.servlet.i18n.SessionLocaleResolver&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;基于Cookie的国际化配置：用于通过浏览器的cookie设置取得Locale对象，这种策略在应用程序不支持会话或者状态必须保存在客户端时有用。&lt;br/&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;localeResolver&amp;quot; class=&amp;quot;org.Springframework.web.servlet.i18n.CookieLocaleResolver&amp;quot;/&amp;gt;&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;themeresolver&#34;&gt;ThemeResolver&lt;/h3&gt;

&lt;p&gt;解析主题。一个主题就是一组静态资源（比如样式表、图片等），它们可以影响应用程序的视觉效果。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SpringMVC中跟主题相关的类

&lt;ul&gt;
&lt;li&gt;ThemeResolver:主题解析器&lt;/li&gt;
&lt;li&gt;ThemeSource:主题资源&lt;/li&gt;
&lt;li&gt;Theme:主题接口&lt;/li&gt;
&lt;li&gt;ThemeChangeInterceptor:根据用户请求来改变主题(需要在handlerMapping中配置拦截器&lt;br/&gt;&lt;code&gt;&amp;lt;property name=&amp;quot;interceptors&amp;quot;&amp;gt;&amp;lt;list&amp;gt;&amp;lt;ref local=&amp;quot;themeChangeInterceptor&amp;quot; /&amp;gt;&amp;lt;/list&amp;gt;&amp;lt;/property&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ThemeResolver子类

&lt;ul&gt;
&lt;li&gt;AbstractThemeResolver:SessionThemeResolver和FixedThemeResolver继承的抽象类&lt;/li&gt;
&lt;li&gt;SessionThemeResolver:用户的主题保存在HTTP session中&lt;/li&gt;
&lt;li&gt;CookieThemeResolver:用于实现用户所选的主题，以cookie的形式存放在客户端的机器上&lt;/li&gt;
&lt;li&gt;FixedThemeResolver:用于选择一个固定的主题
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;multipartresolver&#34;&gt;MultipartResolver&lt;/h3&gt;

&lt;p&gt;MultipartResolver 用于处理文件上传，当收到请求时 DispatcherServlet 的 checkMultipart() 方法会调用 MultipartResolver 的 isMultipart() 方法判断请求中是否包含文件。如果请求数据中包含文件，则调用 MultipartResolver 的 resolveMultipart() 方法对请求的数据进行解析，然后将文件数据解析成 MultipartFile 并封装在 MultipartHttpServletRequest (继承了 HttpServletRequest) 对象中，最后传递给 Controller.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MultipartResolver子类

&lt;ul&gt;
&lt;li&gt;CommonsMultipartResolver：使用 commons Fileupload来处理 multipart请求，所以在使用时，必须要引入相应的jar包。而像SpringBoot是不支持CommonsMultipartResolver&lt;/li&gt;
&lt;li&gt;StandardServletMultipartResolver：基于Servlet3.0来处理multipart请求的，所以不需要引用其他jar包，从Tomcat7.0.x的版本开始就支持 Servlet 3.0了&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>SpringMVC的运行流程</title>
      <link>https://ianeiu.github.io/2018/08/30/springmvc%E7%9A%84%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/30/springmvc%E7%9A%84%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid>
      
        <description>

&lt;h2 id=&#34;springmvc的运行流程&#34;&gt;SpringMVC的运行流程&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://ianeiu.github.io/resouce/SpringMVC的运行流程.png&#34;  alt=&#34;SpringMVC的运行流程&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用户发送请求至前置控制器DispatcherServlet&lt;/li&gt;
&lt;li&gt;DispatcherServlet收到请求调用HandlerMapping处理器映射器。&lt;/li&gt;
&lt;li&gt;处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。&lt;/li&gt;
&lt;li&gt;DispatcherServlet通过HandlerAdapter处理器适配器调用处理器&lt;/li&gt;
&lt;li&gt;执行处理器/后端控制器Controller&lt;/li&gt;
&lt;li&gt;Controller执行完成返回ModelAndView&lt;/li&gt;
&lt;li&gt;HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet&lt;/li&gt;
&lt;li&gt;DispatcherServlet将ModelAndView传给视图解析器ViewReslover&lt;/li&gt;
&lt;li&gt;ViewReslover解析后返回具体View&lt;/li&gt;
&lt;li&gt;DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。&lt;/li&gt;
&lt;li&gt;DispatcherServlet响应用户。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从上面可以看出，DispatcherServlet有接收请求，响应结果，转发等作用。有了DispatcherServlet之后，可以减少组件之间的耦合度。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Java基础题（Integer）</title>
      <link>https://ianeiu.github.io/2018/08/29/java%E5%9F%BA%E7%A1%80%E9%A2%98integer/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/29/java%E5%9F%BA%E7%A1%80%E9%A2%98integer/</guid>
      
        <description>&lt;p&gt;翻了翻之前收藏的文章，找到一段比较有意思的代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Integer a = 1000,b=1000;
Integer c = 100,d=100;    
@Test
public void testIntegerDD(){
    System.out.println(a==b);//false  
    System.out.println(c==d);//true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行代码，我们会得到 false  true。这道题笔试用经常出现，原理也很简单
,可看Integer源码valueOf(int i)方法&lt;br /&gt;
    public static Integer valueOf(int i) {
        if (i &amp;gt;= IntegerCache.low &amp;amp;&amp;amp; i &amp;lt;= IntegerCache.high)
        return IntegerCache.cache[i + (-IntegerCache.low)];
        return new Integer(i);
    }&lt;/p&gt;

&lt;p&gt;接下来，简单的扩展几个Integer的关系运算符==的比较。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Test
public void testIntegerDD(){

    Integer a = 1000,b=1000;
    Integer c = 100,d=100;   
    Integer e = new Integer(100);
    Integer f = new Integer(100);
    int g = 1000;
    Integer h = new Integer(1000);  


    //1、进行自动装箱操作；2、Integer中把-128-127 缓存了下来
    System.out.println(a==b);//false  
    System.out.println(c==d);//true

    //这里并不是用的缓存，而是new创建的对象存放在堆内存中，俩个变量指向不同引用，所以结果是false
    System.out.println(e==f);//false
    //当int和Integer进行==比较的时候，Java会把Integer进行自动拆箱为int类型的值
    System.out.println(g==h);//true

    //进行自动装箱操作
    System.out.println(c==e);//false
    System.out.println(a==h);//false
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Java基础题（String）</title>
      <link>https://ianeiu.github.io/2018/08/29/java%E5%9F%BA%E7%A1%80%E9%A2%98string/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/29/java%E5%9F%BA%E7%A1%80%E9%A2%98string/</guid>
      
        <description>&lt;p&gt;翻了翻之前收藏的文章，又找到一段比较有意思的代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Test
public void testStringDD() {
    String s1 = &amp;quot;hello&amp;quot;;
    String s2 = &amp;quot;hello&amp;quot;;
    String s3 = new String(&amp;quot;hello&amp;quot;);

    System.out.println(s1==s2); // true
    System.out.println(s1==s3); // false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文章解释：&lt;br /&gt;
一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配，而堆内存中则存放new出来的对象和数组。然而除此之外还有一块区域叫做常量池。&lt;br /&gt;
像我们通常想String s1 = &amp;ldquo;hello&amp;rdquo;; 这样申明的字符串对象，其值就是存储在常量池中。&lt;br /&gt;
当我们创建String s1 =&amp;ldquo;hello&amp;rdquo;这样一个对象之后，&amp;rdquo;hello&amp;rdquo;就存储到了常量池（也可叫做字符串池）中，当我们创建引用String s2  = &amp;ldquo;hello&amp;rdquo; 的时候，Java底层会优先在常量池中查找是否存在&amp;rdquo;hello&amp;rdquo;，如果存在则让s2指向这个值，不会重新创建，如果常量池中没有则创建并添加的池中。这就是为什么答案是true 和false的原因。&lt;/p&gt;

&lt;p&gt;接下来，还是简单的扩展几个String的关系运算符==的比较。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Test
public void testStringDD() {
    String s1 = &amp;quot;hello&amp;quot;;
    String s2 = &amp;quot;hello&amp;quot;;
    String s3 = new String(&amp;quot;hello&amp;quot;);

    //都存储在常量池中,指向同一常量
    System.out.println(s1==s2); // true
    //存储在常量池中,存储在堆内存中
    System.out.println(s1==s3); // false

    String s4 = &amp;quot;helloo&amp;quot;;
    /**
     * 会重新在常量池创建常量（String不可变属性）
     */
    String s5 = s1+&amp;quot;o&amp;quot;;
    //都存储在常量池中,指向不同常量
    System.out.println(s4 == s5); // false

    //hello
    String s6 = s4.substring(0, s4.length() - 1);
    //substring返回的也是new出来的String对象
    System.out.println(s1 == s6); // false
    System.out.println(s3 == s6); // false
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Java基础题（内部类与final）</title>
      <link>https://ianeiu.github.io/2018/08/29/java%E5%9F%BA%E7%A1%80%E9%A2%98%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8Efinal/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/29/java%E5%9F%BA%E7%A1%80%E9%A2%98%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8Efinal/</guid>
      
        <description>&lt;p&gt;翻了翻之前收藏的文章，又又找到一段比较有意思的代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void mRun(final String name){
    new Runnable() {
        public void run() {
            try {
              Thread.sleep(1000);
           } catch (InterruptedException e) {
             // TODO Auto-generated catch block
            e.printStackTrace();
           }  
           System.out.println(name);
        }
    }.start();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文章解释：&lt;br /&gt;
这种代码相信大家写过很多，当内部类访问局部变量的时候，需要在局部变量前加final修饰符，不然编译器就会报错。通常我们也是这么干的。&lt;br /&gt;
为什么要加final修饰符？&lt;br /&gt;
首先内部类的生命周期是成员级别的，而局部变量的生命周期实在方法体之类。也就是说会出现这样一种情况，当mRun方法执行，new 的线程运行，新线程里面会睡一秒。&lt;br /&gt;
主线程会继续执行，mRun执行完毕，name属性生命周期结束。1秒之后，Syetem.out.printh(name)执行。然而此时name已经寿终正寝，不在内存中了。&lt;br /&gt;
Java就是为了杜绝这种错误，严格要求内部类中方位局部变量，必须使用final关键字修饰。&lt;br /&gt;
局部变量被final修饰之后，此时会在内存中保有一份局部变得的复制品，当内部类访问的时候其实访问的是这个复制品。这就好像是把局部变量的生命周期变长了。&lt;br /&gt;
说到底还是Java工程师提前把这个坑给我们填了，不然不知道又会有多少小伙伴会为了内部类局部变量而发愁了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Spring常用注解</title>
      <link>https://ianeiu.github.io/2018/08/29/spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/29/spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</guid>
      
        <description>

&lt;h2 id=&#34;属性注入&#34;&gt;属性注入&lt;/h2&gt;

&lt;h3 id=&#34;autowired&#34;&gt;@Autowired&lt;/h3&gt;

&lt;p&gt;自动装配，可消除代码里的getter/setter与bean属性中的property&lt;/p&gt;

&lt;p&gt;如果不使用注解自动注入，必须通过代码手动注入,如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;bean id=&amp;quot;user&amp;quot; class=&amp;quot;xxx.User&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;student&amp;quot; ref=&amp;quot;student&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;bean id=&amp;quot;student&amp;quot; class=&amp;quot;xxx.Student&amp;quot; /&amp;gt;
...

@Test
public void test(){
    //读取配置文件
    ApplicationContext ctx=new ClassPathXmlApplicationContext(&amp;quot;applicationContext.xml&amp;quot;);
    User user=(User) ctx.getBean(&amp;quot;user&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而使用注解@Autowired大大减少了代码量，提高可读性。&lt;br /&gt;
使用前配置文件要添加扫描器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;context:component-scan base-package=&amp;quot;xxx.vo&amp;quot; /&amp;gt;
&amp;lt;bean id=&amp;quot;user&amp;quot; class=&amp;quot;xxx.User&amp;quot; /&amp;gt;
&amp;lt;bean id=&amp;quot;student&amp;quot; class=&amp;quot;xxx.Student&amp;quot; /&amp;gt;
...

class User{
    @Autowired
    private Student student;
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：当xml配置了user的属性时，Spring会按照xml优先的原则去User.java中寻找这两个属性的getter/setter，导致的结果就是初始化bean报错&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;context:component-scan base-package=&amp;quot;xxx.vo&amp;quot; /&amp;gt;
&amp;lt;bean id=&amp;quot;user&amp;quot; class=&amp;quot;xxx.User&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;student&amp;quot; ref=&amp;quot;student&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;bean id=&amp;quot;student&amp;quot; class=&amp;quot;xxx.Student&amp;quot; /&amp;gt;

class User{
    @Autowired
    private Student student;
    //无getter/setter
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：当xml未配置了student的bean时会抛出找不到bean的异常，可将@Autowired注解的required设置为false，默认student为null&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;context:component-scan base-package=&amp;quot;xxx.vo&amp;quot; /&amp;gt;
&amp;lt;bean id=&amp;quot;user&amp;quot; class=&amp;quot;xxx.User&amp;quot; /&amp;gt;

class User{
    @Autowired(required=false)
    private Student student;
    //无getter/setter
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;qualifier&#34;&gt;Qualifier&lt;/h3&gt;

&lt;p&gt;指定注入Bean的名称&lt;/p&gt;

&lt;h3 id=&#34;resource&#34;&gt;@Resource&lt;/h3&gt;

&lt;p&gt;@Resource注解与@Autowired注解作用相似&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User{
    @Resource(name=&amp;quot;student&amp;quot;)
    private Student student;

    //@Resource(type=&amp;quot;Student.class&amp;quot;)
    //private Student student;
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@Resource的装配顺序：
(1)、@Resource后面没有任何内容，默认通过name属性去匹配bean，找不到再按type去匹配
(2)、指定了name或者type则根据指定的类型去匹配bean，任何一个不匹配都将报错&lt;/p&gt;

&lt;p&gt;@Autowired和@Resource两个注解的区别：
(1)、@Autowired默认按照byType方式进行bean匹配，@Resource默认按照byName方式进行bean匹配
(2)、@Autowired是Spring的注解，@Resource是J2EE的注解&lt;/p&gt;

&lt;h2 id=&#34;获取参数&#34;&gt;获取参数&lt;/h2&gt;

&lt;h3 id=&#34;requestparam&#34;&gt;@RequestParam&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:8080/springmvc/hello/101?param1=10&amp;amp;param2=20&#34;&gt;http://localhost:8080/springmvc/hello/101?param1=10&amp;amp;param2=20&lt;/a&gt;&lt;br /&gt;
根据上面的这个URL，你可以用这样的方式来进行获取&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public String getDetails(
    @RequestParam(value=&amp;quot;param1&amp;quot;, required=true) String param1,
    @RequestParam(value=&amp;quot;param2&amp;quot;, required=false) String param2){
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@RequestParam 支持下面四种参数
    defaultValue 如果本次请求没有携带这个参数，或者参数为空，那么就会启用默认值
    name 绑定本次参数的名称，要跟URL上面的一样
    required 这个参数是不是必须的
    value 跟name一样的作用，是name属性的一个别名&lt;/p&gt;

&lt;h3 id=&#34;pathvariable&#34;&gt;@PathVariable&lt;/h3&gt;

&lt;p&gt;这个注解能够识别URL里面的一个模板，我们看下面的一个URL
&lt;a href=&#34;http://localhost:8080/springmvc/hello/101?param1=10&amp;amp;param2=20&#34;&gt;http://localhost:8080/springmvc/hello/101?param1=10&amp;amp;param2=20&lt;/a&gt;
上面的一个url你可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public String getDetails(
    @RequestMapping(&amp;quot;/hello/{id}&amp;quot;)
    public String getDetails(@PathVariable(value=&amp;quot;id&amp;quot;) String id,
    @RequestParam(value=&amp;quot;param1&amp;quot;, required=true) String param1,
    @RequestParam(value=&amp;quot;param2&amp;quot;, required=false) String param2){
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;区别很明显了&lt;/p&gt;

&lt;h2 id=&#34;常用注解&#34;&gt;常用注解&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;注解&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@Component&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;泛指组件，类似在xml中配置bean &lt;bean id=&#34;beanId&#34; class=&#34;包名.类名&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@Configuration&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;把类作为一个IoC容器，它的某个方法头上如果注册了@Bean，就会作为这个Spring容器中的Bean。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@Repository&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用于标注数据访问组件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@Service&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用于标注业务层组件,默认bean的id为类名且首字母小写&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@Controller&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用于标注控制层组件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@RestController&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;spring4.0之后，@controller和@responsebody的结合&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@Scope&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作用域 表示将Action的范围声明为原型，可以利用容器的scope=&amp;ldquo;prototype&amp;rdquo;来保证每一个请求有一个单独的Action来处理，避免struts中Action的线程安全问题。spring默认scope是单例模式(scope=&amp;ldquo;singleton&amp;rdquo;)，这样只会创建一个Action对象，每次访问都是同一Action对象，数据不安全，struts2是要求每次次访问都对应不同的Action，scope=&amp;ldquo;prototype&amp;rdquo;可以保证当有请求的时候都创建一个Action对象。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@Lazy(true)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;延迟初始化&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@RequestMapping&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。value：指定请求的实际地址；method：指定请求的method类型，GET、POST、PUT、DELETE等（Spring4.3中引进了｛@GetMapping、@PostMapping、@PutMapping、@DeleteMapping、@PatchMapping｝，来帮助简化常用的HTTP方法的映射）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@ResponseBody&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML数据。使用此注解之后不会再走视图处理器，而是直接将数据写入到输入流中，效果等同于通过response对象输出指定格式的数据 效果等同于如下代码：@RequestMapping(&amp;ldquo;/login&amp;rdquo;)   public void login(User user, HttpServletResponse response){  response.getWriter.write(JSONObject.fromObject(user).toString());  }&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@PostConstruct&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;初始化注解,用于指定初始化方法（用在方法上）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@PreDestory&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用于指定销毁方法（用在方法上）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@DependsOn&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;定义Bean初始化及销毁时的顺序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@Primary&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@Autowired&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;默认按类型装配，如果我们想使用按名称装配，可以结合@Qualifier注解一起使用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@Resource&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;默认按名称装配,当找不到与名称匹配的bean才会按类型装配&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@Async&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;异步方法调用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@RequestParam&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;接收参数,从request里面拿取值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@PathVariable&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;接收参数,从一个URI模板里面来填充&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@PathParam&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;这个注解是和spring的pathVariable是一样的，也是基于模板的，但是这个是jboss包下面的一个实现，上面的是spring的一个实现，都要导包&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@QueryParam&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;JAX-RS 提供的，和Spring的RequestParam作用一致&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;@RequestBody&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般是post请求的时候才会使用这个请求，把参数丢在requestbody里面&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
      
    </item>
    
    <item>
      <title>外网无法内网FTP（200 Type set to A）</title>
      <link>https://ianeiu.github.io/2018/08/23/%E5%A4%96%E7%BD%91%E6%97%A0%E6%B3%95%E5%86%85%E7%BD%91ftp200-type-set-to-a/</link>
      <pubDate>Thu, 23 Aug 2018 16:01:23 +0800</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/23/%E5%A4%96%E7%BD%91%E6%97%A0%E6%B3%95%E5%86%85%E7%BD%91ftp200-type-set-to-a/</guid>
      
        <description>&lt;p&gt;FTP 搭建好后在外网访问出想以下错误：&lt;br /&gt;
在Windows 资源管理器访问FTP站点弹出 FTP文件夹错误&lt;br /&gt;
            打开FTP 服务器上的文件夹时发生错误。请检查是否有权限范围该文件夹。&lt;br /&gt;
            详细信息：&lt;br /&gt;
    200 Type set to A.&lt;br /&gt;
    227 Entering Passive Mode (192,168,1,100,192,81)&lt;br /&gt;
解决方法：&lt;br /&gt;
      打开IE 浏览器 &amp;ndash; 工具 &amp;ndash; Internet 选项 &amp;ndash; 高级 &amp;ndash; 设置 &amp;ndash; 浏览 &amp;ndash; 把 使用被动FTP （用于防火墙和 DSL 调制解调器的兼容） 前面的勾去掉&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>常见状态码简介</title>
      <link>https://ianeiu.github.io/2018/08/23/%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 23 Aug 2018 16:01:23 +0800</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/23/%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81%E7%AE%80%E4%BB%8B/</guid>
      
        <description>

&lt;h2 id=&#34;部分状态码简介&#34;&gt;部分状态码简介&lt;/h2&gt;

&lt;h1 id=&#34;200&#34;&gt;200&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;200&lt;b&gt;—&lt;code&gt;请求成功&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;30x&#34;&gt;30X&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;301—&lt;code&gt;永久移动。被请求的资源已被永久移动位置&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;302&lt;b&gt;—&lt;code&gt;请求的资源现在临时从不同的 URI 响应请求（请求重定向）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;305—&lt;code&gt;使用代理。被请求的资源必须通过指定的代理才能被访问&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;304—&lt;code&gt;请求资源没有改变&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;307—&lt;code&gt;临时跳转。被请求的资源在临时从不同的URL响应请求&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;4xx&#34;&gt;4XX&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;400—&lt;code&gt;错误请求&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;402—&lt;code&gt;需要付款。该状态码是为了将来可能的需求而预留的，用于一些数字货币或者是微支付&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;403—&lt;code&gt;禁止访问。服务器已经理解请求，但是拒绝执行它&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;404&lt;b&gt;—&lt;code&gt;找不到对象。请求失败，资源不存在&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;406—&lt;code&gt;不可接受的。请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;408—&lt;code&gt;请求超时&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;409—&lt;code&gt;冲突。由于和被请求的资源的当前状态之间存在冲突，请求无法完成&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;410—&lt;code&gt;遗失的。被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;413—&lt;code&gt;响应实体太大。服务器拒绝处理当前请求，请求超过服务器所能处理和允许的最大值&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;417—&lt;code&gt;期望失败。在请求头 Expect 中指定的预期内容无法被服务器满足&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;418—&lt;code&gt;我是一个茶壶。超文本咖啡罐控制协议，但是并没有被实际的HTTP服务器实现&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;420—&lt;code&gt;方法失效&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;422—&lt;code&gt;不可处理的实体。请求格式正确，但是由于含有语义错误，无法响应&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;500&#34;&gt;500&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;500&lt;b&gt;—&lt;code&gt;服务器内部错误。服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>IDEA 修复 弹窗License activation报this license BIG3CLIK6F has been cancelled</title>
      <link>https://ianeiu.github.io/2018/08/23/idea-%E4%BF%AE%E5%A4%8D-%E5%BC%B9%E7%AA%97license-activation%E6%8A%A5this-license-big3clik6f-has-been-cancelled/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/23/idea-%E4%BF%AE%E5%A4%8D-%E5%BC%B9%E7%AA%97license-activation%E6%8A%A5this-license-big3clik6f-has-been-cancelled/</guid>
      
        <description>&lt;p&gt;修改系统配置&lt;/p&gt;

&lt;p&gt;Linux在/etc/hosts中添加 0.0.0.0 account.jetbrains.com&lt;br /&gt;
windows在C:\Windows\System32\drivers\etc\hosts，将“0.0.0.0 account.jetbrains.com”添加到hosts文件中&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>