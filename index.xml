<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0">
  <channel>
    <title>IanEiU</title>
    <link>https://ianeiu.github.io/</link>
    <description>Recent content on IanEiU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>WuWeiMian</copyright>
    <lastBuildDate>Fri, 22 Feb 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ianeiu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[置顶]js&amp;css的代码片段</title>
      <link>https://ianeiu.github.io/2019/02/22/%E7%BD%AE%E9%A1%B6jscss%E7%9A%84%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2019/02/22/%E7%BD%AE%E9%A1%B6jscss%E7%9A%84%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</guid>
      
        <description>

&lt;h3 id=&#34;操作元素的样式&#34;&gt;操作元素的样式&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#msg&amp;quot;).css(&amp;quot;background&amp;quot;); //返回元素的背景颜色
$(&amp;quot;#msg&amp;quot;).css(&amp;quot;background&amp;quot;,&amp;quot;#ccc&amp;quot;) //设定元素背景为灰色
$(&amp;quot;#msg&amp;quot;).height(300); $(&amp;quot;#msg&amp;quot;).width(&amp;quot;200&amp;quot;); //设定宽高
$(&amp;quot;#msg&amp;quot;).css({ color: &amp;quot;red&amp;quot;, background: &amp;quot;blue&amp;quot; });//以名值对的形式设定样式

$(&amp;quot;p&amp;quot;).attr(&amp;quot;class&amp;quot;, &amp;quot;ddiiyy&amp;quot;); //设置p元素的class为 &amp;quot;ddiiyy&amp;quot; 
$(&amp;quot;#nm_p&amp;quot;).addClass(&amp;quot;another&amp;quot;); // 追加样式 
$(&amp;quot;p&amp;quot;).removeClass(&amp;quot;ddiiyy another&amp;quot;); //溢出样式
$(&amp;quot;p&amp;quot;).toggleClass(&amp;quot;ddiiyy&amp;quot;); //如果存在（不存在）就删除（添加）名为ddiiyy的class
$(&amp;quot;p&amp;quot;).hasClass(&amp;quot;another&amp;quot;); //是否含有某个class。是返true，否返false
$(&amp;quot;p&amp;quot;).is(&amp;quot;.another&amp;quot;); //is(&amp;quot;.&amp;quot;+class);//JQuery实现，增强代码可读性
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;readonly和disabled&#34;&gt;readonly和disabled&lt;/h3&gt;

&lt;p&gt;表单中readOnly和disabled的区别：&lt;br /&gt;
readonly只针对input(text/ password)和textarea有效，而disabled对于所有的表单元素都有效，包括select,radio, checkbox, button等。&lt;br /&gt;
但是表单元素在使用了disabled后，当我们将表单以POST或GET的方式提交的话，这个元素的值不会被传递出去，而readonly会将该值传递出去（这种情况出现在我们将某个表单中的textarea元素设置为disabled或readonly，但是submit或button却是可以使用的）。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;隐藏和显示-操作display属性&#34;&gt;隐藏和显示(操作display属性)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#id&amp;quot;).show();//表示display:block, 
$(&amp;quot;#id&amp;quot;).hide();//表示display:none; 
$(&amp;quot;#id&amp;quot;).toggle();//切换元素的可见状态。如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的。
$(&amp;quot;#id&amp;quot;).css(&#39;display&#39;,&#39;none&#39;); 
$(&amp;quot;#id&amp;quot;).css(&#39;display&#39;,&#39;block&#39;); 
或 
$(&amp;quot;#id&amp;quot;)[0].style.display = &#39;none&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;操作disabled属性&#34;&gt;操作disabled属性&lt;/h3&gt;

&lt;p&gt;js操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function disableElement(element,val){
    document.getElementById(element).disabled=val;d
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jQuery进行操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//两种方法设置disabled属性
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,true);
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,&amp;quot;disabled&amp;quot;);
//三种方法移除disabled属性
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,false);
$(&#39;#areaSelect&#39;).removeAttr(&amp;quot;disabled&amp;quot;);
$(&#39;#areaSelect&#39;).attr(&amp;quot;disabled&amp;quot;,&amp;quot;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取s:textfield，并设置其disabled属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;functiondisableTextfieldofAccountDiv(element,val) {
    $(element).find(&amp;quot;:textfield&amp;quot;).attr(&#39;disabled&#39;,val);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;禁用a-button点击&#34;&gt;禁用a，button点击&lt;/h3&gt;

&lt;p&gt;1.jquery禁用a标签方法1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document).ready(function () {
    $(&amp;quot;a&amp;quot;).each(function () {
        var textValue = $(this).html();
        if (textValue == &amp;quot;XX概况&amp;quot; || textValue == &amp;quot;服务导航&amp;quot;) {
            $(this).css(&amp;quot;cursor&amp;quot;, &amp;quot;default&amp;quot;);
            $(this).attr(&#39;href&#39;, &#39;#&#39;);     //修改&amp;lt;a&amp;gt;的 href属性值为 #  这样状态栏不会显示链接地址 
            $(this).click(function (event) {
                event.preventDefault();   // 如果&amp;lt;a&amp;gt;定义了 target=&amp;quot;_blank“ 需要这句来阻止打开新页面
            });
        }
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.jquery禁用a标签方法2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;a.tooltip&#39;).live(&#39;click&#39;, function(event) {
  alert(&amp;quot;抱歉,已停用！&amp;quot;); 
  event.preventDefault();  
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.jquery禁用a标签方法3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function(){
    $(&#39;.disableCss&#39;).removeAttr(&#39;href&#39;);//去掉a标签中的href属性
    $(&#39;.disableCss&#39;).removeAttr(&#39;onclick&#39;);//去掉a标签中的onclick事件
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.jquery控制按钮的禁用与启用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;#button&#39;).attr(&#39;disabled&#39;,&amp;quot;true&amp;quot;);//添加disabled属性
$(&#39;#button&#39;).removeAttr(&amp;quot;disabled&amp;quot;); //移除disabled属性
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.css3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a style=&amp;quot;pointer-events: none;&amp;quot; onclick=&amp;quot;alert(&#39;ok&#39;);&amp;quot;&amp;gt;无法点击&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;操作checked属性-回显&#34;&gt;操作checked属性\回显&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input id=&amp;quot;cb1&amp;quot; type=&amp;quot;checkbox&amp;quot; checked /&amp;gt;
&amp;lt;input id=&amp;quot;cb2&amp;quot; type=&amp;quot;checkbox&amp;quot; checked=&amp;quot;checked&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.jquery判断checked的三种方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.attr(&#39;checked&#39;)   //看版本1.6+返回:&amp;quot;checked&amp;quot;或&amp;quot;undefined&amp;quot; ;1.5-返回:true或false
.prop(&#39;checked&#39;) //16+:true/false
.is(&#39;:checked&#39;)    //所有版本:true/false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.jquery赋值checked的几种写法:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//所有的jquery版本都可以这样赋值
$(&amp;quot;#cb1&amp;quot;).attr(&amp;quot;checked&amp;quot;,&amp;quot;checked&amp;quot;);
$(&amp;quot;#cb1&amp;quot;).attr(&amp;quot;checked&amp;quot;,true);

//jquery1.6+:prop的4种赋值
$(&amp;quot;#cb1&amp;quot;).prop(&amp;quot;checked&amp;quot;,true);    //很简单就不说了哦
$(&amp;quot;#cb1&amp;quot;).prop({checked:true});    //map键值对
$(&amp;quot;#cb1&amp;quot;).prop(&amp;quot;checked&amp;quot;,function(){  return true;   }); //函数返回true或false
$(&amp;quot;#cb1&amp;quot;).prop(&amp;quot;checked&amp;quot;,&amp;quot;checked&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.check回显的一个demo：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(list){
    if(type==1){
        var checkBoxAll = $(&amp;quot;input[name=&#39;outsideFileName&#39;]&amp;quot;);
        for(var i=0;i&amp;lt;list.length;i++){
            $.each(checkBoxAll,function(j,checkbox){
                //获取复选框的value属性
                var checkValue=$(checkbox).val();
                if(list[i].filePath==checkValue){
                    $(checkbox).attr(&amp;quot;checked&amp;quot;,true);
                }
            })
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;checkbox-全选反选&#34;&gt;checkbox（全选反选..）&lt;/h3&gt;

&lt;p&gt;demo：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;注：jquery1.9.0+无法正常显示
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot; &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt; 
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&amp;gt; 
&amp;lt;head&amp;gt; 
&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt; 
&amp;lt;title&amp;gt;jQuery 对checkbox的操作&amp;lt;/title&amp;gt; 
&amp;lt;/HEAD&amp;gt; 
&amp;lt;body style=&amp;quot;text-align:center;margin: 0 auto;font-size: 12px;&amp;quot; mce_style=&amp;quot;text-align:center;margin: 0 auto;font-size: 12px;&amp;quot;&amp;gt; 
&amp;lt;div style=&amp;quot;border: 1px solid #999; width: 500px; padding: 15px; background: #eee; margin-top: 150px;&amp;quot;&amp;gt; 
&amp;lt;form name=&amp;quot;form1&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn1&amp;quot; value=&amp;quot;全选&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn2&amp;quot; value=&amp;quot;取消全选&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn3&amp;quot; value=&amp;quot;选中所有奇数&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn4&amp;quot; value=&amp;quot;反选&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn5&amp;quot; value=&amp;quot;获得选中的所有值&amp;quot;&amp;gt; 
&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox1&amp;quot;&amp;gt; 
checkbox1 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox2&amp;quot;&amp;gt; 
checkbox2 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox3&amp;quot;&amp;gt; 
checkbox3 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox4&amp;quot;&amp;gt; 
checkbox4 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox5&amp;quot;&amp;gt; 
checkbox5 
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;checkbox&amp;quot; value=&amp;quot;checkbox6&amp;quot;&amp;gt; 
checkbox6 
&amp;lt;/form&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;/body&amp;gt; 
&amp;lt;/HTML&amp;gt; 

&amp;lt;script  type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;http://libs.baidu.com/jquery/1.8.0/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; 
&amp;lt;!-- 
$(&amp;quot;document&amp;quot;).ready(function(){ 
$(&amp;quot;#btn1&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]&amp;quot;).attr(&amp;quot;checked&amp;quot;,&#39;true&#39;);//全选 
}) 
$(&amp;quot;#btn2&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]&amp;quot;).removeAttr(&amp;quot;checked&amp;quot;);//取消全选 
}) 
$(&amp;quot;#btn3&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]:even&amp;quot;).attr(&amp;quot;checked&amp;quot;,&#39;true&#39;);//选中所有奇数 
}) 
$(&amp;quot;#btn4&amp;quot;).click(function(){ 
$(&amp;quot;[name=&#39;checkbox&#39;]&amp;quot;).each(function(){//反选 
if($(this).attr(&amp;quot;checked&amp;quot;)){ 
$(this).removeAttr(&amp;quot;checked&amp;quot;); 
} 
else{ 
$(this).attr(&amp;quot;checked&amp;quot;,&#39;true&#39;); 
} 
}) 
}) 
$(&amp;quot;#btn5&amp;quot;).click(function(){//输出选中的值 
var str=&amp;quot;&amp;quot;; 
$(&amp;quot;[name=&#39;checkbox&#39;][checked]&amp;quot;).each(function(){ 
str+=$(this).val()+&amp;quot;/r/n&amp;quot;; 
//alert($(this).val()); 
}) 
alert(str); 
}) 
}) 
--&amp;gt; 
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.获取checkbox选中的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var chk_value =[]; 
$(&#39;input[name=&amp;quot;test&amp;quot;]:checked&#39;).each(function(){ 
    chk_value.push($(this).val()); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.点击全选 非全选&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input[name=&amp;quot;pCheckBox&amp;quot;]&#39;).click(function(){  
    //alert(this.checked);  
    if($(this).is(&#39;:checked&#39;)){  
        $(&#39;input[name=&amp;quot;eventIds&amp;quot;]&#39;).each(function(){  
            //此处如果用attr，会出现第三次失效的情况  
            $(this).prop(&amp;quot;checked&amp;quot;,true);  
        });  
    }else{  
         $(&#39;input[name=&amp;quot;eventIds&amp;quot;]&#39;).each(function(){  
            $(this).removeAttr(&amp;quot;checked&amp;quot;,false);  
        });  
        //$(this).removeAttr(&amp;quot;checked&amp;quot;);  
    }  
});  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;radio&#34;&gt;radio&lt;/h3&gt;

&lt;p&gt;1.获取选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio :checked&#39;).val()；
$(&amp;quot;input[type=&#39;radio&#39;]:checked&amp;quot;).val();
$(&amp;quot;input[name=&#39;rd&#39;]:checked&amp;quot;).val();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.设置第一个Radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio :first&#39;).attr(&#39;checked&#39;, &#39;checked&#39;);
$(&#39;input:radio :first&#39;).attr(&#39;checked&#39;, &#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.设置最后一个Radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio :last&#39;).attr(&#39;checked&#39;, &#39;checked&#39;);
$(&#39;input:radio :last&#39;).attr(&#39;checked&#39;, &#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.根据索引值设置任意一个radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;input:radio&#39;).eq(索引值).attr(&#39;checked&#39;, &#39;true&#39;);//索引值=0,1,2....
$(&#39;input:radio&#39;).slice(1,2).attr(&#39;checked&#39;, &#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.根据Value值设置Radio为选中值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;input:radio[value=&#39;rd2&#39;]&amp;quot;).attr(&#39;checked&#39;,&#39;true&#39;);
$(&amp;quot;input[value=&#39;rd2&#39;]&amp;quot;).attr(&#39;checked&#39;,&#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;select&#34;&gt;select&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;select id=&amp;quot;s&amp;quot;&amp;gt;
    &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;嘻嘻&amp;lt;/option&amp;gt;
    &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;呵呵&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.获取select中option被选中的文本值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;误：$(&amp;quot;#s&amp;quot;).text();  //获取所有option的文本值
$(&amp;quot;#s option:selected&amp;quot;).text();  //获取选中的option的文本值
$(&amp;quot;#s&amp;quot;).find(&amp;quot;option:selected&amp;quot;).text(); //获取选中的option的文本值
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.获取select中option被选中的value值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#s&amp;quot;).val();
$(&amp;quot;#s option:selected&amp;quot;).val();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.js获取select选中的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sel=document.getElementById(&amp;quot;s&amp;quot;); 
var index = sel.selectedIndex; // 选中索引
albumid= sel.options[index].value;//要的值
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;textarea&#34;&gt;textarea&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;textarea name=&amp;quot;content&amp;quot; id=&amp;quot;content&amp;quot; rows=&amp;quot;8&amp;quot; cols=&amp;quot;5&amp;quot;&amp;gt;这是textarea内容&amp;lt;/textarea&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.获取textarea文本值（用name和id）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;textarea[name=&#39;content&#39;]&amp;quot;).val()      $(&amp;quot;#content&amp;quot;).val()    
$(&amp;quot;textarea[name=&#39;content&#39;]&amp;quot;).text()      $(&amp;quot;#content&amp;quot;).text()    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.赋值textarea文本值（只能用id）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#content&amp;quot;).val(&amp;quot;这是要写入的textarea文本内容&amp;quot;)
$(&amp;quot;#content&amp;quot;).text(&amp;quot;这是要写入的textarea文本内容&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;val和text的区别是：val()可以体现换行符，而text()不能。&lt;/p&gt;

&lt;p&gt;3.禁止文本域textarea可拖拽的方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;textarea{ resize:none;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.让textarea没有黄框且不能拖拽：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;textarea{outline:none;resize:none;}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;confirm-二次确认&#34;&gt;confirm，二次确认&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if(confirm(&amp;quot;确定要删除该记录吗？&amp;quot;)){
    doSomething();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;重置表单reset&#34;&gt;重置表单reset&lt;/h3&gt;

&lt;p&gt;使用jquery方法重置form表单&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;误：$(&#39;#formName&#39;).reset();//得到的是数组。
正：$(&#39;#formName&#39;)[0].reset();//得到的是jQuery对象。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：这种方式虽然可以重置表单，但是不能重置隐藏字段。隐藏字段要单独处理。&lt;br /&gt;
小知识：$(&amp;lsquo;#formName&amp;rsquo;).get(0)得到的是DOM对象。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jquery-获取元素个数&#34;&gt;jquery 获取元素个数&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;#div1&#39;).children().length;
$(&#39;#div1&#39;).children(&#39;span&#39;).length;//获取id=div1下的span元素个数
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;定位&#34;&gt;定位&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id =&#39;&#39;localid&amp;quot;&amp;gt; xixi&amp;lt;/div&amp;gt;
window.location.href=&#39;#localid&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;修改标题title&#34;&gt;修改标题title&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;document.title=&amp;quot;批量业务单&amp;quot;; 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq的事件处理功能&#34;&gt;JQ的事件处理功能&lt;/h3&gt;

&lt;p&gt;1.hover&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//当鼠标放在表格的某行上时将class置为over，离开时置为out。
$(&amp;quot;tr&amp;quot;).hover(
function(){
     $(this).addClass(&amp;quot;over&amp;quot;);
}, 
function(){ 
    $(this).addClass(&amp;quot;out&amp;quot;); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;demo鼠标移入出现悬浮框&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;td class=&#39;linkTd&#39;&amp;gt;
    &amp;lt;div style=&#39;position:relative;&#39;&amp;gt;
        @link&amp;lt;span class=&#39;linkHover&#39;&amp;gt;@detailLink&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/td&amp;gt;

.linkHover{         
    position: absolute;  
    top: 20px;  
    width: 320px;
    max-height: 250px;           /* 设置最大高度，当高度达到此值时出现滚动条 */  
    z-index: 10;  
    background-color: #E0E5E5;   
    overflow: auto;              /* 自动添加滚动条 */  
    box-shadow:0px 0px 10px #000;   /* 外阴影 */  
    display:none;
}

$(&#39;.linkTd&#39;).hover(  
    function(){   
        $(this).find(&#39;.linkHover&#39;).show();
    } ,  
    function(){  
        $(this).find(&#39;.linkHover&#39;).hide();
    }   
);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;进化&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;```
    &amp;lt;!doctype html&amp;gt;
    &amp;lt;html&amp;gt;
        &amp;lt;head&amp;gt;
            &amp;lt;title class=&amp;quot;lang&amp;quot; langKey=&amp;quot;xxxx&amp;quot;&amp;gt;index&amp;lt;/title&amp;gt;
            &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf8&amp;quot; /&amp;gt;
            &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
            &amp;lt;style&amp;gt;
            .linkHover{         
                position: absolute;  
                top: 20px;  
                width: 320px;
                max-height: 250px;           /* 设置最大高度，当高度达到此值时出现滚动条 */  
                z-index: 10;  
                background-color: #E0E5E5;   
                overflow: auto;              /* 自动添加滚动条 */  
                box-shadow:0px 0px 10px #000;   /* 外阴影 */  
                display:none;
            }
            &amp;lt;/style&amp;gt;
        &amp;lt;/head&amp;gt;
        &amp;lt;body&amp;gt;
            &amp;lt;div class=&#39;linkTd&#39;&amp;gt;
                123123
            &amp;lt;/div&amp;gt;
        &amp;lt;/body&amp;gt;
        &amp;lt;script&amp;gt;
            $(function () {
                var tip =&amp;quot;&amp;lt;div style=&#39;position:relative;&#39;&amp;gt; &amp;lt;span class=&#39;linkHover&#39;&amp;gt;1111&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt;&amp;quot;;
                    $(&#39;.linkTd&#39;).append(tip);
            })
            $(&#39;.linkTd&#39;).hover( 
                function(){   
                    $(this).find(&#39;.linkHover&#39;).show();
                } ,  
                function(){  
                    $(this).find(&#39;.linkHover&#39;).hide();
                }   
            );
        &amp;lt;/script
    &amp;lt;/html&amp;gt;
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.ready&lt;br /&gt;
在文档加载后激活函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document).ready(function(){
  $(&amp;quot;.btn1&amp;quot;).click(function(){
    $(&amp;quot;p&amp;quot;).slideToggle();
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;语法 1  &lt;code&gt;$(document).ready(function)&lt;/code&gt;&lt;br /&gt;
语法 2  &lt;code&gt;$().ready(function)&lt;/code&gt;&lt;br /&gt;
语法 3  &lt;code&gt;$(function)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3.toggle&lt;br /&gt;
toggle()和slidetoggle()方法提供了状态切换功能。&lt;br /&gt;
toggle()方法包括了hide()和show()方法。 slideToggle()方法包括了slideDown()和slideUp()方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//每次点击时轮换添加和删除名为selected的class。
$(&amp;quot;p&amp;quot;).toggle(function(){ 
     $(this).addClass(&amp;quot;selected&amp;quot;); 
},function(){ 
     $(this).removeClass(&amp;quot;selected&amp;quot;); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.trigger&lt;br /&gt;
    在每一个匹配的元素上触发某类事件,如模拟点击，回车登录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//模拟点击
$(&amp;quot;#b&amp;quot;).click(function(){$(&amp;quot;#a&amp;quot;).trigger(&amp;quot;click&amp;quot;)})
$(&amp;quot;#a&amp;quot;).trigger(&amp;quot;click&amp;quot;);//执行#a的click事件

//回车点击
$(document).keyup(function(event){
  if(event.keyCode ==13){
    $(&amp;quot;#btn_login&amp;quot;).trigger(&amp;quot;click&amp;quot;);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;form表单增加&lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; style=&amp;quot;display:none&amp;quot;/&amp;gt;&lt;/code&gt;可以防止回车提交自动提交表单&lt;/p&gt;

&lt;p&gt;推荐：keyup，防止笔记本键盘不小心触摸到了
有些文档中有写成这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(window).keydown（function(){
...
}）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;XP系统IE6下是不成功的。&lt;/p&gt;

&lt;p&gt;5.bind(eventtype,fn)，unbind(eventtype)&lt;br /&gt;
事件的绑定与反绑定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;p&amp;quot;).bind(&amp;quot;click&amp;quot;, function(){alert($(this).text());}); //为每个p元素添加单击事件 
$(&amp;quot;p&amp;quot;).unbind(); //删除所有p元素上的所有事件 
$(&amp;quot;p&amp;quot;).unbind(&amp;quot;click&amp;quot;) //删除所有p元素上的单击事件
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq集合遍历&#34;&gt;JQ集合遍历&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;//为索引分别为0，1，2的p元素分别设定不同的字体颜色。
$(&amp;quot;p&amp;quot;).each(function(i){this.style.color=[&#39;#f00&#39;,&#39;#0f0&#39;,&#39;#00f&#39;][i]})
//实现表格的隔行换色效果
$(&amp;quot;tr&amp;quot;).each(function(i){this.style.backgroundColor=[&#39;#ccc&#39;,&#39;#fff&#39;][i%2]})
//为每个p元素增加了click事件，单击某个p元素则弹出其内容
$(&amp;quot;p&amp;quot;).click(function(){alert($(this).html())})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;demo遍历table的tr获取td的值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tbody id=&amp;quot;history_income_list&amp;quot;&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;&amp;quot; onclick=&amp;quot;history_income_del(this);&amp;quot; href=&amp;quot;###&amp;quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;&amp;quot; href=&amp;quot;###&amp;quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;input-s input-w input-hs&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;&amp;quot; href=&amp;quot;###&amp;quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for循环遍历&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var trList = $(&amp;quot;#history_income_list&amp;quot;).children(&amp;quot;tr&amp;quot;)
for (var i=0;i&amp;lt;trList.length;i++) {
    var tdArr = trList.eq(i).find(&amp;quot;td&amp;quot;);
    var history_income_type = tdArr.eq(0).find(&amp;quot;input&amp;quot;).val();//收入类别
    var history_income_money = tdArr.eq(1).find(&amp;quot;input&amp;quot;).val();//收入金额
    var history_income_remark = tdArr.eq(2).find(&amp;quot;input&amp;quot;).val();//  备注
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JQ遍历&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#history_income_list&amp;quot;).find(&amp;quot;tr&amp;quot;).each(function(){
    var tdArr = $(this).children();
    var history_income_type = tdArr.eq(0).find(&amp;quot;input&amp;quot;).val();//收入类别
    var history_income_money = tdArr.eq(1).find(&amp;quot;input&amp;quot;).val();//收入金额
    var history_income_remark = tdArr.eq(2).find(&amp;quot;input&amp;quot;).val();//  备注
    ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Map集合遍历&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//{&amp;quot;code&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;desc&amp;quot;:&amp;quot;操作成功&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;shfwxt&amp;quot;:&amp;quot;售后服务系统&amp;quot;,&amp;quot;cs_win&amp;quot;:&amp;quot;测试_win&amp;quot;,&amp;quot;qdglxt&amp;quot;:&amp;quot;渠道管理系统&amp;quot;}}
success: function(result) {
    if(result.code == &#39;1&#39;){
        var data = result.data;
        var html = &amp;quot;&amp;lt;option selected=&#39;selected&#39; value=&#39;&#39;&amp;gt;请选择权限代码&amp;lt;/option&amp;gt;&amp;quot;;
        $.each(data, function (key, value) {
            html += &amp;quot;&amp;lt;option value= &#39;&amp;quot; + key + &amp;quot;&#39;&amp;gt;&amp;quot; + value +&amp;quot;(&amp;quot; + key+&amp;quot;)&amp;lt;/option&amp;gt;&amp;quot;;
        });
        $(&amp;quot;#permissionCode&amp;quot;).html(&#39;&#39;).append(html);
        layui.use(&#39;form&#39;, function() {
            var form = layui.form; //只有执行了这一步，部分表单元素才会自动修饰成功
            form.render();
        });
    }else{
        _msgShowToFunc(result.desc);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jquery&#34;&gt;jquery $.&lt;/h3&gt;

&lt;h4 id=&#34;extend&#34;&gt;$.extend&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//为jquery扩展了min,max两个方法
$.extend({ 
    min: function(a, b){return a &amp;lt; b?a:b; },
    max: function(a, b){return a &amp;gt; b?a:b; }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用扩展的方法（通过“$.方法名”调用）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alert(&amp;quot;a=10,b=20,max=&amp;quot;+$.max(10,20)+&amp;quot;,min=&amp;quot;+$.min(10,20));
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;each&#34;&gt;$.each&lt;/h4&gt;

&lt;p&gt;$.each(obj, fn)：通用的迭代函数。可用于代替循环。 如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.each( [0,1,2], function(i, n){ alert( &amp;quot;Item #&amp;quot; + i + &amp;quot;: &amp;quot; + n ); });
//等价 
var tempArr=[0,1,2]; 
for(var i=0;i&amp;lt;tempArr.length;i++){ alert(&amp;quot;Item #&amp;quot;+i+&amp;quot;: &amp;quot;+tempArr[i]); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以处理json数据，如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.each( { name: &amp;quot;John&amp;quot;, lang: &amp;quot;JS&amp;quot; }, function(i, n){ alert( &amp;quot;Name: &amp;quot; + i + &amp;quot;, Value: &amp;quot; + n ); });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;map&#34;&gt;$.map&lt;/h4&gt;

&lt;p&gt;$.map(array, fn)：数组映射。把一个数组中的项目(处理转换后)保存到到另一个新数组中，并返回生成的新数组。 如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var tempArr=$.map( [0,1,2], function(i){ return i + 4; });//[4,5,6] 
var tempArr=$.map( [0,1,2], function(i){ return i &amp;gt; 0 ? i + 1 : null; });//[2,3] 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;merge&#34;&gt;$.merge&lt;/h4&gt;

&lt;p&gt;$.merge(arr1,arr2):合并两个数组并删除其中重复的项目。 如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.merge( [0,1,2], [2,3,4] ) //返回[0,1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;trim&#34;&gt;$.trim&lt;/h4&gt;

&lt;p&gt;$.trim(str)：删除字符串两端的空白字符。 如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.trim(&amp;quot; hello, how are you? &amp;quot;); //返回&amp;quot;hello,how are you? &amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-获取数组长度&#34;&gt;JS 获取数组长度&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var myarray = [1,2,3];
myarray.length // 初始的长度是3
myarray.length = 2; // 删除最后一个元素
myarray.length = 20 // 添加18个元素到数组中
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-判断-undefined&#34;&gt;JS 判断 undefined&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if(typeof(value)==&amp;quot;undefined&amp;quot;){ 
    alert(&amp;quot;undefined&amp;quot;); 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-join将数组转字符串&#34;&gt;JS  join将数组转字符串&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;zs&amp;quot;/&amp;gt;张三
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;ls&amp;quot;/&amp;gt;李四
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;we&amp;quot;/&amp;gt;王二
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;sw&amp;quot;/&amp;gt;三五
&amp;lt;input class=&amp;quot;chcekInp&amp;quot; type=&amp;quot;checkbox&amp;quot; name=&amp;quot;nextDeal&amp;quot; value=&amp;quot;sl&amp;quot;/&amp;gt;四六

var chk_value =[]; 
$(&#39;input[name=&amp;quot;nextDeal&amp;quot;]:checked&#39;).each(function(){ 
    chk_value.push($(this).val()); 
});
var userNames = chk_value.join(&amp;quot;,&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-遮罩功能&#34;&gt;JS 遮罩功能&lt;/h3&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!--弹窗背景--&amp;gt;
&amp;lt;div class=&amp;quot;flexBg&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;!--loading--&amp;gt;
&amp;lt;div class=&amp;quot;loading&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;
    &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;p&amp;gt;加载中...&amp;lt;/p&amp;gt;
    &amp;lt;%-- &amp;lt;img src=&amp;quot;${baseURL }/themes/zsyx/images/loading.gif&amp;quot;&amp;gt;&amp;lt;/img&amp;gt; --%&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.flexBg {
    background: url(../images/flexBg.png);
    position: fixed;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    z-index: 999;
}
.loading {
    width: 100px;
    height: 100px;
    position: absolute;
    top: 50%;
    left: 50%;
    margin: -50px 0 0 -50px;
    z-index: 999;
    background: #fff;
    padding: 15px;
    border-radius: 5px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function sZZ(){
    $(&#39;.flexBg&#39;).show();
    $(&#39;.loading&#39;).show();
}
function hZZ(){
    $(&#39;.flexBg&#39;).hide();
    $(&#39;.loading&#39;).hide();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IMG&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ianeiu.github.io/resouce/收藏册JSJQ/flexBg.png&#34;  alt=&#34;BG&#34; /&gt;
&lt;img src=&#34;https://ianeiu.github.io/resouce/收藏册JSJQ/loading.gif&#34;  alt=&#34;LOAD&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js中的encodeuri-decodeuri-decodeuricomponent-解决传值中文乱码&#34;&gt;js中的encodeURI、decodeURI、decodeURIComponent,解决传值中文乱码&lt;/h3&gt;

&lt;p&gt;一、基本概念&lt;br /&gt;
encodeURI和decodeURI是成对来使用的，因为浏览器的地址栏有中文字符的话，可以会出现不可预期的错误，所以可以encodeURI把非英文字符转化为英文编码，decodeURI可以用来把字符还原回来。&lt;br /&gt;
encodeURI方法不会对下列字符进行编码：&amp;rdquo;:&amp;ldquo;、&amp;rdquo;/&amp;ldquo;、&amp;rdquo;;&amp;rdquo; 和 &amp;ldquo;?&amp;ldquo;，encodeURIComponent方法可以对这些字符进行编码。&lt;/p&gt;

&lt;p&gt;decodeURI()方法相当于java.net.URLDecoder.decode(URIString, &amp;ldquo;UTF-8&amp;rdquo;);&lt;br /&gt;
encodeURI()方法相当于java.net.URLEncoder.encode(URIString, &amp;ldquo;UTF-8&amp;rdquo;);&lt;br /&gt;
二、例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.location.href = encodeURI(encodeURI(jumpURL));
//http://127.0.0.1:8081/zsyx/jsp/component/demandwork/functiontest/functiontest.jsp?id=NEW20183123134021852&amp;amp;slink=%25E9%259C%2580%25E6%25B1%2582%25E5%25A4%2584%25E7%2590%2586

var slink = decodeURI(decodeURI(&#39;${param.slink}&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js判断文件是否存在&#34;&gt;JS判断文件是否存在&lt;/h3&gt;

&lt;p&gt;方法1：判断图片是否存在&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isHasImg(pathImg){  
    var ImgObj=new Image();  
    ImgObj.src= pathImg;  
    if(ImgObj.fileSize &amp;gt; 0 || (ImgObj.width &amp;gt; 0 &amp;amp;&amp;amp; ImgObj.height &amp;gt; 0))  
    {  
    return true;  
    } else {  
    return false;  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法2：AJAX验证图片或文件链接是否存在&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function validateImage(url) {      
var xmlHttp ;  
if (window.ActiveXObject)  
{  
xmlHttp = new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);  
}  
else if (window.XMLHttpRequest)  
{  
xmlHttp = new XMLHttpRequest();  
}   
xmlHttp.open(&amp;quot;Get&amp;quot;,url,false);  
xmlHttp.send();  
if(xmlHttp.status==404)  
return false;  
else  
return true;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法3：用onerror替换不存在的图片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;images/img1.jpg&amp;quot; height=&amp;quot;300&amp;quot; width=&amp;quot;800&amp;quot; onerror=&amp;quot;images/defaultImg.jpg&amp;quot;&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;解决自定义方法或其他类库与jquery的冲突&#34;&gt;解决自定义方法或其他类库与jQuery的冲突&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;//使用jquery中的jQuery.noConflict();方法即可把变量$的控制权让渡给第一个实现它的那个库或之前自定义的$方法。之后应用Jquery的时候只要将所有的$换成jQuery即可
jQuery.noConflict(); 
// 开始使用jQuery 
jQuery(&amp;quot;div p&amp;quot;).hide(); 
// 使用其他库的 $() 
$(&amp;quot;content&amp;quot;).style.display = &#39;none&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;获取iframe中文档内容&#34;&gt;获取iframe中文档内容&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;function getIframeContent(){  //获取iframe中文档内容
    var doc;
    if (document.all){ // IE 
        doc = document.frames[&amp;quot;ueditor_0&amp;quot;].document; 
    }else{ // 标准
        doc = document.getElementById(&amp;quot;ueditor_0&amp;quot;).contentDocument; 
    }
    return doc.body.innerHTML;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;子窗体调父窗体方法&#34;&gt;子窗体调父窗体方法&lt;/h3&gt;

&lt;p&gt;父窗体&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function selectProduct(commitBrand){    window.open(&amp;quot;${baseURL}/jsp/component/selectlist/SelectProductList.jsp?ecs=ecs&amp;amp;productName=productName&amp;amp;brandId=brandId&amp;amp;brandName=brandName&amp;amp;specification=specification&amp;quot;,&amp;quot;选择产品&amp;quot;,
        &amp;quot;width=1366,height=768,top=0,left=0,scrollbars=YES,resizable=yes&amp;quot;);
}
function setProductValue(ecs,productName,brandId,brandNameDesc,guige,guigeDesc,color,colorDesc,productXinghao,productXinghaoDesc,haveImei,fundCost){
        $(&amp;quot;#ecs&amp;quot;).attr(&amp;quot;value&amp;quot;,ecs);
        $(&amp;quot;#productName&amp;quot;).attr(&amp;quot;value&amp;quot;,productName);
        $(&amp;quot;#brandId&amp;quot;).attr(&amp;quot;value&amp;quot;,brandId);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;子窗体 SelectProductList.jsp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.opener.setProductValue(content.ecs,content.productName,content.zhongduanPinpai,content.zhongduanPinpaiDesc,content.guige,content.guigeDesc,content.color,content.colorDesc,content.productXinghao,content.productXinghaoDesc,content.haveImei,content.fundCost);
window.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq-ajax请求demo&#34;&gt;JQ AJAX请求demo&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(function() {
    $(&#39;#send&#39;).click(function() {
        $.ajax({
            type: &amp;quot;GET&amp;quot;, //GET或POST,
            async:true, //默认设置为true，所有请求均为异步请求。
            url: &amp;quot;http://www.idaima.com/xxxxx.php&amp;quot;,
            data: {
                username: $(&amp;quot;#username&amp;quot;).val(),
                content: $(&amp;quot;#content&amp;quot;).val()
            },
            dataType: &amp;quot;json&amp;quot;, //xml、html、script、jsonp、text
            beforeSend:function(){},
            complete:function(){},
            success: function(data) {
                alert(data)
            },
            error:function(){},
        });
    });
});


$.get(baseURL+&#39;/childorderdeal/childorderdealActAction!getWorkSati.action&#39;, { orderId: &amp;quot;NEW2018425164215552&amp;quot; }, function(data){
             if(data.code==&amp;quot;0&amp;quot;){
                 $(&#39;input:[value=&amp;quot;&#39;+data.data.code+&#39;&amp;quot;]&#39;).attr(&#39;checked&#39;,&#39;true&#39;);
             }
        },&#39;json&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jq-设置ajax同步&#34;&gt;JQ 设置AJAX同步&lt;/h3&gt;

&lt;p&gt;由于$.post() 和 $.get() 默认是 异步请求，如果需要同步请求，则可以进行如下使用：&lt;br /&gt;
在$.post()前把ajax设置为同步：$.ajaxSettings.async = false;&lt;br /&gt;
在$.post()后把ajax改回为异步：$.ajaxSettings.async = true;&lt;br /&gt;
如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.ajaxSettings.async = false;  
$.post(&amp;quot;/finance/getLastTimeCard&amp;quot;, data, function(result) {  
    // 请求处理  
},&amp;quot;json&amp;quot;);  
$.ajaxSettings.async = true;  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;页面刷新篇&#34;&gt;页面刷新篇&lt;/h3&gt;

&lt;p&gt;1.刷新&lt;br /&gt;
reload 方法，该方法强迫浏览器刷新当前页面。&lt;br /&gt;
语法：location.reload([bForceGet])&lt;br /&gt;
参数： bForceGet， 可选参数， 默认为 false，从客户端缓存里取当前页。true, 则以 GET 方式，从服务端取最新的页面, 相当于客户端点击 F5(&amp;ldquo;刷新&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;replace 方法，该方法通过指定URL替换当前缓存在历史里（客户端）的项目，因此当使用replace方法之后，你不能通过“前进”和“后退”来访问已经被替换的URL。&lt;br /&gt;
语法： location.replace(URL)&lt;/p&gt;

&lt;p&gt;在实际应用的时候，重新刷新页面的时候，我们通常使用： &lt;strong&gt;location.reload()&lt;/strong&gt; 或者是 &lt;strong&gt;history.go(0) &lt;/strong&gt;来做。&lt;br /&gt;
因为这种做法就像是客户端点F5刷新页面，所以页面的method=&amp;ldquo;post&amp;rdquo;的时候，会出现&amp;rdquo;网页过期&amp;rdquo;的提示。那是因为Session的安全保护机制。&lt;br /&gt;
这里，location.replace() 就可以完成此任务。被replace的页面每次都在服务端重新生成。&lt;br /&gt;
你可以这么写： &lt;strong&gt;location.replace(location.href)&lt;/strong&gt;;&lt;/p&gt;

&lt;p&gt;2.返回并刷新页面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location.replace(document.referrer); //document.referre为r前一个页面的URL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不要用 history.go(-1)，或 history.back();来返回并刷新页面，这两种方法不会刷新页面。&lt;/p&gt;

&lt;h4 id=&#34;javascript刷新页面的几种方法&#34;&gt;Javascript刷新页面的几种方法&lt;/h4&gt;

&lt;p&gt;1    history.go(0)&lt;br /&gt;
2    location.reload()&lt;br /&gt;
3    location=location&lt;br /&gt;
4    location.assign(location)&lt;br /&gt;
5    document.execCommand(&amp;lsquo;Refresh&amp;rsquo;)&lt;br /&gt;
6    window.navigate(location)&lt;br /&gt;
7    location.replace(location)&lt;br /&gt;
8    document.URL=location.href&lt;/p&gt;

&lt;h4 id=&#34;自动刷新页面的方法&#34;&gt;自动刷新页面的方法&lt;/h4&gt;

&lt;p&gt;1.页面自动刷新：把如下代码加入&lt;head&gt;区域中,20秒刷新一次页面.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;20&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.页面自动跳转：把如下代码加入&lt;head&gt;区域中,20秒后跳转到&lt;a href=&#34;https://ianeiu.github.io/页面&#34;&gt;https://ianeiu.github.io/页面&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;20;url=https://ianeiu.github.io/&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.页面自动刷新js版&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; 
    function myrefresh(){  window.location.reload(); }
    setTimeout(&#39;myrefresh()&#39;,1000); //指定1秒刷新一次
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;窗口刷新&#34;&gt;窗口刷新&lt;/h4&gt;

&lt;p&gt;1.JS刷新框架的脚本语句&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//如何刷新包含该框架的页面用   
&amp;lt;script language=JavaScript&amp;gt;
   parent.location.reload();
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.子窗口刷新父窗口&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script language=JavaScript&amp;gt;
    self.opener.location.reload();
&amp;lt;/script&amp;gt;
//或　&amp;lt;a href=&amp;quot;javascript:opener.location.reload()&amp;quot;&amp;gt;刷新&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.如何刷新另一个框架的页面用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script language=JavaScript&amp;gt;
   parent.另一FrameID.location.reload();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.如果想关闭窗口时刷新或者想开窗时刷新的话，在&lt;body&gt;中调用以下语句即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body onload=&amp;quot;opener.location.reload()&amp;quot;&amp;gt; 开窗时刷新
&amp;lt;body onUnload=&amp;quot;opener.location.reload()&amp;quot;&amp;gt; 关闭时刷新
&amp;lt;script language=&amp;quot;javascript&amp;quot;&amp;gt;
    window.opener.document.location.reload()
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jquery对象与dom对象&#34;&gt;jQuery对象与dom对象&lt;/h3&gt;

&lt;p&gt;通过jquery的$()引用元素包括通过id、class、元素名以及元素的层级关系及dom或者xpath条件等方法，且返回的对象为jquery对象（集合对象），不能直接调用dom定义的方法。&lt;br /&gt;
转换&lt;br /&gt;
普通的dom对象一般可以通过$()转换成jquery对象。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document.getElementById(&amp;quot;msg&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于jquery对象本身是一个集合。所以如果jquery对象要转换为dom对象则必须取出其中的某一项，一般可通过索引取出。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#msg&amp;quot;)[0]，
$(&amp;quot;div&amp;quot;).eq(1)[0]，
$(&amp;quot;div&amp;quot;).get()[1]，
$(&amp;quot;td&amp;quot;)[5]

$(&amp;quot;#msg&amp;quot;).html();
$(&amp;quot;#msg&amp;quot;)[0].innerHTML;
$(&amp;quot;#msg&amp;quot;).eq(0)[0].innerHTML;
$(&amp;quot;#msg&amp;quot;).get(0).innerHTML;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取jQuery集合的某一项(获取第三个div元素的内容)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;div&amp;quot;).eq(2).html(); //调用jquery对象的方法
$(&amp;quot;div&amp;quot;).get(2).innerHTML; //调用dom的方法属性
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;form表单-注意点&#34;&gt;form表单 注意点&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;查询页面，有绑定回车事件提交表单的，要在form中加上onsubmit=&amp;ldquo;return false;&amp;ldquo;。不然会出现回车查询时页面直接显示JSON数据了。&lt;/li&gt;
&lt;li&gt;直接在form标签中加入属性accept-charset=&amp;lsquo;UTF-8&amp;rsquo;,防止中文乱码。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;js-截取字符串&#34;&gt;js 截取字符串&lt;/h3&gt;

&lt;h4 id=&#34;去除字符串最后一位-进化版&#34;&gt;去除字符串最后一位(进化版)&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;SCRIPT type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	function delfh(str){
		str=str.replace(&amp;quot;,,&amp;quot;,&amp;quot;,&amp;quot;);
		if(str.substring(str.length-1,str.length)==&amp;quot;,&amp;quot;){
			str2=str.substring(0,str.length-1);
			delfh(str2);
		}else{
			str2=str;
		}
		return str2;
	}
 
	var s2=&amp;quot;1,,,2,,,,3,,,,4,54,454,,,,,,,,,,,,,,,,&amp;quot;;
	var s=&amp;quot;415929,415930,415931,415932,415933,415934,415935,415936,415937,415938,415939,415940,415941,415942,415943,415944,415945,415946,415947,415948,1,2,3&amp;quot;;
	alert(delfh(s2));
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;元素上下居中&#34;&gt;元素上下居中&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
.parent {
	display: flex;
	flex-direction: column;
	justify-content: center; /* 上下 */
	align-items: center; /* 水平 */
}
&amp;lt;/style&amp;gt;

&amp;lt;div class=&amp;quot;parent&amp;quot; style=&amp;quot;height: 1000px; border: 1px solid #000&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;child&amp;quot; style=&amp;quot;height: 500px; width: 100px; border: 1px solid #00f&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;检查ie&#34;&gt;检查IE&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt; /* 注意：不能使用较新的jquery */
    /* $.browser.msie在1.9以后的jquery中不存在了 */
    /* 2.0 版本中，将不再支持 IE 6/7/8 */
    $(function() {
    	 checkOne();
    	 checkTwo();
    });
    
    function checkOne(){
    	 var userAgent = window.navigator.userAgent.toLowerCase();
    	  
         $.browser.msie10 = $.browser.msie &amp;amp;&amp;amp; /msie 10\.0/i.test(userAgent);
         $.browser.msie9 = $.browser.msie &amp;amp;&amp;amp; /msie 9\.0/i.test(userAgent); 
         $.browser.msie8 = $.browser.msie &amp;amp;&amp;amp; /msie 8\.0/i.test(userAgent);
         $.browser.msie7 = $.browser.msie &amp;amp;&amp;amp; /msie 7\.0/i.test(userAgent);
         $.browser.msie6 = !$.browser.msie8 &amp;amp;&amp;amp; !$.browser.msie7 &amp;amp;&amp;amp; $.browser.msie &amp;amp;&amp;amp; /msie 6\.0/i.test(userAgent);
   
         $(&amp;quot;.info&amp;quot;).html(
             &amp;quot;&amp;lt;h3&amp;gt;userAgent:&amp;lt;/h3&amp;gt;&amp;quot; + userAgent + &amp;quot;&amp;lt;br /&amp;gt;&amp;quot; +
             &amp;quot;&amp;lt;h3&amp;gt;Is IE 10?&amp;lt;/h3&amp;gt;&amp;quot; + $.browser.msie10 +
             &amp;quot;&amp;lt;h3&amp;gt;Is IE 9?&amp;lt;/h3&amp;gt;&amp;quot; + $.browser.msie9 +
             &amp;quot;&amp;lt;h3&amp;gt;Is IE 8?&amp;lt;/h3&amp;gt;&amp;quot; + $.browser.msie8 +
             &amp;quot;&amp;lt;h3&amp;gt;Is IE 7?&amp;lt;/h3&amp;gt;&amp;quot; + $.browser.msie7 +
             &amp;quot;&amp;lt;h3&amp;gt;Is IE 6?&amp;lt;/h3&amp;gt;&amp;quot; + $.browser.msie6
         );
 		if($.browser.msie8){
 			alert(&#39;IE8真让人头疼！！&#39;);
 		}
    }
    
    //new 
    function checkTwo(){
    	$.browser.mozilla = /firefox/.test(navigator.userAgent.toLowerCase());
    	$.browser.webkit = /webkit/.test(navigator.userAgent.toLowerCase());
    	$.browser.opera = /opera/.test(navigator.userAgent.toLowerCase());
    	$.browser.msie = /msie/.test(navigator.userAgent.toLowerCase()); //判断是否是IE
    	
   	 	if(/msie/.test(navigator.userAgent.toLowerCase())){
   	    	console.log(&#39;IE5-10&#39;);
   	 	}
    	
		if (&#39;undefined&#39; == typeof (document.body.style.maxHeight)) {
			console.log(&#39;IE6&#39;);
		}
		
		if (!$.support.leadingWhitespace) {
			console.log(&#39;IE5-8&#39;);
		}
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;文件上传限制&#34;&gt;文件上传限制&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;h3&amp;gt;限制文件类型上传及多文件上传&amp;lt;/h3&amp;gt;
    &amp;lt;input id=&amp;quot;moreFile&amp;quot; type=&amp;quot;file&amp;quot; accept=&amp;quot;.doc,.docx,.xls,.xlsx&amp;quot;
        multiple /&amp;gt; &amp;lt;input type=&amp;quot;button&amp;quot; onclick=&amp;quot;checkFile()&amp;quot; value=&amp;quot;提交&amp;quot; /&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;h3&amp;gt;限制文件类型上传-显示限制&amp;lt;/h3&amp;gt;
    &amp;lt;br /&amp;gt;浏览时只显示指定文件类型 xls、xlsx、csv &amp;lt;input id=&amp;quot;fileSelect&amp;quot; type=&amp;quot;file&amp;quot;
        accept=&amp;quot;.csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel&amp;quot; /&amp;gt;

    &amp;lt;br /&amp;gt;
    &amp;lt;br /&amp;gt;For CSV files (.csv), use: &amp;lt;br /&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;.csv&amp;quot; /&amp;gt; &amp;lt;br /&amp;gt;
    &amp;lt;br /&amp;gt;For Excel Files 2003-2007 (.xls), use: &amp;lt;br /&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;application/vnd.ms-excel&amp;quot; /&amp;gt; &amp;lt;br /&amp;gt;
    &amp;lt;br /&amp;gt;For Excel Files 2010 (.xlsx), use: &amp;lt;br /&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot; /&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;br /&amp;gt;For Text Files (.txt) use: &amp;lt;br /&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;text/plain&amp;quot; /&amp;gt; &amp;lt;br /&amp;gt;
    &amp;lt;br /&amp;gt;For Image Files (.png/.jpg/etc), use: &amp;lt;br /&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;image/*&amp;quot; /&amp;gt; &amp;lt;br /&amp;gt;
    &amp;lt;br /&amp;gt;For HTML Files (.htm,.html), use: &amp;lt;br /&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;text/html&amp;quot; /&amp;gt; &amp;lt;br /&amp;gt;
    &amp;lt;br /&amp;gt;For Video Files (.avi, .mpg, .mpeg, .mp4), use: &amp;lt;br /&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;video/*&amp;quot; /&amp;gt; &amp;lt;br /&amp;gt;
    &amp;lt;br /&amp;gt;For Audio Files (.mp3, .wav, etc), use: &amp;lt;br /&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;audio/*&amp;quot; /&amp;gt; &amp;lt;br /&amp;gt;
    &amp;lt;br /&amp;gt;For PDF Files, use: &amp;lt;br /&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;.pdf&amp;quot; /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	function checkFile(){
		var fileAccept = $(&amp;quot;#moreFile&amp;quot;).val().split(&amp;quot;.&amp;quot;)[1];//获取上传文件的后缀  
		if( fileAccept!=&amp;quot;doc&amp;quot; &amp;amp;&amp;amp; fileAccept!=&amp;quot;docx&amp;quot;&amp;amp;&amp;amp; fileAccept!=&amp;quot;xls&amp;quot;&amp;amp;&amp;amp; fileAccept!=&amp;quot;xlsx&amp;quot; ){  
		    alert(&amp;quot;只能上传.doc,.docx,.xls,.xlsx的文件！&amp;quot;);  
		}  
		
		//获取多文件上传的所有文件名  
		var filePaths = $(&amp;quot;#moreFile&amp;quot;)[0].files;//或者这样写 document.getElementById(&amp;quot;id&amp;quot;).files;  
		for( var i=0;i&amp;lt;filePaths.length; i++ ){  
		    alert(filePaths[i].name);  
		}
	}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;输入框input校验&#34;&gt;输入框input校验&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;br /&amp;gt;JS判断只能是数字和小数点 1.文本框只能输入数字代码(小数点也不能输入)
&amp;lt;br /&amp;gt;
&amp;lt;input onkeyup=&amp;quot;this.value=this.value.replace(/\D/g,&#39;&#39;)&amp;quot; onafterpaste=&amp;quot;this.value=this.value.replace(/\D/g,&#39;&#39;)&amp;quot;&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;2.只能输入数字,能输小数点.
&amp;lt;br /&amp;gt;
&amp;lt;input onkeyup=&amp;quot;if(isNaN(value))execCommand(&#39;undo&#39;)&amp;quot; onafterpaste=&amp;quot;if(isNaN(value))execCommand(&#39;undo&#39;)&amp;quot;&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;input name=txt1 onchange=&amp;quot;if(/\D/.test(this.value)){alert(&#39;只能输入数字&#39;);this.value=&#39;&#39;;}&amp;quot;&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;3.数字和小数点方法二
&amp;lt;br /&amp;gt;
&amp;lt;input type=text t_value=&amp;quot;&amp;quot; o_value=&amp;quot;&amp;quot;
    onkeypress=&amp;quot;if(!this.value.match(/^[\+\-]?\d*?\.?\d*?$/))this.value=this.t_value;else this.t_value=this.value;if(this.value.match(/^(?:[\+\-]?\d+(?:\.\d+)?)?$/))this.o_value=this.value&amp;quot;
    onkeyup=&amp;quot;if(!this.value.match(/^[\+\-]?\d*?\.?\d*?$/))this.value=this.t_value;else this.t_value=this.value;if(this.value.match(/^(?:[\+\-]?\d+(?:\.\d+)?)?$/))this.o_value=this.value&amp;quot;
    onblur=&amp;quot;if(!this.value.match(/^(?:[\+\-]?\d+(?:\.\d+)?|\.\d*?)?$/))this.value=this.o_value;else{if(this.value.match(/^\.\d+$/))this.value=0+this.value;if(this.value.match(/^\.$/))this.value=0;this.o_value=this.value}&amp;quot;&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;4.只能输入字母和汉字
&amp;lt;br /&amp;gt;
&amp;lt;input onkeyup=&amp;quot;value=value.replace(/[\d]/g,&#39;&#39;)&amp;quot; maxlength=10 name=&amp;quot;Numbers&amp;quot;
    onbeforepaste=&amp;quot;clipboardData.setData(&#39;text&#39;,clipboardData.getData(&#39;text&#39;).replace(/[\d]/g,&#39;&#39;))&amp;quot;&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;5.只能输入英文字母和数字,不能输入中文
&amp;lt;br /&amp;gt;
&amp;lt;input onkeyup=&amp;quot;value=value.replace(/[^\w\.\/]/ig,&#39;&#39;)&amp;quot;&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;6.只能输入数字和英文
&amp;lt;font color=&amp;quot;Red&amp;quot;&amp;gt;chun&amp;lt;/font&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;input onKeyUp=&amp;quot;value=value.replace(/[^\d|chun]/g,&#39;&#39;)&amp;quot;&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;7.小数点后只能有最多两位(数字,中文都可输入),不能输入字母和运算符号:
&amp;lt;br /&amp;gt;
&amp;lt;input onKeyPress=&amp;quot;if((event.keyCode&amp;lt;48 || event.keyCode&amp;gt;57) &amp;amp;&amp;amp; event.keyCode!=46 || /\.\d\d$/.test(value))event.returnValue=false&amp;quot;&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;8.小数点后只能有最多两位(数字,字母,中文都可输入),可以输入运算符号:
&amp;lt;br /&amp;gt;
&amp;lt;input onkeyup=&amp;quot;this.value=this.value.replace(/^(\-)*(\d+)\.(\d\d).*$/,&#39;$1$2.$3&#39;)&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;contenteditable-进行文本输入编辑&#34;&gt;contenteditable 进行文本输入编辑&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p contenteditable=&amp;quot;true&amp;quot;&amp;gt;这是一段可编辑的段落。请试着编辑该文本。&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;table-模版&#34;&gt;table 模版&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;table class=&amp;quot;tableCommon&amp;quot; width=&amp;quot;30%&amp;quot; border=&amp;quot;1&amp;quot; cellspacing=&amp;quot;5&amp;quot; cellpadding=&amp;quot;10&amp;quot;&amp;gt;
    &amp;lt;thead style=&amp;quot;display: block;&amp;quot;&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;1&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;2&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;3&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;4&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/thead&amp;gt;
    &amp;lt;tbody style=&amp;quot;display: block; height: 50px; overflow-y: scroll;&amp;quot;&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;10&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;30&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;40&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;10&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;30&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;40&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;append追加元素用法例子&#34;&gt;append追加元素用法例子&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul class=&amp;quot;selectUserList&amp;quot;&amp;gt;&amp;lt;/ul&amp;gt;

&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	$(function(){
		for(var i = 0;i&amp;lt;10;i++){
			addUser({id: i, userName: i+&#39;a&#39;, name: i+&#39;b&#39;,mobile: i*10});
		}
	})
	function addUser(data) {
	    var _li = $(&amp;quot;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&amp;quot;);//li
	    var _em = $(&amp;quot;&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;&amp;quot;);//li-em
	    var _a = $(&#39;&amp;lt;a class=&amp;quot;closebtn&amp;quot; href=&amp;quot;javascript:void(0);&amp;quot; onclick=&amp;quot;closeBtnFunc(this)&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&#39;);//li-a
	    var _hiden_username = $(&#39;&amp;lt;input type=&amp;quot;hidden&amp;quot; class=&amp;quot;_hidenUsername&amp;quot;/&amp;gt;&#39;);//li-input name:_hidenUsername
	    var _hiden_tel = $(&#39;&amp;lt;input type=&amp;quot;hidden&amp;quot; class=&amp;quot;_hidenMobile&amp;quot;/&amp;gt;&#39;);//li-input name:_hiden_tel
	    
	    _hiden_username.val(data.userName);
	    _hiden_tel.val(data.mobile);
	    _em.text(data.userName + &amp;quot;(&amp;quot; + data.mobile + &amp;quot;)&amp;quot;);
	    
	    _li.append(_em);
	    _li.append(_a);
	    _li.append(_hiden_username);
	    _li.append(_hiden_tel);
	    $(&amp;quot;.selectUserList&amp;quot;).append(_li);
	}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;a标签-调用方法的正确姿势&#34;&gt;a标签 调用方法的正确姿势&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;javascript:xixi();&amp;quot;&amp;gt;a1&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;br /&gt;
这是我们平台上常用的方法，但是这种方法在传递this等参数的时候很容易出问题，&lt;br /&gt;
而且javascript:协议作为a的href属性的时候不仅会导致不必要的触发window.onbeforeunload事件，&lt;br /&gt;
在IE里面更会使gif动画图片停止播放。&lt;br /&gt;
W3C标准不推荐在href里面执行javascript语句&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;javascript:void(0);&amp;quot; onclick=&amp;quot;xixi()&amp;quot;&amp;gt;a2&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;br /&gt;
这种方法是很多网站最常用的方法，也是最周全的方法，onclick方法负责执行js函数，&lt;br /&gt;
而void是一个操作符，void(0)返回undefined，地址不发生跳转。&lt;br /&gt;
而且这种方法不会像第一种方法一样直接将js方法暴露在浏览器的状态栏。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;javascript:;&amp;quot; onclick=&amp;quot;xixi()&amp;quot;&amp;gt;a3&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;br /&gt;
这种方法跟跟2种类似，区别只是执行了一条空的js代码。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;#&amp;quot; onclick=&amp;quot;xixi()&amp;quot;&amp;gt;a4&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;br /&gt;
这种方法也是网上很常见的代码，#是标签内置的一个方法，代表top的作用。&lt;br /&gt;
所以用这种方法点击后网页后返回到页面的最顶端。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;#&amp;quot; onclick=&amp;quot;xixi();return false&amp;quot;&amp;gt;a5&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;br /&gt;
这种方法点击执行了js函数后return false，页面不发生跳转，执行后还是在页面的当前位置。&lt;/p&gt;

&lt;p&gt;综合上述，在a中调用js函数最适当的方法推荐使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;javascript:void(0);&amp;quot; onclick=&amp;quot;xixi()&amp;quot;&amp;gt;a2&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;a href=&amp;quot;javascript:;&amp;quot; onclick=&amp;quot;xixi()&amp;quot;&amp;gt;a3&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot; onclick=&amp;quot;xixi();return false&amp;quot;&amp;gt;a5&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>[置顶]GK</title>
      <link>https://ianeiu.github.io/2018/09/11/%E7%BD%AE%E9%A1%B6gk/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/11/%E7%BD%AE%E9%A1%B6gk/</guid>
      
        <description>

&lt;h3 id=&#34;http&#34;&gt;HTTP&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://ianeiu.github.io/resouce/GK/思维导图/HTTP超文本协议.png&#34; target=&#34;blank&#34;&gt;HTTP超文本协议&lt;/a&gt;
来源：微信公众号 java思维导图&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/haif_city/article/details/78333213&#34; target=&#34;blank&#34;&gt;浅谈HTTP中Get、Post、Put与Delete的区别&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mybatis&#34;&gt;mybatis&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/ClassNotFoundException/p/6425558.html&#34; target=&#34;blank&#34;&gt;Spring-Mybatis &amp;mdash; 配置SqlSessionFactoryBean，整合Spring-Mybatis&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/zaberyjava/article/details/82111243&#34; target=&#34;blank&#34;&gt;Springboot整合mybatis，配置驼峰命名转换&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/davidgu/p/6270761.html&#34; target=&#34;blank&#34;&gt;MyBatis - (二) 一对一映射和一对多映射&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/lwpczy1/article/details/79158535&#34; target=&#34;blank&#34;&gt;Mybatis(Oracle)批量插入、批量更新、批量删除&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.cnblogs.com/xunux/p/4882761.html&#34; target=&#34;blank&#34;&gt;mybatis批量插入数据到oracle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/sou_liu/article/details/47755635&#34; target=&#34;blank&#34;&gt;Mybatis select返回值为map时,选取表字段的两列作为key,value&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_31138523/article/details/64912635&#34; target=&#34;blank&#34;&gt;关于mybatis的xml文件中使用 &amp;gt;= 或者&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;eclipse&#34;&gt;Eclipse&lt;/h3&gt;

&lt;h4 id=&#34;与svn&#34;&gt;与SVN&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/v123411739/article/details/22512133&#34; target=&#34;blank&#34;&gt;Eclipse中使用SVN：&lt;/a&gt;
&lt;a href=&#34;https://ianeiu.github.io/resouce/GK/eclipse/Eclipse-工具-使用SVN.docx&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;与maven&#34;&gt;与Maven&lt;/h4&gt;

&lt;p&gt;如何在eclipse jee中创建Maven project并且转换为Dynamic web project（原文链接找不到）：
&lt;a href=&#34;https://ianeiu.github.io/resouce/GK/eclipse/如何在eclipse jee中创建Maven project并且转换为Dynamic web project.docx&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如何在eclipse jee中检出项目并转换为Maven project,最后转换为Dynamic web project（原文链接找不到）：
&lt;a href=&#34;https://ianeiu.github.io/resouce/GK/eclipse/如何在eclipse jee中检出项目并转换为Maven project,最后转换为Dynamic web project.docx&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;项目跨域&#34;&gt;项目跨域&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/teach/p/5888958.html&#34; target=&#34;blank&#34;&gt;解决项目中的跨域操作问题&lt;/a&gt;
&lt;a href=&#34;https://ianeiu.github.io/resouce/GK/项目跨域问题.docx&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;db-ref&#34;&gt;DB-REF&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/hoobey/p/6010804.html&#34; target=&#34;blank&#34;&gt;Oracle 11g安装步骤详谈&lt;/a&gt;
&lt;a href=&#34;https://ianeiu.github.io/resouce/GK/Oracle 11g安装图文攻略.docx&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jb51.net/article/113630.htm&#34; target=&#34;blank&#34;&gt;win10下安装两个MySQL5.6.35数据库&lt;/a&gt;
&lt;a href=&#34;https://ianeiu.github.io/resouce/GK/MySQL解压版安装-安装俩个MySQL.docx&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jingyan.baidu.com/article/f3ad7d0ffc061a09c3345bf0.html&#34; target=&#34;blank&#34;&gt;MySQL解压版安装&lt;/a&gt;
&lt;a href=&#34;https://ianeiu.github.io/resouce/GK/MySQL解压版安装.docx&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/dreamcatchergo/article/details/27688601?utm_source=tuicool&amp;utm_medium=referral&#34; target=&#34;blank&#34;&gt; 连接oracle提示Cannot create oci environment 解决方案&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000006158186#articleHeader6&#34; target=&#34;blank&#34;&gt;MySQL大表优化方案&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;杂谈&#34;&gt;杂谈&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/antineutrino/article/details/6763722/&#34; target=&#34;blank&#34;&gt;前缀、中缀、后缀表达式&lt;/a&gt;
&lt;a href=&#34;https://ianeiu.github.io/resouce/GK/前缀、中缀、后缀表达式.docx&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/hcw52592/article/details/69230486&#34; target=&#34;blank&#34;&gt;服务器绑定域名详解&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cmsblogs.com/?p=1220&#34; target=&#34;blank&#34;&gt;fail-fast机制&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.csdn.net/biglxl/article/details/77462266&#34; target=&#34;blank&#34;&gt;fail-fast和fail-safe详解&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/cdf-opensource-007/p/6337448.html&#34; target=&#34;blank&#34;&gt;详解get请求和post请求参数中文乱码的解决办法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u010416101/article/details/80625862&#34; target=&#34;blank&#34;&gt;cron 表达式0 0/10 * * * 与 0 */10 * * *的区别&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/huhaoshida/p/5412615.html&#34; target=&#34;blank&#34;&gt;Ftp主动模式和被动模式以及java连接ftp模式设置&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/46a2fc4a1d00&#34; target=&#34;blank&#34;&gt;你真的了解什么是冒烟测试么？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/yeyublog/p/6438373.html&#34; target=&#34;blank&#34;&gt;web实现负载均衡的几种实现方式&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/woaic/p/6060262.html&#34; target=&#34;blank&#34;&gt;使用Fiddler抓取手机请求&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;sql&#34;&gt;SQL&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/benbenduo/p/4588612.html&#34; target=&#34;blank&#34;&gt;start with connect by prior 递归查询用法&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;spring&#34;&gt;Spring&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/xiaoyi52/article/details/76686001&#34; target=&#34;blank&#34;&gt;过滤器使用与bean注入&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/a520songhai/article/details/80785072&#34; target=&#34;blank&#34;&gt;怎么在spring里面获取request 非controller层&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_27680317/article/details/79970590&#34; target=&#34;blank&#34;&gt;参数验证 @Validated 和 @Valid 的区别&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u014175572/article/details/44562393&#34; target=&#34;blank&#34;&gt;SpringMVC读取本地图片(byte[]流方式)显示到前端页面&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;springmvc&#34;&gt;SpringMVC&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/LeegooWang/article/details/79117457?utm_source=blogxgwz3&#34; target=&#34;blank&#34;&gt;为什么springmvc请求参数中的点后面的参数没了&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;springboot&#34;&gt;SpringBoot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u012702547/article/details/53740047&#34; target=&#34;blank&#34;&gt;初识Spring Boot框架&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.csdn.net/my__Sun_/article/details/72866329&#34; target=&#34;blank&#34;&gt;springboot的三种启动方式&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/winner-0715/p/6754994.html?utm_source=itdadao&amp;utm_medium=referral&#34; target=&#34;blank&#34;&gt;Spring Boot配置文件-多环境配置&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://www.cnblogs.com/austinspark-jessylu/p/8065215.html&#34; target=&#34;blank&#34;&gt;SpringBoot配置属性之Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/fuxin41/p/6289162.html&#34; target=&#34;blank&#34;&gt;Spring boot+CXF开发WebService Demo&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://www.cnblogs.com/xiaojf/p/7231529.html&#34; target=&#34;blank&#34;&gt;springboot1.5.4 集成cxf完整实例&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.csdn.net/catoop/article/details/50534006&#34; target=&#34;blank&#34;&gt;
Spring Boot 集成Shiro和CAS&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.hillfly.com/2017/179.html&#34; target=&#34;blank&#34;&gt;Shiro 自定义 filter 匹配异常&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/saytime/article/details/74937664&#34; target=&#34;blank&#34;&gt;SpringBoot（七）：SpringBoot整合Swagger2&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/xupeng874395012/article/details/68946676&#34; target=&#34;blank&#34;&gt;swagger注释API详细说明&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/hellopeng1/article/details/82227942&#34; target=&#34;blank&#34;&gt;Swagger2 关于Map参数在API文档中展示详细参数以及参数说明&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/magicalSam/p/7189476.html&#34; target=&#34;blank&#34;&gt;Spring Boot 系列（四）静态资源处理&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.csdn.net/cszhang570221322/article/details/78129565&#34; target=&#34;blank&#34;&gt;Spring Boot与Jsp&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.csdn.net/qq_34665539/article/details/74783910&#34; target=&#34;blank&#34;&gt;springboot中集成jsp，打成jar包可用jsp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.51cto.com/ityouknow/2091874&#34; target=&#34;blank&#34;&gt;Spring Boot 2.0(五)：感受 Docker 魅力， 排解决多应用部署之疼&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/K1g_6fn31NdkJO1Vr76YkA?tdsourcetag=s_pctim_aiomsg&#34; target=&#34;blank&#34;&gt;Spring Boot项目使用maven-assembly-plugin根据不同环境打包成tar.gz或者zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/Yaphst/article/details/82625159&#34; target=&#34;blank&#34;&gt;基于springboot的ajax异步文件上传&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u012834750/article/details/78734146&#34; target=&#34;blank&#34;&gt;SpringBoot系列(二)指定内置tomcat版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jb51.net/article/134750.htm?tdsourcetag=s_pctim_aiomsg&#34; target=&#34;blank&#34;&gt;spring boot启动时加载外部配置文件的方法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/java-zhao/p/5413845.html&#34; target=&#34;blank&#34;&gt;springboot + mybatis + 多数据源&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.cnblogs.com/java-zhao/p/5415896.html&#34; target=&#34;blank&#34;&gt;springboot + mybatis + 多数据源 （AOP实现）&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;springcloud&#34;&gt;SpringCloud&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/tuzongxun/article/details/72650100&#34; target=&#34;blank&#34;&gt;springcloud微服务二：Eureka服务治理之服务注册中心&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.csdn.net/kangkanglou/article/details/76407623&#34; target=&#34;blank&#34;&gt;Spring @FeignClient&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;logback&#34;&gt;logback&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/Cloud_July/article/details/77644401&#34; target=&#34;blank&#34;&gt;logback 根据不同业务打印日志到不同的文件&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;redis&#34;&gt;Redis&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/edisonyuan/article/details/52205272&#34; target=&#34;blank&#34;&gt;redis java客户端connection refused问题    &lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.mamicode.com/info-detail-2238112.html&#34; target=&#34;blank&#34;&gt;redis通过6379端口无法连接服务器&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;linux&#34;&gt;Linux&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u012498149/article/details/78772058&#34; target=&#34;blank&#34;&gt;CentOS7为firewalld添加开放端口及相关操作&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.csdn.net/Joe68227597/article/details/75207859&#34; target=&#34;blank&#34;&gt;Failed to start firewalld.service: Unit firewalld.service is masked&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.csdn.net/u014175572/article/details/53375049?utm_source=itdadao&amp;utm_medium=referral&#34; target=&#34;blank&#34;&gt;centos没有/sbin/service命令的恢复方法(-bash: service: command not found)&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.csdn.net/jackhuang17/article/details/74866951&#34; target=&#34;blank&#34;&gt;&lt;strong&gt;查看VMware虚拟机里的Centos7的IP&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.sina.com.cn/s/blog_dbbfe02e0101oqdj.html&#34; target=&#34;blank&#34;&gt;Linux文本安装&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.centos.bz/2018/03/centos查看端口占用情况和开启端口命令/&#34; target=&#34;blank&#34;&gt;Centos查看端口占用情况和开启端口命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.cnblogs.com/moxiaoan/p/5683743.html&#34; target=&#34;blank&#34;&gt;
CentOS7使用firewalld打开关闭防火墙与端口&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/liuxianan/p/linux_install_svn_server.html&#34; target=&#34;blank&#34;&gt;Linux下安装SVN服务端小白教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_22075041/article/details/78855708&#34; target=&#34;blank&#34;&gt;在linux下安装配置rabbitMQ详细教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/jing99/p/9684273.html&#34; target=&#34;blank&#34;&gt;Linux下Mysql安装（tar安装）&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;weblogic&#34;&gt;weblogic&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/java-class/p/7110266.html&#34; target=&#34;blank&#34;&gt;weblogic 部署问题定位与解决&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;java&#34;&gt;Java&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.51cto.com/art/201309/410205_all.htm&#34; target=&#34;blank&#34;&gt;浅谈Java中的Set、List、Map的区别&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/HaroldTihan/p/4316397.html&#34; target=&#34;blank&#34;&gt;Java sax、dom、pull解析xml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/lolashe/article/details/20806319&#34; target=&#34;blank&#34;&gt;HashMap,LinkedHashMap,TreeMap的区别&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/codeemperor/article/details/51351247&#34; target=&#34;blank&#34;&gt;［Java数据结构］从源码分析HashMap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/java/j-jtp06197.html&#34; target=&#34;blank&#34;&gt;正确使用 Volatile 变量&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/tk55/p/6655349.html&#34; target=&#34;blank&#34;&gt;request获取各种路径&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/1024Community/p/honery.html&#34; target=&#34;blank&#34;&gt;扒一扒JVM的垃圾回收机制，下次面试你准备好了吗&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/xqhys/article/details/81672317&#34; target=&#34;blank&#34;&gt;shiro+cas 单点登出解决（对shiro管理的session有效）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/kyunchen/article/details/52187514&#34; target=&#34;blank&#34;&gt;Java过滤器的使用和拦截排除的实现&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://rensanning.iteye.com/blog/1551831&#34; target=&#34;blank&#34;&gt;Java解析HTML之NekoHTML&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;设计模式&#34;&gt;设计模式&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/zhangchenliang/p/3700820.html&#34; target=&#34;blank&#34;&gt;简单工厂、工厂方法、抽象工厂、策略模式、策略与工厂的区别&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;前端&#34;&gt;前端&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/happyhaibei/p/6875469.html&#34; target=&#34;blank&#34;&gt;vue checkbox 双向绑定及初始化渲染&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/lfhy/p/6796653.html&#34; target=&#34;blank&#34;&gt;CSS3自定义滚动条样式 -webkit-scrollbar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/xiaoliu66007/p/5029909.html&#34; target=&#34;blank&#34;&gt;jQuery 1.9 .live() is not a function&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u011342720/article/details/81267908&#34; target=&#34;blank&#34;&gt;npm 安装详细教程(cnpm)&lt;/a&gt;&lt;/p&gt;

&lt;!--
&lt;a href=&#34;&#34; target=&#34;blank&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://ianeiu.github.io/resouce/GK/&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;
--&gt;
</description>
      
    </item>
    
    <item>
      <title>[置顶]GW</title>
      <link>https://ianeiu.github.io/2018/09/29/%E7%BD%AE%E9%A1%B6gw/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/29/%E7%BD%AE%E9%A1%B6gw/</guid>
      
        <description>

&lt;h3 id=&#34;tool&#34;&gt;tool&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cmd5.com/&#34; target=&#34;blank&#34;&gt;md5解密加密&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bejson.com/&#34; target=&#34;blank&#34;&gt;JSON校验&lt;/a&gt;、
&lt;a href=&#34;https://www.bejson.com/color/&#34; target=&#34;blank&#34;&gt;JSON着色工具&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://java.bejson.com/generator/&#34; target=&#34;blank&#34;&gt;SQL转JPA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tool.chinaz.com/tools/unicode.aspx&#34; target=&#34;blank&#34;&gt;编码转换&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ip138.com/&#34; target=&#34;blank&#34;&gt;IP查询&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://idea.lanyus.com/&#34; target=&#34;blank&#34;&gt;IDEA注册码&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mvnrepository.com/&#34; target=&#34;blank&#34;&gt;Maven仓库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://archive.apache.org/dist/tomcat/&#34; target=&#34;blank&#34;&gt;Tomcat下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://patorjk.com/software/taag/#p=display&amp;h=0&amp;v=0&amp;f=3D%20Diagonal&amp;t=wm&#34; target=&#34;blank&#34;&gt;艺术字（框框）&lt;/a&gt;、
&lt;a href=&#34;http://patorjk.com/text-color-fader/&#34; target=&#34;blank&#34;&gt;艺术字（色层）&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.tablesgenerator.com/&#34; target=&#34;blank&#34;&gt;MD建表&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jq22.com/&#34; target=&#34;blank&#34;&gt;jq插件库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.oracle.com/technetwork/java/archive-139210.html&#34; target=&#34;blank&#34;&gt;Oracle-Java下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.chinaz.com/&#34; target=&#34;blank&#34;&gt;站长之家&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.html5tricks.com/&#34; target=&#34;blank&#34;&gt;HTML5-DEMO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://doc.redisfans.com/&#34; target=&#34;blank&#34;&gt;redis命令参考&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ftp.osuosl.org/&#34; target=&#34;blank&#34;&gt;一个FTP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.draw.io/&#34; target=&#34;blank&#34;&gt;画图网站&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://msdn.itellyou.cn/&#34; target=&#34;blank&#34;&gt;微软工具&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;learn&#34;&gt;learn&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://yun.itheima.com/&#34; target=&#34;blank&#34;&gt;传智播客黑马&lt;/a&gt;、
&lt;a href=&#34;https://www.imooc.com/&#34; target=&#34;blank&#34;&gt;慕课网&lt;/a&gt;、
&lt;a href=&#34;https://www.imooc.com/course/list?c=java&amp;sort=pop&#34; target=&#34;blank&#34;&gt;慕课-Java高级&lt;/a&gt;、
&lt;a href=&#34;https://study.163.com/category/Java%20Web#/?pt=0&#34; target=&#34;blank&#34;&gt;网易云课堂&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/cate/java/&#34; target=&#34;blank&#34;&gt;博客园-JAVA&lt;/a&gt;、
&lt;a href=&#34;http://www.spring4all.com/&#34; target=&#34;blank&#34;&gt;spring社区&lt;/a&gt;、
&lt;a href=&#34;https://www.yiibai.com/&#34; target=&#34;blank&#34;&gt;易百-多方面教程&lt;/a&gt;、
&lt;a href=&#34;http://www.runoob.com/java/java-examples.html&#34; target=&#34;blank&#34;&gt;菜鸟Java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yjmyzz.cnblogs.com/&#34; target=&#34;blank&#34;&gt;菩提树下的杨过&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/hengyunabc&#34; target=&#34;blank&#34;&gt;横云断岭的专栏&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.cnblogs.com/goody9807/&#34; target=&#34;blank&#34;&gt;PointNet&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://feelschaotic.github.io/&#34; target=&#34;blank&#34;&gt;fct&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://crossoverjie.top/categories/SSM/&#34; target=&#34;blank&#34;&gt;coj&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.ityouknow.com/&#34; target=&#34;blank&#34;&gt;纯洁的微笑&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.cnblogs.com/itdragon/&#34; target=&#34;blank&#34;&gt;ITDragon&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.cnblogs.com/ClassNotFoundException/&#34; target=&#34;blank&#34;&gt;limeOracle&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/tuzongxun/article/category/6931500&#34; target=&#34;blank&#34;&gt;java修行路_涂宗勋&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/briblue&#34; target=&#34;blank&#34;&gt;frank 的专栏&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/column/details/chenssy-javaimpr.html&#34; target=&#34;blank&#34;&gt;chenssy&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://me.csdn.net/u013761665&#34; target=&#34;blank&#34;&gt;Q-WHai&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/ns_code&#34; target=&#34;blank&#34;&gt;兰亭风雨&lt;/a&gt;&lt;/p&gt;

&lt;!--
&lt;a href=&#34;&#34; target=&#34;blank&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://ianeiu.github.io/resouce/GK/&#34; target=&#34;blank&#34;&gt;下载DOC&lt;/a&gt;
--&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://ianeiu.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://ianeiu.github.io/about/</guid>
      
        <description>

&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;邮箱：weimianwu@foxmail.com&lt;/li&gt;
&lt;li&gt;微信：qq747151921&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;友链&#34;&gt;友链&lt;/h3&gt;

&lt;p&gt;木有&lt;/p&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>Git——记录</title>
      <link>https://ianeiu.github.io/2019/07/01/git%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2019/07/01/git%E8%AE%B0%E5%BD%95/</guid>
      
        <description>

&lt;h2 id=&#34;git使用教程&#34;&gt;Git使用教程&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/tugenhua0707/p/4050072.html&#34; target=&#34;blank&#34;&gt;Git使用教程&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;几条常用命令记录&#34;&gt;几条常用命令记录&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt; 查看本地分支文件信息，确保更新时不产生冲突&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout –- [file name]&lt;/code&gt;  若文件有修改，可以还原到最初状态; 若文件需要更新到服务器上，应该先merge到服务器，再更新到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt; 查看当前分支情况&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout remote branch&lt;/code&gt;  若分支为本地分支，则需切换到服务器的远程分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt; 拉取代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout branchA&lt;/code&gt; 切换到分支branchA&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch branchB&lt;/code&gt; 创建分支branchB&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-工具本地用户名修改&#34;&gt;git 工具本地用户名修改&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;获取当前的用户名  &lt;code&gt;git config user.name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改用户名 &lt;code&gt;git config --global user.name &amp;quot;用户名&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reset-revert&#34;&gt;reset revert&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;如果想恢复到之前某个提交的版本，且那个版本之后提交的版本我们都不要了，就可以用 reset&lt;/li&gt;
&lt;li&gt;如果我们想恢复之前的某一版本（该版本不是merge类型），但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用 revert&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;墙裂推荐文章
&lt;a href=&#34;https://blog.csdn.net/yxlshk/article/details/79944535&#34; target=&#34;blank&#34;&gt;Git恢复之前版本的两种方法reset、revert（图文详解）&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;恢复修改的文件&#34;&gt;恢复修改的文件&lt;/h2&gt;

&lt;p&gt;情况1：&lt;br /&gt;
修改了文件，没有做过任何git操作，直接 &lt;code&gt;git checkout -- test.txt&lt;/code&gt; 就OK了。&lt;/p&gt;

&lt;p&gt;情况2：&lt;br /&gt;
修改了文件，只进行了git add，执行 &lt;code&gt;git reset HEAD&lt;/code&gt; 回退到当前版本, 然后&lt;code&gt;git checkout -- test.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;情况3：&lt;br /&gt;
修改了文件，进行了git add 和 git commit，执行 &lt;code&gt;git reset HEAD^&lt;/code&gt; 回退到上一个版本, 然后&lt;code&gt;git checkout -- test.txt&lt;/code&gt;&lt;br /&gt;
使用IDEA &lt;a href=&#34;https://blog.csdn.net/qq_36033658/article/details/81902589&#34; target=&#34;blank&#34;&gt;git还原commit（push之前）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;情况4：
修改了文件，进行了git add 、 git commit 、git push，根据版本号从新到旧依次执行&lt;code&gt;git revert [版本号]&lt;/code&gt;、然后 &lt;code&gt;git commit&lt;/code&gt;、&lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;分支&#34;&gt;分支&lt;/h2&gt;

&lt;p&gt;建议使用IDEA
&lt;a href=&#34;https://www.malaoshi.top/show_1EF2E613IFX.html&#34; target=&#34;blank&#34;&gt;idea git的使用（四）git建立分支与合并分支&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>DB——SQL</title>
      <link>https://ianeiu.github.io/2019/02/14/dbsql/</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2019/02/14/dbsql/</guid>
      
        <description>

&lt;h3 id=&#34;数据定义语言-ddl&#34;&gt;数据定义语言（DDL）&lt;/h3&gt;

&lt;h4 id=&#34;清空表数据&#34;&gt;清空表数据&lt;/h4&gt;

&lt;p&gt;TRUNCATE TABLE TABLENAME;&lt;/p&gt;

&lt;h4 id=&#34;修改字段类型或长度&#34;&gt;修改字段类型或长度&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;标准SQL修改字段类型和长度语句：ALTER TABLE tableName modify column columnName 类型&lt;br /&gt;
例如Mysql的修改字段类型语句：alter table test modify column name varchar(255);&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Oracle修改字段类型和长度语句：ALTER TABLE tableName modify(columnName 类型)&lt;br /&gt;
例如 ALTER TABLE TB_YXT_WORK_DATA_LOG modify （FAILURE_LOG_PATH VARCHAR2(200)）;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;oracle表字段的增加-增加备注-删除-修改和重命名&#34;&gt;Oracle表字段的增加、增加备注、删除、修改和重命名&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;增加字段语法：alter table tablename add (column datatype [default value][null/not null],….);&lt;br /&gt;
说明：alter table 表名 add (字段名 字段类型 默认值 是否为空);&lt;br /&gt;
例：alter table sf_users add (HeadPIC blob);&lt;br /&gt;
例：alter table sf_users add (userName varchar2(30) default &amp;lsquo;空&amp;rsquo; not null);&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;字段增加备注&lt;br /&gt;
例：comment on column tb_yx_effective_month.ZK_CANCEL_AMOUNT is &amp;lsquo;折扣投入金额&amp;rsquo;;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;修改字段的语法：alter table tablename modify (column datatype [default value][null/not null],….);&lt;br /&gt;
说明：alter table 表名 modify (字段名 字段类型 默认值 是否为空);&lt;br /&gt;
例：alter table sf_InvoiceApply modify (BILLCODE number(4));&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;删除字段的语法：alter table tablename drop (column);&lt;br /&gt;
说明：alter table 表名 drop column 字段名;&lt;br /&gt;
例：alter table sf_users drop column HeadPIC;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;字段的重命名&lt;br /&gt;
说明：alter table 表名 rename  column  列名 to 新列名   （其中：column是关键字）&lt;br /&gt;
例：alter table sf_InvoiceApply rename column PIC to NEWPIC;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;表的重命名&lt;br /&gt;
说明：alter table 表名 rename to  新表名&lt;br /&gt;
例：alter table sf_InvoiceApply rename to  sf_New_InvoiceApply;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;oracle复制表结构和表数据&#34;&gt;oracle复制表结构和表数据&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;复制表结构及其数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table table_name_new as select * from table_name_old
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;只复制表结构&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--fun1
create table table_name_new as select * from table_name_old;
-- fun2
create table table_name_new like table_name_old
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;只复制表数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--如果两个表结构一样
insert into table_name_new select * from table_name_old
--如果两个表结构不一样
insert into table_name_new(column1,column2...) select column1,column2... from table_name_old
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;数据操作语言-dml-data-manipulation-language&#34;&gt;数据操作语言（DML Data Manipulation Language）&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;去除带空格数据的空格&#34;&gt;去除带空格数据的空格&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;\\删除左空格  
update tb_test set product_name=rtrim(product_name,&#39; &#39;);
\\删除右空格  
update tb_test set product_name=ltrim(product_name,&#39; &#39;);
\\删除左右空格
update tb_test set product_name=trim(product_name);
\\删除所有空格
update tb_test set product_name=replace(product_name,&#39; &#39;,&#39;&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;数据查询语言-dql-data-query-language&#34;&gt;数据查询语言（DQL Data Query Language）&lt;/h3&gt;

&lt;h4 id=&#34;oracle-日期-时间-相关查询&#34;&gt;Oracle 日期-时间 相关查询&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;--获取当前月份的第一天
SELECT TRUNC (SYSDATE, &#39;MONTH&#39;) FROM DUAL;

--获取当前月份的最后一天
SELECT TRUNC (LAST_DAY (SYSDATE)) FROM dual;

--获取当前年份的第一天
SELECT TRUNC (SYSDATE, &#39;YEAR&#39;) FROM DUAL;

--获取明年的第一天
SELECT ADD_MONTHS (TRUNC (SYSDATE, &#39;YEAR&#39;), 12) FROM DUAL;

--获取当前年份的最后一天
SELECT ADD_MONTHS (TRUNC (SYSDATE, &#39;YEAR&#39;), 12) - 1 FROM DUAL;

--获取当前月份的天数
SELECT CAST (TO_CHAR (LAST_DAY (SYSDATE), &#39;dd&#39;) AS INT) FROM DUAL;

--获取当前月份剩下的天数
SELECT SYSDATE, LAST_DAY (SYSDATE) &amp;quot;Last&amp;quot;, LAST_DAY (SYSDATE) - SYSDATE &amp;quot;Days left&amp;quot; FROM DUAL;

--计算员工入职的天数
SELECT TRUNC(sysdate) - TRUNC(e.hire_date) FROM employees e;

--获取直到目前为止今天过去的秒数（从 00：00 开始算）
SELECT (SYSDATE - TRUNC (SYSDATE)) * 24 * 60 * 60 num_of_sec_since_morning  FROM DUAL;

--获取今天剩下的秒数（直到 23：59：59 结束）
SELECT (TRUNC (SYSDATE+1) - SYSDATE) * 24 * 60 * 60 num_of_sec_left FROM DUAL;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;oracle-if-else功能实现&#34;&gt;Oracle if/else功能实现&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;if a=...  then ......... end if&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if a=... then...... else .... end if&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if a=..  then ...... elsif a=..  then .... end if&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DECODE(value,if1,then1,if2,then2,if3,then3,...,else)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;case when a=&#39;1&#39;then &#39;xxxx&#39; when a=&#39;2&#39; then &#39;ssss&#39; else &#39;zzzzz&#39; end as&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;oracle-数学&#34;&gt;Oracle 数学&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;--把数值转换成文字
SELECT TO_CHAR (TO_DATE (1526, &#39;j&#39;), &#39;jsp&#39;) FROM DUAL;

--在包的源代码中查询字符串
SELECT * FROM dba_source WHERE UPPER (text) LIKE &#39;%FOO_SOMETHING%&#39; AND owner = &#39;TSUSER&#39;;

--查询表中的最后一个记录
SELECT * FROM TB_DQDP_USER  WHERE ROWID IN (SELECT MAX (ROWID) FROM TB_DQDP_USER);
SELECT * FROM TB_DQDP_USER MINUS SELECT * FROM TB_DQDP_USER WHERE ROWNUM &amp;lt; (SELECT COUNT (*) FROM TB_DQDP_USER);

--在 Oracle 生成随机数据
SELECT LEVEL empl_id, MOD (ROWNUM, 50000) dept_id,TRUNC (DBMS_RANDOM.VALUE (1000, 500000), 2) salary
,DECODE (ROUND (DBMS_RANDOM.VALUE (1, 2)),  1, &#39;M&#39;,  2, &#39;F&#39;) gender
, TO_DATE ( ROUND (DBMS_RANDOM.VALUE (1, 28))|| &#39;-&#39;|| ROUND (DBMS_RANDOM.VALUE (1, 12))|| &#39;-&#39;|| ROUND (DBMS_RANDOM.VALUE (1900, 2010)),&#39;DD-MM-YYYY&#39;)
 dob,DBMS_RANDOM.STRING (&#39;x&#39;, DBMS_RANDOM.VALUE (20, 50)) address
 FROM DUAL CONNECT BY LEVEL &amp;lt; 10000;

--在 Oracle 中生成随机数值
SELECT ROUND (DBMS_RANDOM.VALUE () * 100) + 1 AS random_num FROM DUAL;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;oracle-数据库管理查询&#34;&gt;Oracle 数据库管理查询&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;--数据库版本信息
SELECT * FROM v$version;

--数据库默认信息
SELECT username,profile,default_tablespace,temporary_tablespace FROM dba_users;

--数据库字符设置信息
SELECT * FROM nls_database_parameters;

--获取 Oracle 版本
SELECT VALUE FROM v$system_parameter WHERE name = &#39;compatible&#39;;

--检查表空间的自动扩展开关
SELECT SUBSTR (file_name, 1, 50), AUTOEXTENSIBLE FROM dba_data_files;
SELECT tablespace_name, AUTOEXTENSIBLE FROM dba_data_files;

--调整没有添加数据文件的表空间
ALTER DATABASE DATAFILE &#39;/work/oradata/STARTST/STAR02D.dbf&#39; resize 2000M;
--在表空间添加数据文件
ALTER TABLESPACE data01 ADD DATAFILE &#39;/work/oradata/STARTST/data01.dbf&#39; SIZE 1000M AUTOEXTEND OFF;
--增加数据文件的大小
ALTER DATABASE DATAFILE &#39;/u01/app/Test_data_01.dbf&#39; RESIZE 2G;

--查询数据库的实际大小
SELECT SUM (bytes) / 1024 / 1024 / 1024 AS GB FROM dba_data_files;
--查询数据库中数据占用的大小或者是数据库使用细节
SELECT SUM (bytes) / 1024 / 1024 / 1024 AS GB FROM dba_segments;

--查询模式或者用户的大小
SELECT SUM (bytes / 1024 / 1024) &amp;quot;size&amp;quot; FROM dba_segments WHERE owner = &#39;&amp;amp;owner&#39;;

--查询数据库中每个用户最后使用的 SQL 查询
SELECT S.USERNAME || &#39;(&#39; || s.sid || &#39;)-&#39; || s.osuser UNAME, s.program
 || &#39;-&#39; || s.terminal || &#39;(&#39; || s.machine || &#39;)&#39; PROG, s.sid || &#39;/&#39; || s.serial# sid, s.status &amp;quot;Status&amp;quot;, p.spid,sql_text sqltext
  FROM v$sqltext_with_newlines t, V$SESSION s, v$process p WHERE t.address = s.sql_address AND p.addr = s.paddr(+)
 AND t.hash_value = s.sql_hash_value    ORDER BY s.sid, t.piece;

--查询用户 CPU 的使用率
SELECT ss.username, se.SID, VALUE / 100 cpu_usage_seconds FROM v$session ss, v$sesstat se, v$statname sn
  WHERE se.STATISTIC# = sn.STATISTIC# AND NAME LIKE &#39;%CPU used by this session%&#39; AND se.SID = ss.SID
  AND ss.status = &#39;ACTIVE&#39;AND ss.username IS NOT NULL ORDER BY VALUE DESC;

--查询数据库长查询进展情况
 SELECT a.sid, a.serial#, b.username, opname OPERATION, target OBJECT, TRUNC (elapsed_seconds, 5) &amp;quot;ET (s)&amp;quot;
 , TO_CHAR (start_time, &#39;HH24:MI:SS&#39;) start_time, ROUND ( (sofar / totalwork) * 100, 2) &amp;quot;COMPLETE (%)&amp;quot;
  FROM v$session_longops a, v$session b
   WHERE a.sid = b.sid AND b.username NOT IN (&#39;SYS&#39;, &#39;SYSTEM&#39;) AND totalwork &amp;gt; 0 ORDER BY elapsed_seconds;

--获取当前会话 ID，进程 ID，客户端 ID 等
SELECT b.sid, b.serial#,a.spid processid,b.process clientpid FROM v$process a, v$session b
 WHERE a.addr = b.paddr AND b.audsid = USERENV (&#39;sessionid&#39;);
--V$SESSION.SID AND V$SESSION.SERIAL# 是数据库进程 ID
--V$PROCESS.SPID 是数据库服务器后台进程 ID
--V$SESSION.PROCESS 是客户端 PROCESS ID, ON windows it IS : separated THE FIRST # IS THE PROCESS ID ON THE client AND 2nd one IS THE THREAD id.

--查询特定的模式或者表中执行的最后一个 SQL 语句
SELECT CREATED, TIMESTAMP, last_ddl_time FROM all_objects WHERE     OWNER = &#39;TSUSER&#39;   AND OBJECT_TYPE = &#39;TABLE&#39; AND OBJECT_NAME = &#39;TB_USER_EXTEND&#39;;

--在视图中查询并显示实际的 Oracle 连接
SELECT osuser,username,machine, program FROM v$session  ORDER BY osuser;

--查询并显示通过打开连接程序打开连接的组
SELECT program application, COUNT (program) Numero_Sesiones  FROM v$session GROUP BY program ORDER BY Numero_Sesiones DESC;

--查询并显示连接 Oracle 的用户和用户的会话数量
SELECT username Usuario_Oracle, COUNT (username) Numero_Sesiones FROM v$session GROUP BY username ORDER BY Numero_Sesiones DESC;

--获取拥有者的对象数量
SELECT owner, COUNT (owner) number_of_objects FROM dba_objects GROUP BY owner ORDER BY number_of_objects DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;oracle-随机id&#34;&gt;Oracle 随机ID&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;select sys_guid() from dual;

#序列
select S_SEQUENCE_ID.NEXTVAL from dual;

select to_char(sysdate,&#39;yyyymmdd&#39;) from dual;

select TO_CHAR(SYSDATE,&#39;yyyymmdd&#39;)||LPAD(TO_CHAR(S_SEQUENCE_ID.NEXTVAL),4,&#39;0&#39;) from dual;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sql字符型字段按数字型字段-排序实现方法&#34;&gt;SQL字符型字段按数字型字段 排序实现方法&lt;/h4&gt;

&lt;p&gt;得分字段为varchar,如果按得分排序结果可能是   1、10、11、123、1234、2、25、253、3&lt;br /&gt;
但是我们想要按照数字排序是   1、2 、3、10、11、25、123、253、1234&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将字段转为int排序: &lt;code&gt;ORDER BY CAST(字段名 AS DECIMAL)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ORDER BY 字段名+0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用绝对值函数ABS处理这个字段： &lt;code&gt;ORDER BY ABS(字段名)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;oracle-start-with-connect-by-prior-递归查询用法&#34;&gt;Oracle start with connect by prior 递归查询用法&lt;/h4&gt;

&lt;p&gt;初始化表及数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table MAS_BAKDEAL_TEMPLATE
(
  SEQID    NUMBER(10) not null,
  TAB_ID   NUMBER default 0,
  DEALNAME VARCHAR2(100) not null,
  PARENTID NUMBER not null,
  ISAUTO   CHAR(1),
  STATUS   CHAR(1)
)
-- Add comments to the table 
comment on table MAS_BAKDEAL_TEMPLATE
  is &#39;后续处理&#39;;
-- Add comments to the columns 
comment on column MAS_BAKDEAL_TEMPLATE.SEQID
  is &#39;主键&#39;;
comment on column MAS_BAKDEAL_TEMPLATE.TAB_ID
  is &#39;对应表 mas_templ_tab - tab_id字段&#39;;
comment on column MAS_BAKDEAL_TEMPLATE.DEALNAME
  is &#39;名称&#39;;
comment on column MAS_BAKDEAL_TEMPLATE.PARENTID
  is &#39;父ID&#39;;
comment on column MAS_BAKDEAL_TEMPLATE.ISAUTO
  is &#39;0代表自动，1代表手工&#39;;
comment on column MAS_BAKDEAL_TEMPLATE.STATUS
  is &#39;0启用，1作废&#39;;

insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (466, 5019, &#39;批量附赠送单&#39;, 3, &#39;0&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (4, 0, &#39;(二期)数据业务管理&#39;, 0, &#39;&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (469, 5019, &#39;与酬金系统自动数据接口&#39;, 4, &#39;0&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (93, 0, &#39;业务功能取消&#39;, 0, &#39;&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (1, 0, &#39;赠送话费&#39;, 0, &#39;&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (2, 5021, &#39;小额赠送&#39;, 1, &#39;0&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (42, 5022, &#39;充值券赠送&#39;, 1, &#39;0&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (94, 5019, &#39;12580取消&#39;, 93, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (95, 5019, &#39;短信套餐取消&#39;, 93, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (0, 886, &#39;后续处理列表&#39;, -1, &#39;&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (96, 5019, &#39;GPRS套餐取消&#39;, 93, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (97, 5019, &#39;手机证券取消&#39;, 93, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (98, 5019, &#39;校讯通取消&#39;, 93, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (122, 5019, &#39;中华国学开通&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (282, 5019, &#39;短信群发&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (243, 5019, &#39;一起玩吧用户活跃&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (84, 5019, &#39;12580开通&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (85, 5019, &#39;短信套餐开通&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (86, 5019, &#39;GPRS套餐开通&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (87, 5019, &#39;手机证券开通&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (91, 5019, &#39;校讯通开通&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (89, 0, &#39;BOSS办理开通&#39;, 0, &#39;&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (90, 5019, &#39;套餐办理&#39;, 89, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (262, 5019, &#39;数据核对&#39;, 89, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (81, 5197, &#39;缴费卡&#39;, 1, &#39;0&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (82, 5019, &#39;WEB赠送(20090111作废）&#39;, 1, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (83, 0, &#39;业务功能开通&#39;, 0, &#39;&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (92, 5019, &#39;营销案办理&#39;, 89, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (221, 5019, &#39;彩铃歌曲订购&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (301, 5280, &#39;M值赠送&#39;, 1, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (242, 5019, &#39;手机报开通&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (321, 5470, &#39;营销优惠赠送&#39;, 1, &#39;0&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (121, 5019, &#39;飞信开通&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (141, 5019, &#39;非彩铃套餐用户销户&#39;, 93, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (181, 5019, &#39;天气预报&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (182, 5019, &#39;秘书台&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (183, 5019, &#39;清单被查&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (201, 5019, &#39;开通5元彩铃功能&#39;, 83, &#39;1&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (342, 5627, &#39;09积分优惠赠送&#39;, 1, &#39;0&#39;, &#39;1&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (3, 0, &#39;批量业务&#39;, 0, &#39;&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (462, 16128, &#39;话费赠送&#39;, 1, &#39;0&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (463, 16129, &#39;积分赠送&#39;, 1, &#39;0&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (465, 5019, &#39;批开批销处理&#39;, 3, &#39;0&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (468, 5019, &#39;与CMP系统自动数据接口&#39;, 4, &#39;0&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (484, 5019, &#39;负话单赠送&#39;, 1, &#39;0&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (467, 16128, &#39;多营销方案赠送&#39;, 1, &#39;0&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (261, 0, &#39;能力平台&#39;, 0, &#39;&#39;, &#39;0&#39;);
insert into mas_bakdeal_template (SEQID, TAB_ID, DEALNAME, PARENTID, ISAUTO, STATUS)
values (485, 1739, &#39;目标号码&#39;, 261, &#39;0&#39;, &#39;0&#39;);
commit;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正常查询结果&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ianeiu.github.io/resouce/DB/normalSel.png&#34; style=&#34;width:70%&#34;/&gt;&lt;/p&gt;

&lt;p&gt;递归查询&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select t.*,level from mas_bakdeal_template t 
start with t.seqid=0 connect by prior t.seqid=t.parentid and t.status=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ianeiu.github.io/resouce/DB/sqlQJSel.png&#34; style=&#34;width:70%&#34;/&gt;&lt;/p&gt;

&lt;h4 id=&#34;查询某个字段最长的记录&#34;&gt;查询某个字段最长的记录&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;查询字段最长值 &lt;code&gt;select max(length(site_name)) from tb_zx_site&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查询某个字段最长的记录 &lt;code&gt;select site_name, length(site_name) from tb_zx_site where length(site_name) = ( select max(length(site_name)) from tb_zx_site  )&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;mysql查询时间字段间隔天数&#34;&gt;mysql查询时间字段间隔天数&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;select TO_DAYS(NOW())-TO_DAYS(i.create_time) as daynum from tb_learn_news_info i;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;mysql时间转换&#34;&gt;mysql时间转换&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;时间转字符串 &lt;code&gt;select date_format(now(), &#39;%Y-%m-%d&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;时间转时间戳 &lt;code&gt;select unix_timestamp(now())&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字符串转时间 &lt;code&gt;select str_to_date(&#39;2016-01-02&#39;, &#39;%Y-%m-%d %H&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字符串转时间戳 &lt;code&gt;select unix_timestamp(&#39;2016-01-02&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;时间戳转时间 &lt;code&gt;select from_unixtime(1451997924);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;时间戳转字符串 &lt;code&gt;select from_unixtime(1451997924,&#39;%Y-%d&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MySQL日期格式化（format）取值范围&lt;br /&gt;
秒&lt;br /&gt;
        %S、%s   两位数字形式的秒（ 00,01, &amp;hellip;, 59）&lt;br /&gt;
分&lt;br /&gt;
        %I、%i   两位数字形式的分（ 00,01, &amp;hellip;, 59）&lt;br /&gt;
小时&lt;br /&gt;
        %H  24小时制，两位数形式小时（00,01, &amp;hellip;,23）&lt;br /&gt;
        %h  12小时制，两位数形式小时（00,01, &amp;hellip;,12）&lt;br /&gt;
        %k  24小时制，数形式小时（0,1, &amp;hellip;,23）&lt;br /&gt;
        %l  12小时制，数形式小时（0,1, &amp;hellip;,12）&lt;br /&gt;
        %T  24小时制，时间形式（HH:mm:ss）&lt;br /&gt;
        %r   12小时制，时间形式（hh:mm:ss AM 或 PM）&lt;br /&gt;
        %p  AM上午或PM下午&lt;br /&gt;
周&lt;br /&gt;
        %W  一周中每一天的名称（Sunday,Monday, &amp;hellip;,Saturday）&lt;br /&gt;
        %a  一周中每一天名称的缩写（Sun,Mon, &amp;hellip;,Sat）&lt;br /&gt;
        %w  以数字形式标识周（0=Sunday,1=Monday, &amp;hellip;,6=Saturday）&lt;br /&gt;
        %U  数字表示周数，星期天为周中第一天&lt;br /&gt;
        %u  数字表示周数，星期一为周中第一天&lt;br /&gt;
天&lt;br /&gt;
        %d  两位数字表示月中天数（01,02, &amp;hellip;,31）&lt;br /&gt;
        %e   数字表示月中天数（1,2, &amp;hellip;,31）&lt;br /&gt;
        %D  英文后缀表示月中天数（1st,2nd,3rd &amp;hellip;）&lt;br /&gt;
        %j  以三位数字表示年中天数（001,002, &amp;hellip;,366）&lt;br /&gt;
月&lt;br /&gt;
        %M  英文月名（January,February, &amp;hellip;,December）&lt;br /&gt;
        %b  英文缩写月名（Jan,Feb, &amp;hellip;,Dec）&lt;br /&gt;
        %m  两位数字表示月份（01,02, &amp;hellip;,12）&lt;br /&gt;
        %c  数字表示月份（1,2, &amp;hellip;,12）&lt;br /&gt;
年&lt;br /&gt;
        %Y  四位数字表示的年份（2015,2016&amp;hellip;）&lt;br /&gt;
        %y   两位数字表示的年份（15,16&amp;hellip;）&lt;br /&gt;
文字输出&lt;br /&gt;
        %文字     直接输出文字内容&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>FTP的异常记录</title>
      <link>https://ianeiu.github.io/2019/02/13/ftp%E7%9A%84%E5%BC%82%E5%B8%B8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2019/02/13/ftp%E7%9A%84%E5%BC%82%E5%B8%B8%E8%AE%B0%E5%BD%95/</guid>
      
        <description>

&lt;h2 id=&#34;外网无法内网ftp-200-type-set-to-a&#34;&gt;外网无法内网FTP（200 Type set to A）&lt;/h2&gt;

&lt;p&gt;FTP 搭建好后在外网访问出想以下错误：&lt;br /&gt;
在Windows 资源管理器访问FTP站点弹出 FTP文件夹错误&lt;br /&gt;
            打开FTP 服务器上的文件夹时发生错误。请检查是否有权限范围该文件夹。&lt;br /&gt;
            详细信息：&lt;br /&gt;
    200 Type set to A.&lt;br /&gt;
    227 Entering Passive Mode (192,168,1,100,192,81)&lt;br /&gt;
解决方法：&lt;br /&gt;
      打开IE 浏览器 &amp;ndash; 工具 &amp;ndash; Internet 选项 &amp;ndash; 高级 &amp;ndash; 设置 &amp;ndash; 浏览 &amp;ndash; 把 使用被动FTP （用于防火墙和 DSL 调制解调器的兼容） 前面的勾去掉&lt;/p&gt;

&lt;h2 id=&#34;425-can-t-open-data-connection&#34;&gt;425 Can&amp;rsquo;t open data connection&lt;/h2&gt;

&lt;p&gt;解决：&lt;/p&gt;

&lt;p&gt;1、允许Passive Mode：在FTP服务端设置指定端口地址范围，比如21220-21260;&lt;br /&gt;
2、设置外网IP；&lt;br /&gt;
3、开通服务器指定端口&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Java笔记——基础</title>
      <link>https://ianeiu.github.io/2019/02/13/java%E7%AC%94%E8%AE%B0%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2019/02/13/java%E7%AC%94%E8%AE%B0%E5%9F%BA%E7%A1%80/</guid>
      
        <description>

&lt;p&gt;Java基础笔记整理&lt;/p&gt;

&lt;h2 id=&#34;关键字&#34;&gt;关键字&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用于定义数据类型&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;class interface  【引用数据类型：类、接口、数组】&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;boolean(1) char(2) byte(1) short(2) int(4) long(8) float(4) double(8) 【8个内置数据类型】&lt;br /&gt;
类型转换：&lt;br /&gt;
byte→short→int→→(可能丢失精度)float→→(可能丢失精度)long→→(可能丢失精度)double&lt;br /&gt;
char→int&lt;br /&gt;
int→long&lt;br /&gt;
int→double&lt;br /&gt;
float→double&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;void&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;用于定义数据类型值&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;true false null&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;用于定义流程控制&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if else switch case default【选择】&lt;br /&gt;
【switch jdk5前：case byte\short\int\char。jdk5：case：enum。jdk7：case String】&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;while do for【循环】&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;break continue return【流程跳转】
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&#34;border:1px solid red;padding:10px 10px&#34;&gt;
    直接for循环效率最高，其次是迭代器和 ForEach操作。作为语法糖，ForEach底层是使用迭代器实现，反编译后testForEach方法如下，可以看到，只比迭代器遍历多了生成中间变量这一步，因为性能也略微下降了一些。&lt;/div&gt;
    

&lt;pre&gt;&lt;code&gt;```
public static void testForEach(List list) {  
    for (Iterator iterator = list.iterator(); iterator.hasNext();) {  
        Object t = iterator.next();  
        Object obj = t;  
    }  
}  
```
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;用于定义访问权限修饰符

&lt;ul&gt;
&lt;li&gt;private public protected&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;用于定义类、函数、变量

&lt;ul&gt;
&lt;li&gt;abstract final static synchronized&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;类与类之间的关系

&lt;ul&gt;
&lt;li&gt;extends implements&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;建立实例、引用实例、判断实例

&lt;ul&gt;
&lt;li&gt;new this super instanceof&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;异常处理

&lt;ul&gt;
&lt;li&gt;try catch throw throws finally&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;包

&lt;ul&gt;
&lt;li&gt;package import&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;其它

&lt;ul&gt;
&lt;li&gt;native strictfp transient volatile assert&lt;/li&gt;
&lt;li&gt;goto const 【保留字】&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;标识符&#34;&gt;标识符&lt;/h2&gt;

&lt;p&gt;类、接口、方法、变量的名字&lt;br /&gt;
合法字符组成：英文字母、数字、$、_【不能以数字开头】&lt;/p&gt;

&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;单行 //&lt;/li&gt;
&lt;li&gt;多行 /**/&lt;/li&gt;
&lt;li&gt;文档 /**  */&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;常量&#34;&gt;常量&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;字面值 &amp;ldquo;hello&amp;rdquo;,10.true&lt;/li&gt;
&lt;li&gt;自定义 final int LINK_CODE = 0;

&lt;ul&gt;
&lt;li&gt;final 修饰变量（基本类型值不变，引用类型地址值不变）（只能在构造方法执行之前赋值一次）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;变量&#34;&gt;变量&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类变量（静态变量）&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;实例变量（成员变量）&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;局部变量（本地变量）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;位置（代码）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;类中&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;类中方法外&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;方法定义中、方法声明上&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;位置（内存）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;方法区中静态区&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;堆&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;栈&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;生命周期&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;随类加载而加载&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;随对象&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;随方法&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;this无法存在静态中；&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;静态方法只能访问静态变量&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;运算符&#34;&gt;运算符&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;算术运算符&lt;br /&gt;
&lt;code&gt;
% + - * / ++  --
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;赋值运算符&lt;br /&gt;
&lt;code&gt;
= += -= *= /= %=
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;比较运算符&lt;br /&gt;
&lt;code&gt;
== != &amp;gt; &amp;lt; &amp;gt;= &amp;lt;= 
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;逻辑运算符&lt;br /&gt;
&lt;code&gt;
&amp;amp; | ^(异或) ! &amp;amp;&amp;amp; || 【&amp;amp;&amp;amp; || 有短路效果】
&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;位运算符&lt;br /&gt;
&lt;code&gt;
&amp;lt;&amp;lt; &amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;(无符号右移) &amp;amp; | ^ ~(按位取反)
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;三元运算符&lt;br /&gt;
&lt;code&gt;
max = a &amp;gt; b ? a : b
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;代码块&#34;&gt;代码块&lt;/h2&gt;

&lt;p&gt;代码块加载顺序： 静态代码块（类初始化）&amp;ndash;&amp;gt; 局部代码块 &amp;ndash;&amp;gt; 构造代码块（对象初始化）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Importtant06Code {
    static { System.out.println(&amp;quot;Importtant06Code静态代码块&amp;quot;);}

    public static void main(String[] args) {
        System.out.println(&amp;quot;main&amp;quot;);
        User user = new User();
        User user2 = new User();
    }
}

class User{
    static { System.out.println(&amp;quot;User静态代码块&amp;quot;);}
    {System.out.println(&amp;quot;User局部代码块&amp;quot;);}
    public User() {System.out.println(&amp;quot;User构造代码块&amp;quot;);}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Importtant06Code静态代码块
main
User静态代码块
User局部代码块
User构造代码块
User局部代码块
User构造代码块
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;java面向对象三大特性&#34;&gt;Java面向对象三大特性&lt;/h2&gt;

&lt;p&gt;封装、继承、多态&lt;/p&gt;

&lt;h2 id=&#34;类与对象&#34;&gt;类与对象&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;类：一组相关属性和行为的集合（抽象）&lt;/li&gt;
&lt;li&gt;对象：改类事物的具体表现形式（具体存在的个体）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;封装&#34;&gt;封装&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口&lt;br /&gt;
好处：隐藏实现细节,提供公共访问方式，复用性，安全性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;关键字：private、this、static、new&lt;/p&gt;

&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;userName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;wm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Demo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对象构造过程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将User.class文件加载到内存&lt;/li&gt;
&lt;li&gt;栈内存放置user，堆内存放置对象&lt;/li&gt;
&lt;li&gt;给成员变量进行初始化

&lt;ul&gt;
&lt;li&gt;默认初始化 name:null  age:0&lt;/li&gt;
&lt;li&gt;显示初始化 name:wm    age:18&lt;/li&gt;
&lt;li&gt;构造初始化 name:sg    age:25&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;将地址值赋给变量user&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;继承&#34;&gt;继承&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;从已有类得到继承信息创建新类的过程&lt;br /&gt;
好处：复用、维护、多态前提&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;关键字：extends、this、super&lt;/p&gt;

&lt;h4 id=&#34;重载与重写&#34;&gt;重载与重写&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;重写（Override） 子类重写父类方法,多态的条件之一&lt;/li&gt;
&lt;li&gt;重载（Overload） 同一个类中不同参数的方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;注意&#34;&gt;注意&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;子类初始化之前会先进行父类的初始化&lt;/li&gt;
&lt;li&gt;父类没有无参构造，编译会报错&lt;/li&gt;
&lt;li&gt;子类重写父类方法，方法访问权限不能比之更低&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;多态&#34;&gt;多态&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;允许不同子类型的对象对同一消息作出不同的响应&lt;br /&gt;
好处： 维护、扩展&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;父类接口指向子类对象，主要体现在抽象类&lt;/p&gt;

&lt;p&gt;Fu f = new Zi();&lt;br /&gt;
成员方法：编译看父类，运行看子类。&lt;br /&gt;
静态方法：编译看父类，运行看子类。&lt;br /&gt;
成员变量：编译看父类，运行看子类。&lt;br /&gt;
构造方法：编译看父类，运行看父子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;learn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d1tod4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Fu&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;new Fu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;show Fu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;function Fu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Zi&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fu&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Zi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;new Zi&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;show Zi&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;method zi&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;function Zi&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Demo04DuoTai&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nd&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;static-access&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;父类引用指向子类对象&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;父&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;子&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;Fu&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Zi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;找不到符号&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		
		&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;找不到符号&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
		
		&lt;span class=&#34;o&#34;&gt;/*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fu&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Zi&lt;/span&gt;
		&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Zi&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*/&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;kbd&gt;java多态的实现原理&lt;/kbd&gt;&lt;/p&gt;

&lt;p&gt;当JVM执行Java字节码时，类型信息会存储在方法区中，为了优化对象的调用方法的速度，方法区的类型信息会增加一个指针，该指针指向一个记录该类方法的方法表，方法表中的每一个项都是对应方法的指针。&lt;/p&gt;

&lt;p&gt;方法区：方法区和JAVA堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
运行时常量池：它是方法区的一部分，Class文件中除了有类的版本、方法、字段等描述信息外，还有一项信息是常量池，用于存放编译器生成的各种符号引用，这部分信息在类加载时进入方法区的运行时常量池中。
方法区的内存回收目标是针对常量池的回收及对类型的卸载。&lt;/p&gt;

&lt;p&gt;方法表的构造&lt;/p&gt;

&lt;p&gt;由于java的单继承机制，一个类只能继承一个父类，而所有的类又都继承Object类，方法表中最先存放的是Object的方法，接下来是父类的方法，最后是该类本身的方法。如果子类改写了父类的方法，那么子类和父类的那些同名的方法共享一个方法表项。&lt;/p&gt;

&lt;p&gt;由于这样的特性，使得方法表的偏移量总是固定的，例如，对于任何类来说，其方法表的equals方法的偏移量总是一个定值，所有继承父类的子类的方法表中，其父类所定义的方法的偏移量也总是一个定值。&lt;/p&gt;

&lt;p&gt;实例&lt;/p&gt;

&lt;p&gt;假设Class A是Class B的子类，并且A改写了B的方法的method()，那么B来说，method方法的指针指向B的method方法入口；对于A来说，A的方法表的method项指向自身的method而非父类的。&lt;/p&gt;

&lt;p&gt;流程：调用方法时，虚拟机通过对象引用得到方法区中类型信息的方法表的指针入口，查询类的方法表 ，根据实例方法的符号引用解析出该方法在方法表的偏移量，子类对象声明为父类类型时，形式上调用的是父类的方法，此时虚拟机会从实际的方法表中找到方法地址，从而定位到实际类的方法。&lt;br /&gt;
注：所有引用为父类，但方法区的类型信息中存放的是子类的信息，所以调用的是子类的方法表。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;抽象类与接口&#34;&gt;抽象类与接口&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;抽象类&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;接口&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;特点&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.抽象类与方法需用abstract修饰&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.接口用interface修饰&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.抽象类不一定有抽象方法，有则为抽象类&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.类实现接口用implements&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.不能直接实例化（通过多态可实例化）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.不能被实例化&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;实现&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;抽象类、具体类（重写所有方法）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;抽象类，具体类&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;成员特点-属性&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;变量、常量&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;常量&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;成员特点-构造方法&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;无&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;成员特点-成员方法&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;抽象、非抽象&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;抽象、【JDK8有 default、static方法】&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;关键字&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不能与private、final、static(无意义)共存&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;编译报错&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;内部类&#34;&gt;内部类&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;成员内部类&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Outer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Inner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Outer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
                
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Outer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Inner&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Outer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Inner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;oi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;局部内部类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Outer{
    static int num0 = 99;
    public int num = 10;
        
    public void method(){
        final int num2 = 100;//存放于堆内存
        int num3 = 101;//随调用产生，随结束消失
        class Inner{
            Outer o = new Outer();
            system.out.println(o.num0);
            system.out.println(o.num1);
            system.out.println(o.num2);
            //system.out.println(o.num3);//无法访问，编译报错
        }
    }
}
    
class Test{
    public static void main(String[] args){
        Outer o = new Outer();
        o.method();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;匿名内部类&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;study&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();}&lt;/span&gt;
    
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PersonDemo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;study&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;PersonDemo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PersonDemo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;study&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dosomething&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;静态内部类（访问外部数据必须用static修饰）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Outer{
    static int num0 = 99;
    public int num = 10;
        
    static class Inner{
        public int num = 20;
        public void show(){
            int num = 30;
            system.out.println(num);//30
            system.out.println(this.num);//20
            system.out.println(Outer.this.num);//10
                
        }
    }
}
    
class Test{
    public static void main(String[] args){
        Outer.Inner oi = new Outer().Inner();
        oi.show();
            
        Outer.Inner.show();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;异常&#34;&gt;异常&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://images2015.cnblogs.com/blog/679904/201510/679904-20151025210813989-921927916.jpg&#34; alt=&#34;yc&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Java将可抛出(Throwable)的结构分为三种类型： 被检查的异常(Checked Exception)，运行时异常(RuntimeException)和错误(Error)。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Throwable
Throwable是 Java 语言中所有错误或异常的超类。
Throwable包含两个子类: Error 和 Exception 。它们通常用于指示发生了异常情况。
Throwable包含了其线程创建时线程执行堆栈的快照，它提供了printStackTrace()等接口用于获取堆栈跟踪数据等信息。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Exception
Exception及其子类是 Throwable 的一种形式，它指出了合理的应用程序想要捕获的条件。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;RuntimeException
RuntimeException是那些可能在 Java 虚拟机正常运行期间抛出的异常的超类。
编译器不会检查RuntimeException异常。 例如，除数为零时，抛出ArithmeticException异常。RuntimeException是ArithmeticException的超类。当代码发生除数为零的情况时，倘若既&amp;rdquo;没有通过throws声明抛出ArithmeticException异常&amp;rdquo;，也&amp;rdquo;没有通过try&amp;hellip;catch&amp;hellip;处理该异常&amp;rdquo;，也能通过编译。这就是我们所说的&amp;rdquo;编译器不会检查RuntimeException异常&amp;rdquo;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;非RuntimeException
Exception类本身，以及Exception的子类中除了&amp;rdquo;运行时异常&amp;rdquo;之外的其它子类都属于被检查异常。
Java编译器会检查它。 此类异常，要么通过throws进行声明抛出，要么通过try-catch进行捕获处理，否则不能通过编译。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Error
和Exception一样， Error也是Throwable的子类。 它用于指示合理的应用程序不应该试图捕获的严重问题，大多数这样的错误都是异常条件。&lt;br /&gt;
和RuntimeException一样， 编译器也不会检查Error。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;collection概述&#34;&gt;Collection概述&lt;/h2&gt;

&lt;p&gt;Collection 是对象集合，继承了超级接口Iterable，使用Iterator迭代器实现遍历。 Collection 有两个子接口 List 和 Set。&lt;/p&gt;

&lt;p&gt;List 可以通过下标 (1,2..) 来取得值，值是有序重复，有自己的迭代器ListIterator，可以通过这个迭代器进行逆序的迭代。&lt;/p&gt;

&lt;p&gt;ArrayList、Vector、LinkedList 是List的实现类。&lt;/p&gt;

&lt;p&gt;ArrayList 是线程不安全的，底层采用数组实现（并且该数组的类型是Object类型的），默认长度为10。&lt;br /&gt;
Vector 是线程安全的，底层采用数组实现。&lt;br /&gt;
LinkedList 是线程不安全的，底层是由（双向循环Deque）链表实现的。&lt;/p&gt;

&lt;p&gt;Stack类：继承自Vector，实现一个后进先出的栈。提供了几个基本方法，push、pop、peak、empty、search等。&lt;br /&gt;
Queue接口：提供了几个基本方法，offer、poll、peek等。已知实现类有LinkedList（实现双端队列Deque）、PriorityQueue等。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Set 只能通过游标来取值，并且值是不能重复的。Set中的元素类必须有一个有效的equals方法。&lt;/p&gt;

&lt;p&gt;Set子接口有NavigableSet、SortedSet；Set子类有EnumSet、HashSet、LinkedHashSet、TreeSet、AbstractSet等。&lt;/p&gt;

&lt;p&gt;HashSet 底层是哈希表（元素为链表的数组）实现（方法代码使用了HashMap），由hashcode()和equals()方法保证元素唯一。&lt;br /&gt;
TreeSet 底层是红黑树（自平衡的二叉树）实现，元素是可排序的。&lt;/p&gt;

&lt;p&gt;LinkedHashSet 底层由链表和哈希表实现，保证元素有序且唯一。&lt;/p&gt;

&lt;p&gt;TreeSet有两种排序实现。自然排序(内比较器)，类实现Comparable；比较器排序，使用匿名内部方式实现。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//比较器排序
TreeSet&amp;lt;User&amp;gt; userSet = new TreeSet&amp;lt;&amp;gt;(
	new Comparator&amp;lt;User&amp;gt;(){
		public int compare(User user1, User user2){
			if (user1.getAge() &amp;gt; user2.getAge()) return 1;
			else if (user1.getAge() = user2.getAge()) return 0;
			else  return -1;
		}
	}
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用迭代器Iterator遍历集合时修改添加元素会报并发修改异常，而用ListIterator则不会。&lt;/li&gt;
&lt;li&gt;使用size()获取集合长度&lt;/li&gt;
&lt;li&gt;toString()实现：AbstractColletion使用iterator()迭代器方法得到迭代器，之后使用StringBuilder拼接遍历的值。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;arraylist-linkedlist-vector的底层实现和区别&#34;&gt;ArrayList、LinkedList、Vector的底层实现和区别&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;从同步性来看，ArrayList和LinkedList是不同步的，而Vector是的。所以线程安全的话，可以使用ArrayList或LinkedList，可以节省为同步而耗费的开销。但在多线程下，有时候就不得不使用Vector了。当然，也可以通过一些办法包装ArrayList、LinkedList，使我们也达到同步，但效率可能会有所降低。&lt;/li&gt;
&lt;li&gt;从内部实现机制来讲ArrayList和Vector都是使用Object的数组形式来存储的。当你向这两种类型中增加元素的时候，如果元素的数目超出了内部数组目前的长度它们都需要扩展内部数组的长度，Vector缺省情况下自动增长原来一倍的数组长度，ArrayList是原来的50%，所以最后你获得的这个集合所占的空间总是比你实际需要的要大。如果你要在集合中保存大量的数据，那么使用Vector有一些优势，因为你可以通过设置集合的初始化大小来避免不必要的资源开销。&lt;/li&gt;
&lt;li&gt;ArrayList和Vector中，从指定的位置（用index）检索一个对象，或在集合的末尾插入、删除一个对象的时间是一样的，可表示为O(1)。但是，如果在集合的其他位置增加或者删除元素那么花费的时间会呈线性增长O(n-i)，其中n代表集合中元素的个数，i代表元素增加或移除元素的索引位置，因为在进行上述操作的时候集合中第i和第i个元素之后的所有元素都要执行(n-i)个对象的位移操作。LinkedList底层是由双向循环链表实现的，LinkedList在插入、删除集合中任何位置的元素所花费的时间都是一样的O(1)，但它在索引一个元素的时候比较慢，为O(i)，其中i是索引的位置，如果只是查找特定位置的元素或只在集合的末端增加、移除元素，那么使用Vector或ArrayList都可以。如果是对其它指定位置的插入、删除操作，最好选择LinkedList。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;map概述&#34;&gt;Map概述&lt;/h2&gt;

&lt;p&gt;Map 是键值对集合。HashTable和HashMap是Map的实现类。&lt;/p&gt;

&lt;p&gt;HashMap不是线程安全的，键唯一（哈希表实现），可以存储null值。&lt;br /&gt;
HashTable是线程安全的，键唯一，不能存储null值。&lt;/p&gt;

&lt;p&gt;LinkedHashMap键是唯一有序的（哈希表和链表实现）&lt;br /&gt;
TreeMap键是可排序的（红黑树实现）&lt;/p&gt;

&lt;h2 id=&#34;常用容器初始值大小&#34;&gt;常用容器初始值大小&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;StringBuffer和StringBuilder初始化默认大小为16个字符&lt;/li&gt;
&lt;li&gt;HashMap初始化默认大小16，自增为2n.&lt;/li&gt;
&lt;li&gt;HashTable默认初始值为11，加载因子为0.75，自增为2n+1&lt;/li&gt;
&lt;li&gt;ArrayList初始化默认值为10，自增为1.5n&lt;/li&gt;
&lt;li&gt;Vector初始化默认值为10，自增为2n&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;io流&#34;&gt;IO流&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;字节流

&lt;ul&gt;
&lt;li&gt;输入

&lt;ul&gt;
&lt;li&gt;InputSream

&lt;ul&gt;
&lt;li&gt;FileInputStream&lt;/li&gt;
&lt;li&gt;BufferedInputStream&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;输出

&lt;ul&gt;
&lt;li&gt;OutputStream

&lt;ul&gt;
&lt;li&gt;FileOutputStream&lt;/li&gt;
&lt;li&gt;BufferedOutputStream&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;字符流

&lt;ul&gt;
&lt;li&gt;输入

&lt;ul&gt;
&lt;li&gt;Reader

&lt;ul&gt;
&lt;li&gt;InputStreamReader

&lt;ul&gt;
&lt;li&gt;FileReader&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;BufferedReader

&lt;ul&gt;
&lt;li&gt;LineNumberReader&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;输出

&lt;ul&gt;
&lt;li&gt;Writer

&lt;ul&gt;
&lt;li&gt;OutputStreamWriter

&lt;ul&gt;
&lt;li&gt;FileWirter&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;BufferedWriter&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;close()与flush()：&lt;br /&gt;
    close() 关闭流对象，但会先刷新一次流缓冲区，关闭之后不可使用。&lt;br /&gt;
    flush() 仅仅刷新缓冲区，刷新之后，流对象还可以继续使用。&lt;/p&gt;

&lt;h2 id=&#34;线程状态&#34;&gt;线程状态&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;新建（New）:创建后尚未启动的线程处于这种状态。线程启动start()。&lt;/li&gt;
&lt;li&gt;运行(Runnable)：Runnable包括了操作系统状态中的 &lt;strong&gt;就绪&lt;/strong&gt; Ready和 &lt;strong&gt;运行&lt;/strong&gt; Running，也就是处于此状态的线程有可能正在执行，也有可能正在等待CPU为它分配执行时间。&lt;/li&gt;
&lt;li&gt;无限期等待（Waiting）:处于这种状态的进程不会被分配CPU执行时间，它们要等待被其他线程显示的唤醒。以下方法会让线程陷入无限期的等待状态：

&lt;ul&gt;
&lt;li&gt;没有设置Timeout参数的Object.wait()方法&lt;/li&gt;
&lt;li&gt;没有设置Timeout参数的Thread.join()方法&lt;/li&gt;
&lt;li&gt;LockSupport.park()方法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;限期等待（Timed Waiting）:处于这种状态的进程不会被分配CPU执行时间，不过无需等待被其他线程显示的唤醒，在一定时间之后它们会由系统自动唤醒。以下方法会让线程进入限期等待状态：

&lt;ul&gt;
&lt;li&gt;Thread.sleep()方法&lt;/li&gt;
&lt;li&gt;设置了Timeout参数的Object.wait()方法&lt;/li&gt;
&lt;li&gt;设置了Timeout参数的Thread.join()方法&lt;/li&gt;
&lt;li&gt;LockSupport.parkNanos()方法&lt;/li&gt;
&lt;li&gt;LockSupport.parkUnitil()方法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;阻塞（Blocked）:进程被阻塞了，阻塞状态和等待状态的区别是：阻塞状态在等待着获取到一个排它锁，这个事件将在另一个线程放弃这个锁的时候发生；而等待状态则是在等待一段时间，或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态。&lt;/li&gt;
&lt;li&gt;结束（Terminated）:已终止线程的线程状态，线程已经结束执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;线程的控制&#34;&gt;线程的控制&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;获取线程的名称 &lt;code&gt;public final String getName()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置线程的名称 &lt;code&gt;public final void setName(String name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回当前正在执行的线程对象(名称) &lt;code&gt;public static Thread currentThread()&lt;/code&gt; -&amp;gt; &lt;code&gt;Thread.currentThread().getName()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;获取线程对象的优先级     &lt;code&gt;public final int getPriority()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置线程对象的优先级     &lt;code&gt;public final void setPriority(int newPriority)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;线程默认优先级是5。&lt;/li&gt;
&lt;li&gt;线程优先级的范围是：1-10。&lt;/li&gt;
&lt;li&gt;线程优先级高仅仅表示线程获取的 CPU时间片的几率高&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;将该线程标记为守护线程或用户线程 &lt;code&gt;public final void setDaemon(boolean on)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;当正在运行的线程都是守护线程时，Java 虚拟机退出。 该方法必须在启动线程前调用。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;线程休眠  &lt;code&gt;public static void sleep(long millis)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加入线程  &lt;code&gt;public final void join()&lt;/code&gt;:等待该线程终止。&lt;/li&gt;
&lt;li&gt;礼让线程  &lt;code&gt;public static void yield()&lt;/code&gt;:暂停当前正在执行的线程对象，并执行其他线程。&lt;/li&gt;
&lt;li&gt;后台线程&lt;/li&gt;
&lt;li&gt;终止线程(掌握)&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public final void stop()&lt;/code&gt;:让线程停止，过时了，但是还可以使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public void interrupt()&lt;/code&gt;:中断线程。 把线程的状态终止，并抛出一个InterruptedException。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;多线程相关&#34;&gt;多线程相关&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;多线程实现方案：

&lt;ul&gt;
&lt;li&gt;继承Thread类

&lt;ul&gt;
&lt;li&gt;自定义线程类继承Thread类，重写run()&lt;/li&gt;
&lt;li&gt;调用类 创建自定义线程类对象，启动线程&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;实现Runnable接口

&lt;ul&gt;
&lt;li&gt;自定义线程类实现Runable接口，重写run()&lt;/li&gt;
&lt;li&gt;调用类 创建自定义线程类对象&lt;/li&gt;
&lt;li&gt;调用类 以自定义线程类对象作为参数构造创建Thread对象，启动线程&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;实现Callable接口结合线程池

&lt;ul&gt;
&lt;li&gt;自定义线程类实现Callable接口，重写call方法

&lt;ul&gt;
&lt;li&gt;1

&lt;ul&gt;
&lt;li&gt;调用类 创建ExecutorService线程池对象,调用submit(Callable&lt;T&gt; task)&lt;/li&gt;
&lt;li&gt;调用类 创建Future&lt;T&gt;对象，接收上一步返回值&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2

&lt;ul&gt;
&lt;li&gt;调用类 创建ExecutorService线程池对象,调用 submit(Runnable task)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;pool.shutdown()结束;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;线程安全问题产生条件

&lt;ul&gt;
&lt;li&gt;多线程环境&lt;/li&gt;
&lt;li&gt;有共享数据&lt;/li&gt;
&lt;li&gt;有多条语句操作共享数据&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;同步的方式：

&lt;ul&gt;
&lt;li&gt;同步代码块 &lt;code&gt;synchronized(对象){//doSomething}&lt;/code&gt; 或 同步锁 Lock

&lt;ul&gt;
&lt;li&gt;当线程访问较多时，每个线程都会去判断同步上的锁，非常消耗资源，降低程序运行效率，而且容易产生死锁。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;同步方法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;run()与start()

&lt;ul&gt;
&lt;li&gt;run():封装了被线程执行的代码,直接调用仅仅是普通方法的调用&lt;/li&gt;
&lt;li&gt;start():启动线程，并由JVM自动调用run()方法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sleep()与wait()&lt;br /&gt;
sleep()是线程类（Thread）的静态方法，导致此线程暂停执行指定时间，将执行机会给其他线程，但是监控状态依然保持，到时会自动恢复（线程回到就绪（ready）状态），调用sleep 不会释放对象锁。&lt;br/&gt;&lt;br/&gt;
wait()是Object 类的方法，对象调用wait()方法导致本线程放弃对象锁(线程暂停执行)，进入等待此对象的等待锁定池，只有针对此对象发出notify 方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入就绪状态。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;死锁：两个或两个异常的线程争夺资源过程中，发生的一种互相等待的现象。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;锁的等级：方法锁、对象锁、类锁。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;实现Runnable接口相比继承Thread类有如下优势：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;可以避免由于Java的单继承特性而带来的局限&lt;/li&gt;
&lt;li&gt;增强程序的健壮性，代码能够被多个程序共享，代码与数据是独立的&lt;/li&gt;
&lt;li&gt;适合多个相同程序代码的线程区处理同一资源的情况&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;osi与-tcp-ip&#34;&gt;OSI与&lt;code&gt;TCP/IP&lt;/code&gt;&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;OSI&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;TCP/IP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;应用层&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;应用层&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;表示层&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;会话层&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;传输层&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;传输层&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;网络层&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;网际层&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;数据链路层&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;主机至网络层&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;物理层&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;socket编程&#34;&gt;Socket编程&lt;/h2&gt;

&lt;p&gt;网络编程三要素： IP、端口、协议&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UDP

&lt;ul&gt;
&lt;li&gt;发送数据

&lt;ul&gt;
&lt;li&gt;创建发送端口DatagramSocket对象&lt;/li&gt;
&lt;li&gt;创建数据，并打开数据包&lt;/li&gt;
&lt;li&gt;调用DatagramSocket对象发送方法，发送数据包&lt;/li&gt;
&lt;li&gt;释放资源&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;接手数据

&lt;ul&gt;
&lt;li&gt;创建DatagramSocket对象&lt;/li&gt;
&lt;li&gt;创建一个数据包（接收容器）&lt;/li&gt;
&lt;li&gt;调用容器接手数据&lt;/li&gt;
&lt;li&gt;解析数据包&lt;/li&gt;
&lt;li&gt;释放资源&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TCP

&lt;ul&gt;
&lt;li&gt;发送数据

&lt;ul&gt;
&lt;li&gt;创建发送端的Socket对象&lt;/li&gt;
&lt;li&gt;获取输出流，写数据&lt;/li&gt;
&lt;li&gt;释放资源&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;接手数据

&lt;ul&gt;
&lt;li&gt;创建接手端的Socket&lt;/li&gt;
&lt;li&gt;监听客户端连接&lt;/li&gt;
&lt;li&gt;获取输入流&lt;/li&gt;
&lt;li&gt;释放资源&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;反射机制&#34;&gt;反射机制&lt;/h2&gt;

&lt;p&gt;反射技术：动态加载一个指定的类，并获取该类中所有的内容。并将字节码文件中的内容都封装成对象，这样便于操作这些成员。简单说：反射技术可以对一个类进行解剖。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;好处：大大增强了程序的扩展性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;反射的基本步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;获得Class对象，就是获得指定的名称的字节码文件对象&lt;/li&gt;
&lt;li&gt;实例化对象，获得类的属性、方法或者构造函数&lt;/li&gt;
&lt;li&gt;访问属性、调用方法、调用构造函数创建对象&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>IDEA——小技巧</title>
      <link>https://ianeiu.github.io/2019/02/12/idea%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2019/02/12/idea%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      
        <description>

&lt;h2 id=&#34;快捷键设置&#34;&gt;快捷键设置&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;默认情况下，我们输入代码时IDEA会自动弹出代码提示框，这时候是不用按快捷键的，直接使用方向键选择我们需要的条目就可以了。&lt;/li&gt;
&lt;li&gt;如果我们想主动 使用代码提示时，默认的快捷键是CTRL+空格，但是中文系统这个快捷键为切换输入法，我们应该调整一下这个快捷键的功能。
首先我们点击左上角的File（文件）——》Setting（设置），打开全局设置。&lt;/li&gt;
&lt;li&gt;我们在左侧菜单选择KeyMap，Main Menu-&amp;gt;Code-&amp;gt;Complation，找到Basic和Cyclic Expand Word两个快捷键设置。&lt;/li&gt;
&lt;li&gt;在Cyclic Expand Word上点击右键，移除原本的快捷键（AIT+/）。&lt;/li&gt;
&lt;li&gt;Basic就是代码提示功能的选项了，我们在这条项目上点击右键，选择第一项，增加快捷键。&lt;/li&gt;
&lt;li&gt;在这个界面，我们按下的键就会成为快捷键，此时我们按下AIT+/ 把它作为代码提示的快捷键。&lt;/li&gt;
&lt;li&gt;添加完之后代码提示有了两个快捷键了，我们再次点击右键，删除原来的AIT+空格的快捷键就可以了！&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;常用快捷键&#34;&gt;常用快捷键&lt;/h2&gt;

&lt;h4 id=&#34;辅助&#34;&gt;辅助&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;DESC&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;KEY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;查找Intellij的命令&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl+Shift+A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;运行&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alt+Shift+F10运行程序，Shift+F9启动调试，Ctrl+F2停止&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;调整项目窗口宽度&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;alt+1定位到project视图，使用ctrl+shift+左右箭头来调整项目窗口宽度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;查询&#34;&gt;查询&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;DESC&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;KEY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;跳转文件指定行&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + l&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;搜索文本&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + f&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;全局搜索和局部搜索&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + h&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;结合ctrl + f 快捷上下查找文本&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + k ,ctrl + shift + k&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;查找接口实现类&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + alt +B ，ctrl + T&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;查询&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;shift + shift&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;方位名查询&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + shift + alt + n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;目录查询&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + shift + alt + n，输入/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;编辑&#34;&gt;编辑&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;DESC&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;KEY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;自动处理&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;alt+Enter&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;代码联系&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + alt + space&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;自动生成方法&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;alt+insert，然后根据提示继续&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;删除当前行&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + d、x&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;复制当前行&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl +alt + ↓&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;选中单词&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + shift + ←、→&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;大小写转换&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + shift + u、y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;收尾补充（;{}等）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + shift + 回车&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;驼峰下划线命名切换&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + alt + c&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;重构-修改类、方法、参数名字&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;alt + shift + r&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;重构-抽取类方法&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选中代码，然后使用alt + shift + m,就会弹出抽取视图&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;重构-可选择&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl+Shift+Alt+T&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;代码生成&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Template/Postfix +Tab&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;文件&#34;&gt;文件&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;DESC&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;KEY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;关闭所有文件&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + shift + w&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;显示最近打开的文件&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + e&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;显示最近修改的文件&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + shift + e&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;文件切换&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + pg、up&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;bookmarks&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + shift + F11&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;bookmarks查看&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;shift + F11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;视图&#34;&gt;视图&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;DESC&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;KEY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;视图切换&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + Tab&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;显示类结构&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + o&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;显示文件位置&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alt+F1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;项目切换&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl + alt + [ 、]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;选择窗口&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;alt + 窗口代码（1、2、3 ..）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;水平分组&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;右键文件tab，选择split vertically&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;垂直分组&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;右键文件tab，选择split horizontally&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;收藏至bookmark&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ctrl+shift+F11&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;打开  bookmark&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;shift+F11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;view&#34;&gt;View&lt;/h2&gt;

&lt;h4 id=&#34;演出模式&#34;&gt;演出模式&lt;/h4&gt;

&lt;p&gt;选择Enter Presentation Mode ，将IDEA弄到最大，让你只关注一个类里面的代码，进行毫无干扰的coding；&lt;br /&gt;
配合CTRL+E等快捷键定位文件；&lt;br /&gt;
选择Exit Presentation Mode 即可退出。&lt;/p&gt;

&lt;h4 id=&#34;去掉面包屑-上方导航栏&#34;&gt;去掉面包屑（上方导航栏）&lt;/h4&gt;

&lt;p&gt;使用alt+v，然后取消Navigation bar勾选即可。&lt;/p&gt;

&lt;h2 id=&#34;inject-language&#34;&gt;Inject language&lt;/h2&gt;

&lt;p&gt;选中&amp;rdquo;&amp;ldquo;，使用alt+enter快捷键弹出inject language视图，并选中Inject language or reference；&lt;br /&gt;
直接按下回车键，在inject language列表选择显示语言（JSON等）；&lt;br /&gt;
再次使用alt+enter，选中Edit JSON Fragment并回车，就可以看到编辑JSON文件的视图了；&lt;br /&gt;
使用alt+enter，选中Un-inject language/reference 回车即可取消。&lt;/p&gt;

&lt;h2 id=&#34;常用的expr&#34;&gt;常用的expr&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;.sout&lt;/li&gt;
&lt;li&gt;.notnull&lt;/li&gt;
&lt;li&gt;.try&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;常用的setting&#34;&gt;常用的Setting&lt;/h2&gt;

&lt;h4 id=&#34;auto-import&#34;&gt;Auto Import&lt;/h4&gt;

&lt;p&gt;add unambiguous imports on the fly 编写时自动导入&lt;br /&gt;
optimize imports on the fly 编写时自动优化去除没用到的包&lt;/p&gt;

&lt;h4 id=&#34;appearance&#34;&gt;Appearance&lt;/h4&gt;

&lt;p&gt;show memory indicator 右下角显示内存使用情况，点击可回收内存&lt;br /&gt;
show line number 显示选中代码行数&lt;/p&gt;

&lt;h4 id=&#34;editor-tabs&#34;&gt;editor tabs&lt;/h4&gt;

&lt;p&gt;取消勾选 show tabs in single row 多行显示tab，配合tab limit&lt;/p&gt;

&lt;h4 id=&#34;general&#34;&gt;General&lt;/h4&gt;

&lt;p&gt;change font size(Zoom) with ctrl+Mouse Wheel 滚轮调整字体大小&lt;/p&gt;

&lt;h2 id=&#34;常用插件&#34;&gt;常用插件&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;插件名称&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;插件介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alibaba Java Coding Guidelines&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;阿里巴巴代码规范检查插件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;FindBugs-IDEA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;潜在 Bug 检查&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Statistic&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;代码统计插件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Maven Helper&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Maven 辅助插件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Properties to YAML Converter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Properties 转 YAML 格式插件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
      
    </item>
    
    <item>
      <title>Java笔记——web</title>
      <link>https://ianeiu.github.io/2018/12/22/java%E7%AC%94%E8%AE%B0web/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/12/22/java%E7%AC%94%E8%AE%B0web/</guid>
      
        <description>

&lt;p&gt;JavaWeb笔记整理&lt;/p&gt;

&lt;h2 id=&#34;xml&#34;&gt;XML&lt;/h2&gt;

&lt;p&gt;XML(EXtensible Markup Language):可扩展标记型语言，主要是为了存储数据（程序配置文件）、数据交换&lt;/p&gt;

&lt;p&gt;格式：&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;XML两种文档约束类型： &lt;code&gt;dtd&lt;/code&gt; （file_name.dtd）和&lt;code&gt;schema&lt;/code&gt;（file_name.xsd 可被XML解析器解析）&lt;/p&gt;

&lt;p&gt;XML存储结构化信息，使用&lt;code&gt;DOM&lt;/code&gt;或&lt;code&gt;SAX&lt;/code&gt;（边读边解析）方式解析&lt;br /&gt;
Properties存储平面信息，使用Properties类解析&lt;/p&gt;

&lt;p&gt;常见的XML解析器实现：JDOM、DOM4J（首选）、SAX&lt;/p&gt;

&lt;p&gt;XPath:XML路径语言，用来确定XML文档中某部分位置&lt;/p&gt;

&lt;h2 id=&#34;web服务器&#34;&gt;Web服务器&lt;/h2&gt;

&lt;p&gt;Tomcat（Apache）、JBOSS（Redhat）、WebLogic（Oracle）、WebSphere（IBM）等等&lt;/p&gt;

&lt;h2 id=&#34;javaweb三大组件&#34;&gt;JavaWeb三大组件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Servlet&lt;/li&gt;
&lt;li&gt;Filter&lt;/li&gt;
&lt;li&gt;Listener&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;servlet&#34;&gt;Servlet&lt;/h2&gt;

&lt;p&gt;Servlet是多线程、单实例。&lt;br /&gt;
继承关系：MyServlet &amp;ndash;extends&amp;ndash;&amp;gt; HttpServlet &amp;ndash;extends&amp;ndash;&amp;gt; QenericServlet  &amp;ndash;implements&amp;ndash;&amp;gt; Servlet、ServletConfig&lt;/p&gt;

&lt;h4 id=&#34;servlet生命周期&#34;&gt;Servlet生命周期&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;初始化：服务器在Servlet第一次被访问时或在服务器启动时创建Servlet。创建后，调用init()方法；&lt;/li&gt;
&lt;li&gt;提供服务：当服务器每次接收到请求时，会调用service()方法处理请求；&lt;/li&gt;

&lt;li&gt;&lt;p&gt;销毁：当服务器关闭时，服务器会去销毁Servlet。销毁前会调用destroy()方法。&lt;/p&gt;

&lt;h4 id=&#34;在web-xml中配置&#34;&gt;在web.xml中配置&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;servlet&amp;gt;
	&amp;lt;servlet-name&amp;gt;myServlet&amp;lt;/servlet-name&amp;gt;
	&amp;lt;servlet-class&amp;gt;com.ianeiu.web.MyServlet&amp;lt;/servlet-class&amp;gt;
	&amp;lt;!-- 通过ServletConfig获取 --&amp;gt;
	&amp;lt;init-param&amp;gt;
		&amp;lt;param-name&amp;gt;key&amp;lt;/param-name&amp;gt;
		&amp;lt;param-value&amp;gt;value&amp;lt;/param-value&amp;gt;
	&amp;lt;/init-param&amp;gt;
	&amp;lt;!-- 值越小，优先级越大 --&amp;gt;
	&amp;lt;load-on-startup&amp;gt;2&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/servlet&amp;gt;
&amp;lt;servlet-mapping&amp;gt;
	&amp;lt;servlet-name&amp;gt;myServlet&amp;lt;/servlet-name&amp;gt;
	&amp;lt;url-pattren&amp;gt;/my/*&amp;lt;/url-pattren&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;访问路径可以使用通配符 &lt;code&gt;* /* /myName/* *.do&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;httpservlet&#34;&gt;HttpServlet&lt;/h4&gt;

&lt;p&gt;实现了service(..,..),重写service(HttpServletRequest ..,HttpServletResponse &amp;hellip;),子类只需调用doGet() doPost()。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;请求request&#34;&gt;请求request&lt;/h2&gt;

&lt;p&gt;URL相关：&lt;br /&gt;
&lt;code&gt;http://127.0.0.1:8080/myproject/myServlet?name=admin&lt;/code&gt;&lt;br /&gt;
 .getRequestURL()+&amp;ldquo;?&amp;rdquo;+ .getQueryString&lt;br /&gt;
 或者&lt;br /&gt;
 .getScheme() +&amp;rdquo;://&amp;ldquo;+ .getServerName() +&amp;rdquo;:&amp;ldquo;+.getServerPort() +&amp;rdquo;/&amp;ldquo;+ .getContextPath +&amp;rdquo;/&amp;ldquo;+ .getServerPath +&amp;rdquo;?&amp;ldquo;+ .getQueryString&lt;br /&gt;
 /myproject/myServlet 可用 .getRequestURI() 获取&lt;/p&gt;

&lt;h4 id=&#34;get和post&#34;&gt;get和post&lt;/h4&gt;

&lt;p&gt;get：没有请求体，参数在url中显示，长度理论限制1K之内&lt;br /&gt;
post: 参数在请求体中，长度无限制&lt;/p&gt;

&lt;h4 id=&#34;请求转发和请求包含&#34;&gt;请求转发和请求包含&lt;/h4&gt;

&lt;p&gt;都是一个请求跨多个Servlet（可以共享request的域属性）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class AServlet extends HttpServlet {
	
	public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		RequestDispacter rd = request.getRequestDispacter(&amp;quot;/BServlet&amp;quot;);
		rd.forward(request,response);//A不能输响应体，可设置响应头，最后由B处理
		rd.include(request,response);//无限制，共同处理请求
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;响应response&#34;&gt;响应response&lt;/h2&gt;

&lt;p&gt;可设置响应信息、发送状态码、设置响应正文、重定向（response.sendRedirect(&amp;ldquo;/myProject/BServlet&amp;rdquo;)）&lt;/p&gt;

&lt;h4 id=&#34;响应编码&#34;&gt;响应编码&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;response.setCharacterEncoding(&amp;ldquo;utf-8&amp;rdquo;); response.getWriter(&amp;ldquo;..&amp;rdquo;);&lt;/li&gt;
&lt;li&gt;response.setHeader(&amp;ldquo;content-type&amp;rdquo;,&amp;ldquo;text/html;charset=utf-8&amp;rdquo;);&lt;/li&gt;

&lt;li&gt;&lt;p&gt;response.setContentType(&amp;ldquo;text/html;charset=utf-8&amp;rdquo;);&lt;/p&gt;

&lt;h4 id=&#34;请求转发和重定向-302&#34;&gt;请求转发和重定向（302）&lt;/h4&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;请求转发是一个请求，但是重定向是两个请求。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;请求转发只能是一种请求方式，要么是Get要么是Post ,但是重定向的第二个请求一定是Get。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;请求转发的地址栏并不会发生变化(服务器请求资源)，但是重定向的会变化，因为它是两个请求(浏览器重新请求地址)。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;请求转发只能在本应用下的资源，但是重定向却可以跨应用，比如重定向到百度的主页。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;javaweb四大域对象&#34;&gt;JavaWeb四大域对象&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PageContext - page    （jsp）&lt;/li&gt;
&lt;li&gt;ServletRequest - request     （servlet、jsp）&lt;/li&gt;
&lt;li&gt;HttpSession - session     （servlet、jsp）&lt;/li&gt;
&lt;li&gt;ServletContext - application     （servlet、jsp）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;servletcontext&#34;&gt;ServletContext&lt;/h2&gt;

&lt;p&gt;ServletContext是Servlet域三大对象之一。&lt;br /&gt;
在服务器启动时创建，关闭时销毁，单实例。&lt;br /&gt;
用来存取数据、读取web.xml中初始化参数、读取应用资源（文件名、输入流、文件路径集合）&lt;/p&gt;

&lt;h3 id=&#34;响应头&#34;&gt;响应头&lt;/h3&gt;

&lt;p&gt;防盗链：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Referer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;禁用浏览器缓存：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expies:-1&lt;/li&gt;
&lt;li&gt;Cache-Control:no-cache&lt;/li&gt;
&lt;li&gt;Pragma:no-cache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;三秒后跳转至百度&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;Refresh&amp;quot; content=&amp;quot;3;url=http://www.baidu.com&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;jsp九大内置对象&#34;&gt;JSP九大内置对象&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;request - HttpServletRequest&lt;/li&gt;
&lt;li&gt;response - HttpServletResponse&lt;/li&gt;
&lt;li&gt;session - HttpSession&lt;/li&gt;
&lt;li&gt;application - ServletContext&lt;/li&gt;
&lt;li&gt;config - ServletConfig&lt;/li&gt;
&lt;li&gt;exception - 只有在错误页面才可使用&lt;/li&gt;
&lt;li&gt;page - 作用本JSP页面中&lt;/li&gt;
&lt;li&gt;out - JSPWriter&lt;/li&gt;
&lt;li&gt;pageContext - 页面上下文对象（作用域最小）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;jsp中的java脚本&#34;&gt;JSP中的Java脚本&amp;lt;%%&amp;gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;脚本

&lt;ul&gt;
&lt;li&gt;&amp;lt;% .. %&amp;gt; 脚本片段&lt;/li&gt;
&lt;li&gt;&amp;lt;%= ..%&amp;gt; 表达式&lt;/li&gt;
&lt;li&gt;&amp;lt;%! ..%&amp;gt; 声明，定义成员&lt;/li&gt;
&lt;li&gt;示例：&lt;code&gt;&amp;lt;% int a=10; %&amp;gt; &amp;lt;%= a %&amp;gt; &amp;lt;%! private String hello=&amp;quot;hello&amp;quot;;%&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;注释

&lt;ul&gt;
&lt;li&gt;&amp;lt;%&amp;ndash; ..  &amp;ndash;%&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;指令

&lt;ul&gt;
&lt;li&gt;&amp;lt;%@ .. %&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;jsp原理&#34;&gt;JSP原理&lt;/h2&gt;

&lt;p&gt;客户端 访问 index.jsp,服务器将jsp文件编译成java文件，JVM将java文件编译成class文件。&lt;br /&gt;
服务器初始化jsp实例，创建该类对象，调用service()。&lt;br /&gt;
客户端再次访问则直接调用service()。&lt;/p&gt;

&lt;h2 id=&#34;jsp三大指令&#34;&gt;JSP三大指令&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;page

&lt;ul&gt;
&lt;li&gt;错误页面配置 &lt;code&gt;&amp;lt;%@ page language=&amp;quot;java&amp;quot; contentType=&amp;quot;text/html; charset=UTF-8&amp;quot;  pageEncoding=&amp;quot;UTF-8&amp;quot; isErrorPage=&amp;quot;true&amp;quot;%&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;脚本获取错误 &lt;code&gt;&amp;lt;%= exception.getMessage()%&amp;gt;&lt;/code&gt; [exception为jsp内置对象，error页面独有]&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;include

&lt;ul&gt;
&lt;li&gt;静态包含&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;taglib

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;%@ taglib uri=&amp;quot;&amp;quot; prefix=&amp;quot;c&amp;quot;%&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;在web-xml中配置错误页面&#34;&gt;在web.xml中配置错误页面&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 默认的错误处理页面 --&amp;gt;  
&amp;lt;error-page&amp;gt;  
	&amp;lt;error-code&amp;gt;403&amp;lt;/error-code&amp;gt;  
	&amp;lt;location&amp;gt;/403.html&amp;lt;/location&amp;gt;  
&amp;lt;/error-page&amp;gt;  
&amp;lt;error-page&amp;gt;  
	&amp;lt;error-code&amp;gt;404&amp;lt;/error-code&amp;gt;  
	&amp;lt;location&amp;gt;/404.html&amp;lt;/location&amp;gt;  
&amp;lt;/error-page&amp;gt;  
&amp;lt;!-- 仅仅在调试的时候注视掉,在正式部署的时候不能注释 --&amp;gt;  
&amp;lt;!-- 这样配置也是可以的，表示发生500错误的时候，转到500.jsp页面处理。 --&amp;gt;  
&amp;lt;error-page&amp;gt;   
	&amp;lt;error-code&amp;gt;500&amp;lt;/error-code&amp;gt;   
	&amp;lt;location&amp;gt;/500.html&amp;lt;/location&amp;gt;   
&amp;lt;/error-page&amp;gt;
&amp;lt;!-- 这样的配置表示如果jsp页面或者servlet发生java.lang.Exception类型（当然包含子类）的异常就会转到500.jsp页面处理。 --&amp;gt;  
&amp;lt;error-page&amp;gt;   
	&amp;lt;exception-type&amp;gt;java.lang.Exception&amp;lt;/exception-type&amp;gt;   
	&amp;lt;location&amp;gt;/500.jsp&amp;lt;/location&amp;gt;   
&amp;lt;/error-page&amp;gt;   
  
&amp;lt;error-page&amp;gt;   
	&amp;lt;exception-type&amp;gt;java.lang.Throwable&amp;lt;/exception-type&amp;gt;   
	&amp;lt;location&amp;gt;/500.jsp&amp;lt;/location&amp;gt;   
&amp;lt;/error-page&amp;gt;  
&amp;lt;!--   
当error-code和exception-type都配置时，exception-type配置的页面优先级高  
及出现500错误，发生异常Exception时会跳转到500.jsp  
 --&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;在web-xml中配置jstl&#34;&gt;在web.xml中配置jstl&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;...  
&amp;lt;jsp-config&amp;gt;  
   &amp;lt;taglib&amp;gt;  
	   &amp;lt;taglib-uri&amp;gt;myjstl&amp;lt;/taglib-uri&amp;gt;  
	   &amp;lt;taglib-location&amp;gt;/WEB-INF/tld/c.tld&amp;lt;/taglib-location&amp;gt;  
   &amp;lt;/taglib&amp;gt;  
&amp;lt;/jsp-config&amp;gt;  
...  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jsp基本动作&#34;&gt;JSP基本动作&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;include&lt;/li&gt;
&lt;li&gt;useBean&lt;/li&gt;
&lt;li&gt;setProperty&lt;/li&gt;
&lt;li&gt;getProperty&lt;/li&gt;
&lt;li&gt;forward&lt;/li&gt;
&lt;li&gt;plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;动态包含和静态包含&#34;&gt;动态包含和静态包含&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;动态包含

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;jsp:include page=&amp;quot;navigation.jsp&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;请求处理阶段执行&lt;/li&gt;
&lt;li&gt;会检查所含文件变化，用于动态页面&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;静态包含

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;%@ include file=&amp;quot;resource.html&amp;quot;%&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;翻译阶段执行（合并再编译）&lt;/li&gt;
&lt;li&gt;不检查所含文件变化，用于静态页面&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cookie&#34;&gt;Cookie&lt;/h2&gt;

&lt;p&gt;Cookie是Http协议的规范之一，是服务端和客户端之间传输的小数据。
特点:&lt;br /&gt;
1. 大小4KB（实际上不止）
2. 服务器最多在客户端浏览器上保存20个
3. 浏览器最多保存300个&lt;/p&gt;

&lt;h2 id=&#34;httpsession&#34;&gt;HttpSession&lt;/h2&gt;

&lt;p&gt;用来会话跟踪的类。session是服务端对象，保存在服务端。&lt;br /&gt;
HttpSession底层依赖Cookie或是URL重写。&lt;/p&gt;

&lt;p&gt;会话的实现依赖于容器，大多数容器采用基于Cookie的实现机制，使用名字为JSESSIONID的cookie作为session的唯一标识。&lt;/p&gt;

&lt;h4 id=&#34;url重写&#34;&gt;URL重写&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href =&amp;quot;/myproject/myjsp.jsp;jsessionid=&amp;lt;%=session.getId()%&amp;gt;&amp;quot;&amp;gt;跳转&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href =&amp;quot;&amp;lt;response.encodeURL(&#39;/myproject/myjsp.jsp&#39;)&amp;gt;&amp;quot;&amp;gt;跳转&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;el表达式&#34;&gt;EL表达式&lt;/h2&gt;

&lt;p&gt;EL表达式主要是用来替代JSP页面中的脚本表达式，获取JavaBean、Map、List、数组及域内置对象属性。也可以在JSP页面中执行一些基本的关系运算、逻辑运算和算术运算。&lt;/p&gt;

&lt;p&gt;语法：&lt;code&gt;${标识符}&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;获取数据

&lt;ul&gt;
&lt;li&gt;List/数组 &lt;code&gt;${userList[0]}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Bean &lt;code&gt;${user.userName}&lt;/code&gt;或&lt;code&gt;${user[&#39;userName&#39;]}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Map &lt;code&gt;${paramMap.key}&lt;/code&gt;或&lt;code&gt;${paramMap[&#39;key&#39;]}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内置对象 &lt;code&gt;${sessionScope.userName}&lt;/code&gt;、&lt;code&gt;${initParam[&#39;maxNum&#39;]}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果Map的键或Bean的属性名中包含&lt;code&gt;_&lt;/code&gt;或&lt;code&gt;-&lt;/code&gt;时，只有${initParam[&amp;lsquo;max_num&amp;rsquo;]}&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;运算

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${1+2}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${3&amp;gt;5}&lt;/code&gt;或&lt;code&gt;${3 gt 5}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${isSuccess &amp;amp;&amp;amp; length&amp;gt;0}&lt;/code&gt; 或&lt;code&gt;${isSuccess and length&amp;gt;0}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${!isSuccess}&lt;/code&gt; 或&lt;code&gt;${not isSuccess}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;empty判断字符串、数组、集合的长度是否为0(可与not或!连用)   &lt;code&gt;${empty &amp;quot;&amp;quot;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;el-11个内置对象&#34;&gt;EL 11个内置对象&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;pageScope：获取pageContext域属性，相当于pageContext.getAttribute(&amp;ldquo;xxx&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;requestScope：获取request域属性，相当于request.getAttribute(&amp;ldquo;xxx&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;sessionScope：获取session域属性，相当于session.getAttribute(&amp;ldquo;xxx&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;applicationScope：获取application域属性，相当于application.getAttribute(&amp;ldquo;xxx&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;param：对应参数，它是一个Map，其中key是参数，value是参数值，适用于单值的参数，相当于request.getParameter(&amp;ldquo;xxx&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;paramValues：对应参数，她是一个Map，其中key是参数，value是多个参数值，适用于多值的参数，相当于request.getParameterValues(&amp;ldquo;xxx&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;header：对应请求头，它是一个Map，其中key表示头名称，value是单个头值，适用于单值的请求头，相当于request.getHeader(&amp;ldquo;xxx&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;headerValues：对应请求头，它是一个Map，其中key表示头名称，value是多个头值，适用于多值的请求头，相当于request.getHeaders(&amp;ldquo;xxx&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;initParam：获取web.xml中&lt;context-param&gt;内的参数，${ initParam.xxx}，xxx就是&lt;param-name&gt;标签内的值，进而得到&lt;param-value&gt;中的值&lt;/li&gt;
&lt;li&gt;cookie：用于获取cookie，Map&lt;String,Cookie&gt;，其中key是cookie的name，value是cookie对象，例如${cookie.JSESSIONID.value }就是获取sessionId&lt;/li&gt;
&lt;li&gt;pageContext：可以获取JSP九大内置对象，相当于使用该对象调用getxxx()方法，例如pageContext.getRequest()可以写为${pageContext.request)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;jstl&#34;&gt;JSTL&lt;/h2&gt;

&lt;p&gt;JSTL是一个不断完善的开放源代码的JSP标签库，依赖于EL，使用需要导入jstl.jar。&lt;/p&gt;

&lt;p&gt;JSTL标签库可分为四种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;core&lt;/li&gt;
&lt;li&gt;fmt&lt;/li&gt;
&lt;li&gt;sql&lt;/li&gt;
&lt;li&gt;xml&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中sql标签库和xml标签库已过时。使用标签的JSP页面中使用taglib指令导入标签库，如下：&lt;br /&gt;
&lt;code&gt;&amp;lt;%@ taglib prefix=&amp;quot;c&amp;quot;uri=&amp;quot;http://java.sun.com/jstl/core&amp;quot; %&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prefix=&amp;quot;c&amp;quot;&lt;/code&gt;：指定标签库的前缀，这个前缀可以随便给值，但大家都会在使用core标签库时指定前缀为c；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uri=&amp;quot;http://java.sun.com/jstl/core&amp;quot;&lt;/code&gt;：指定标签库的uri，它不一定是真实存在的网址，但它可以让JSP找到标签库的描述文件；&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;core标签库常用标签&#34;&gt;core标签库常用标签&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;out

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:out value=&amp;quot;aaa&amp;quot;/&amp;gt;&lt;/code&gt; 输出aaa字符串常量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:out value=&amp;quot;${aaa}&amp;quot;/&amp;gt;&lt;/code&gt;    与${aaa}相同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:out value=&amp;quot;${aaa}&amp;quot; default=&amp;quot;xxx&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;set

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:set var=&amp;quot;a&amp;quot; value=&amp;quot;hello&amp;quot;/&amp;gt;&lt;/code&gt; 在pageContext中添加name为a，value为hello的数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:set var=&amp;quot;a&amp;quot; value=&amp;quot;hello&amp;quot; scope=&amp;quot;session&amp;quot;/&amp;gt;&lt;/code&gt; 在session中添加name为a，value为hello的数据。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;remove

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c: remove var=&amp;quot;a&amp;quot;/&amp;gt;&lt;/code&gt; 删除所有域中name为a的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:remove var=&amp;quot;a&amp;quot; scope=&amp;quot;page&amp;quot;/&amp;gt;&lt;/code&gt; 删除pageContext中name为a的数据&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;url

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:url value=&amp;quot;/&amp;quot;/&amp;gt;&lt;/code&gt; 输出上下文路径：/项目名/&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:url value=&amp;quot;/&amp;quot; var=&amp;quot;a&amp;quot; scope=&amp;quot;request&amp;quot;/&amp;gt;&lt;/code&gt; 把本该输出的结果赋给变量a。范围为request&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:url value=&amp;quot;/AServlet&amp;quot;/&amp;gt;&lt;/code&gt;   输出：/项目名/AServlet&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:url value=&amp;quot;/AServlet&amp;quot;&amp;gt;
&amp;lt;c:param name=&amp;quot;username&amp;quot; value=&amp;quot;abc&amp;quot;/&amp;gt;
&amp;lt;c:param name=&amp;quot;password&amp;quot; value=&amp;quot;123&amp;quot;/&amp;gt;&lt;/code&gt; 输出：/项目名/AServlet?username=abc&amp;amp;password=123。如果参数中包含中文，那么会自动使用URL编码！&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;if&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:if test=&amp;quot;条件&amp;quot;&amp;gt;满足条件执行的JSP代码&amp;lt;/c:if&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;choose&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:choose&amp;gt;
&amp;lt;c:when test=&amp;quot;条件&amp;quot;&amp;gt;处理&amp;lt;/c:when&amp;gt;
&amp;lt;c:when test=&amp;quot;条件&amp;quot;&amp;gt;处理&amp;lt;/c:when&amp;gt;
&amp;lt;c:otherwise&amp;gt;处理&amp;lt;/c:otherwise&amp;gt;
&amp;lt;/c:choose&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forEach&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:forEach var=&amp;quot;名字(i)&amp;quot; begin=&amp;quot;开始数字(1)&amp;quot; end=&amp;quot;结束数字(5)&amp;quot;&amp;gt;
${i}
&amp;lt;/c:forEach&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:forEach var=&amp;quot;item&amp;quot; items=&amp;quot;数组/集合&amp;quot;&amp;gt;
${item}
&amp;lt;/c:forEach&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:forTokens&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c:forTokens items=&amp;quot;google,runoob,taobao&amp;quot; delims=&amp;quot;,&amp;quot; var=&amp;quot;name&amp;quot;&amp;gt;
&amp;lt;c:out value=&amp;quot;${name}&amp;quot;/&amp;gt;&amp;lt;p&amp;gt;
&amp;lt;/c:forTokens&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;fmt标签库&#34;&gt;fmt标签库&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;fmt:formatNumber value=”被格式化的数据”[type=”number|currency|percent”]

                                               [pattern=”pattern”]

                                               [currencyCode=”code”]

                                               [currencySymbol=”symbol”]

                                               [groupingUsed=”true|false”]

                                               [maxIntergerDigits=”maxDigits”]

                                               [minIntergerDigits=”minDigits”]

                                               [maxFractionDigits=”maxDigits”]

                                               [minFractionDigits=”minDigits”]

                                               [var=”name”]

                                               [scope=page|request|session|application]

/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详见 &lt;a href=&#34;http://www.runoob.com/jsp/jstl-format-formatdate-tag.html&#34; target=&#34;blank&#34;&gt;fmt&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;jstl自定义标签&#34;&gt;JSTL自定义标签&lt;/h2&gt;

&lt;p&gt;JSP中使用自定义标签移除只需要完成以下两个步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;编写一个实现Tag接口的java类（标签处理类）；&lt;/li&gt;
&lt;li&gt;编写标签库描述符（tld）文件，在tld文件中对标签处理类进行描述。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;详见 &lt;a href=&#34;https://www.cnblogs.com/shanheyongmu/p/5940945.html&#34; target=&#34;blank&#34;&gt;JSTL自定义标签&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;jdbc&#34;&gt;JDBC&lt;/h2&gt;

&lt;p&gt;JDBC核心类:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DriverManager

&lt;ul&gt;
&lt;li&gt;注册驱动&lt;/li&gt;
&lt;li&gt;获取Connection&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Connection

&lt;ul&gt;
&lt;li&gt;与数据库通讯&lt;/li&gt;
&lt;li&gt;获取Statement&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Statement

&lt;ul&gt;
&lt;li&gt;向数据库发送SQL语句&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ResultSet

&lt;ul&gt;
&lt;li&gt;结果集&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JDBC编写顺序：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;注册驱动层序&lt;/li&gt;
&lt;li&gt;获取数据库连接&lt;/li&gt;
&lt;li&gt;创建Statement/PreparedStatement&lt;/li&gt;
&lt;li&gt;发送执行sql语句&lt;/li&gt;
&lt;li&gt;处理结果集（如果有）&lt;/li&gt;
&lt;li&gt;释放资源&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;statement&#34;&gt;Statement&lt;/h4&gt;

&lt;p&gt;con.createStatement()（结果集不滚动、不敏感、不可更新）&lt;br /&gt;
con.createStatement(int,int)&lt;/p&gt;

&lt;h2 id=&#34;jdbc之statement-preparedstatement-callablestatement&#34;&gt;JDBC之Statement,PreparedStatement,CallableStatement&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Statement、PreparedStatement和CallableStatement都是接口(interface)。&lt;/li&gt;
&lt;li&gt;Statement继承自Wrapper、PreparedStatement继承自Statement、CallableStatement继承自PreparedStatement。&lt;/li&gt;
&lt;li&gt;Statement接口提供了执行语句和获取结果的基本方法；&lt;br /&gt;
PreparedStatement接口添加了处理 IN 参数的方法；&lt;br /&gt;
CallableStatement接口添加了处理 OUT 参数的方法。&lt;/li&gt;
&lt;li&gt;特性

&lt;ul&gt;
&lt;li&gt;Statement

&lt;ul&gt;
&lt;li&gt;普通的不带参的查询SQL；&lt;/li&gt;
&lt;li&gt;支持批量更新,批量删除;&lt;/li&gt;
&lt;li&gt;Statement每次执行sql语句，数据库都要执行sql语句的编译;用于仅执行一次查询并返回结果的情形时，效率高于PreparedStatement。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PreparedStatement

&lt;ul&gt;
&lt;li&gt;可变参数的SQL,编译一次,执行多次,效率高;安全性好，有效防止Sql注入等问题&lt;/li&gt;
&lt;li&gt;支持批量更新,批量删除;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CallableStatement

&lt;ul&gt;
&lt;li&gt;继承自PreparedStatement,支持带参数的SQL操作;&lt;/li&gt;
&lt;li&gt;支持调用存储过程,提供了对输出和输入/输出参数(INOUT)的支持;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用PreparedStatement有几个好处&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在执行可变参数的一条SQL时，PreparedStatement比Statement的效率高，因为DBMS预编译一条SQL当然会比多次编译一条SQL的效率要高。&lt;/li&gt;
&lt;li&gt;安全性好，有效防止Sql注入等问题。&lt;/li&gt;
&lt;li&gt;对于多次重复执行的语句，使用PreparedStament效率会更高一点，并且在这种情况下也比较适合使用batch；&lt;/li&gt;
&lt;li&gt;代码的可读性和可维护性。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;execute&#34;&gt;execute&amp;hellip;&lt;/h4&gt;

&lt;p&gt;executeQuery：返回结果集(ResultSet)。&lt;br /&gt;
executeUpdate: 执行给定SQL语句,该语句可能为 INSERT、UPDATE 或 DELETE 语句，或者不返回任何内容的SQL语句（如 SQL DDL 语句）。&lt;br /&gt;
execute: 可用于执行任何SQL语句，返回一个boolean值，表明执行该SQL语句是否返回了ResultSet。如果执行后第一个结果是ResultSet，则返回true，否则返回false。&lt;/p&gt;

&lt;h2 id=&#34;事务&#34;&gt;事务&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/fjdingsd/p/5273008.html&#34; target=&#34;blank&#34;&gt;事务的四大特性及隔离级别&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;数据库连接池&#34;&gt;数据库连接池&lt;/h2&gt;

&lt;p&gt;DBCP（hibernate3不再支持）&lt;/p&gt;

&lt;p&gt;C3P0&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>[转]TCP与UDP——笔记</title>
      <link>https://ianeiu.github.io/2018/12/19/%E8%BD%ACtcp%E4%B8%8Eudp%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/12/19/%E8%BD%ACtcp%E4%B8%8Eudp%E7%AC%94%E8%AE%B0/</guid>
      
        <description>

&lt;h2 id=&#34;tcp与udp&#34;&gt;TCP与UDP&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;面向报文的传输方式&lt;/strong&gt;是应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。因此，应用程序必须选择合适大小的报文。若报文太长，则IP层需要分片，降低效率。若太短，会是IP太小。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。这也就是说，应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。
&lt;strong&gt;面向字节流&lt;/strong&gt;的话，虽然应用程序和TCP的交互是一次一个数据块（大小不等），但TCP把应用程序看成是一连串的无结构的字节流。TCP有一个缓冲，当应用程序传送的数据块太长，TCP就可以把它划分短一些再传送。如果应用程序一次只发送一个字节，TCP也可以等待积累有足够多的字节后再构成报文段发送出去。&lt;/p&gt;

&lt;h2 id=&#34;tcp协议&#34;&gt;TCP协议&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Transmission Control Protocol，传输控制协议&lt;/li&gt;
&lt;li&gt;面向连接的协议&lt;/li&gt;
&lt;li&gt;需要三次握手建立连接&lt;/li&gt;
&lt;li&gt;需要四次挥手断开连接&lt;/li&gt;
&lt;li&gt;TCP报头最小长度：20字节&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;三次握手的过程&#34;&gt;三次握手的过程&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;客户端发送：SYN = 1, SEQ = X, 端口号&lt;/li&gt;
&lt;li&gt;服务器回复：SYN = 1, ACK = X + 1, SEQ = Y&lt;/li&gt;
&lt;li&gt;客户端发送：ACK = Y + 1, SEQ = X + 1&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;确认应答信号ACK = 收到的SEQ + 1。连接建立中，同步信号SYN始终为1。连接建立后，同步信号SYN=0。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;四次挥手过程&#34;&gt;四次挥手过程&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;A向B提出停止连接请求，FIN = 1&lt;/li&gt;
&lt;li&gt;B收到，ACK = 1&lt;/li&gt;
&lt;li&gt;B向A提出停止连接请求，FIN = 1&lt;/li&gt;
&lt;li&gt;A收到，ACK = 1&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;优点:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;可靠，稳定

&lt;ol&gt;
&lt;li&gt;传递数据前，会有三次握手建立连接&lt;/li&gt;
&lt;li&gt;传递数据时，有确认、窗口、重传、拥塞控制&lt;/li&gt;
&lt;li&gt;传递数据后，会断开连接节省系统资源&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;传输慢，效率低，占用系统资源高&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;传递数据前，建立连接需要耗时&lt;/li&gt;
&lt;li&gt;传递数据时，确认、重传、拥塞等会消耗大量时间以及CPU和内存等硬件资源&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;易被攻击
1、因为有确认机制，三次握手等机制，容易被人利用，实现DOS 、DDOS攻击&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;如何保证接收的顺序性：&lt;/strong&gt;
TCP协议使用SEQ和ACK机制保证了顺序性
TCP的每个报文都是有序号的。确认应答信号ACK=收到的SEQ+1&lt;/p&gt;

&lt;h2 id=&#34;udp协议&#34;&gt;UDP协议&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;User Data Protocol，用户数据包协议&lt;/li&gt;
&lt;li&gt;面向无连接的协议&lt;/li&gt;
&lt;li&gt;UDP报头只有8字节&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;简介：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;传输数据之前源端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快的把它扔到网络上&lt;/li&gt;
&lt;li&gt;在发送端，UDP传送数据的速度仅仅是受应用程序生成数据的速度、计算机的能力和传输带宽的限制&lt;/li&gt;
&lt;li&gt;在接收端，UDP把每个消息段放在队列中，应用程序每次从队列中读一个消息段&lt;/li&gt;
&lt;li&gt;由于传输数据不建立连接，因此也就不需要维护连接状态，包括收发状态等，因此一台服务机可同时向多个客户机传输相同的消息&lt;/li&gt;
&lt;li&gt;UDP信息包的标题很短，只有8个字节，相对于TCP的20个字节信息包的额外开销很小&lt;/li&gt;
&lt;li&gt;吞吐量不受拥挤控制算法的调节，只受应用软件生成数据的速率、传输带宽、源端和终端主机性能的限制&lt;/li&gt;
&lt;li&gt;UDP使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态表。&lt;/li&gt;
&lt;li&gt;UDP是面向报文的。发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付给IP层。既不拆分，也不合并，而是保留这些报文的边界，因此，应用程序需要选择合适的报文大小。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;使用“ping”命令来测试两台主机之间TCP/IP通信是否正常，其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包，如果数据包是否到达的消息及时反馈回来，那么网络就是通的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;传输速率快&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;传输数据前，不需要像TCP一样建立连接&lt;/li&gt;
&lt;li&gt;传输数据时，没有确认、窗口、重传、拥塞控制等机制&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;较安全&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;由于没有了TCP的一些机制，被攻击者利用的漏洞就少了&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不可靠，不稳定
1、由于没有了TCP的机制，在数据传输时如果网络不好，很可能丢包&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;用UDP协议通讯时怎样得知目标机是否获得了数据包&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;仿造TCP的做法，每发一个UDP包，都在里面加一个SEQ序号，接收方收到包后，将SEQ序号回复给发送方。如果发送方在指定时间以内没有收到回应，说明丢包了。&lt;/p&gt;

&lt;h2 id=&#34;tcp与udp的区别&#34;&gt;TCP与UDP的区别&lt;/h2&gt;

&lt;hr /&gt;

&lt;table class=&#34;table table-bordered table-striped table-condensed&#34;&gt;
    &lt;tr&gt;
        &lt;td&gt;TCP面向&lt;strong&gt;有链接&lt;/strong&gt;的通信服务&lt;/td&gt;
        &lt;td&gt;UDP面向&lt;strong&gt;无连接&lt;/strong&gt;的通信服务&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;TCP提供可靠的通信传输&lt;/td&gt;
        &lt;td&gt;UDP不可靠,会丢包&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;TCP保证数据顺序&lt;/td&gt;
        &lt;td&gt;UDP不保证&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;TCP数据无边界&lt;/td&gt;
        &lt;td&gt;UDP有边界&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;TCP速度快&lt;/td&gt;
        &lt;td&gt;UDP速度慢&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;TCP面向字节流&lt;/td&gt;
        &lt;td&gt;UDP面向报文&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;TCP一对一&lt;/td&gt;
        &lt;td&gt;UDP可以一对一，一对多&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;TCP报头至少20字节&lt;/td&gt;
        &lt;td&gt;UDP报头8字节&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;TCP有流量控制，拥塞控制&lt;/td&gt;
        &lt;td&gt;UDP没有&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;为什么UDP比TCP快&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;TCP需要三次握手&lt;/li&gt;
&lt;li&gt;TCP有拥塞控制，控制流量等机制&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;为什么TCP比UDP可靠&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;TCP是面向有连接的，建立连接之后才发送数据；而UDP则不管对方存不存在都会发送数据。&lt;/li&gt;
&lt;li&gt;TCP有确认机制，接收端每收到一个正确包都会回应给发送端。超时或者数据包不完整的话发送端会重传。UDP没有。因此可能丢包。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;什么时候使用TCP&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;当对网络通讯质量有要求的时候，比如：整个数据要准确无误的传递给对方，这往往用于一些要求可靠的应用，比如HTTP、HTTPS、FTP等传输文件的协议，POP、SMTP等邮件传输的协议。
在日常生活中，常见使用TCP协议的应用如下：
浏览器，用的HTTP
FlashFXP，用的FTP
Outlook，用的POP、SMTP
Putty，用的Telnet、SSH
QQ文件传输&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么时候应该使用UDP：&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;当对网络通讯质量要求不高的时候，要求网络通讯速度能尽量的快，这时就可以使用UDP。
比如，日常生活中，常见使用UDP协议的应用如下：
QQ语音
QQ视频
TFTP&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TCP无边界，UDP有边界&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;TCP无边界&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;客户端分多次发送数据给服务器，若服务器的缓冲区够大，那么服务器端会在客户端发送完之后一次性接收过来，所以是无边界的；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UDP有边界&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;客户端每发送一次，服务器端就会接收一次，也就是说发送多少次就会接收多少次，因此是有边界的。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>[转]计算机网络基础汇总</title>
      <link>https://ianeiu.github.io/2018/12/19/%E8%BD%AC%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/12/19/%E8%BD%AC%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/</guid>
      
        <description>

&lt;h1 id=&#34;计算机网络体系分类&#34;&gt;计算机网络体系分类：&lt;/h1&gt;

&lt;p&gt;计算机网络整个体系有两个大的分类：一个是国际组织制定的OSI七层模型，一种是实际使用中的TCP/IP四层模型。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OSI七层模型&lt;/th&gt;
&lt;th&gt;TCP/IP四层模型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;表示层&lt;/td&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;会话层&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;传输层&lt;/td&gt;
&lt;td&gt;传输层&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;网络层&lt;/td&gt;
&lt;td&gt;网络层&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;数据链路层&lt;/td&gt;
&lt;td&gt;物理接入层&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;物理层&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;物理层&#34;&gt;物理层：&lt;/h1&gt;

&lt;p&gt;物理层主要是实现主机和网络之间的物理连接，规定一些与传输媒体接口有关的一些特性。&lt;/p&gt;

&lt;h2 id=&#34;通信方式&#34;&gt;通信方式：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;单工通信：&lt;/strong&gt;只能由A主机向B主机发送消息，通信是单向的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;半双工通信：&lt;/strong&gt;同一时间只能是由A主机向B主机或者是B主机向A主机发送信息，不能同时发送消息。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;全双工通信：&lt;/strong&gt; A主机和B主机可以实现在同一时间内既接收消息，又发送消息，极大的提升了通信效率。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;常见引导型传输媒体&#34;&gt;常见引导型传输媒体：&lt;/h2&gt;

&lt;h3 id=&#34;双绞线&#34;&gt;双绞线：&lt;/h3&gt;

&lt;p&gt;分为屏蔽双绞线（STP）和非屏蔽双绞线（UTP），屏蔽双绞线就是在非屏蔽双绞线外边又加了一层屏蔽层&lt;/p&gt;

&lt;p&gt;tips：为什么双绞线要两根线绞起来，两个线绞起来可以有效的减少相互之间的电磁干扰。&lt;/p&gt;

&lt;h3 id=&#34;同轴电缆&#34;&gt;同轴电缆：&lt;/h3&gt;

&lt;p&gt;由内导体铜制芯线，绝缘层，网状编织的外导体屏蔽层，以及塑料保护外层组成。有良好的抗干扰性，被广泛用于较高速率的传输。&lt;/p&gt;

&lt;h3 id=&#34;光缆&#34;&gt;光缆：&lt;/h3&gt;

&lt;p&gt;由非常透明的石英玻璃拉成细丝，主要由纤芯和包层构成双层通讯柱。可以分为单模光纤和多模光纤。&lt;/p&gt;

&lt;h2 id=&#34;信道复用技术&#34;&gt;信道复用技术：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;频分复用：&lt;/strong&gt;根据传输的波的频率的不同，将不同频段的波用于不同的通信。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;时分复用：&lt;/strong&gt;将时间分割为时间段，规定在某个时间段内发送什么样的信息，根据时间段来进行信息类别的区分。也称为&lt;strong&gt;同步时分复用&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;统计时分复用：&lt;/strong&gt;基于时分复用的一种改进，由于基本的时分复用并没有考虑到每个时间段内是否有信息发出，例如说每个时间段是20，但是发送消息只占用其中的2，那么剩下的18就处于空闲时间。统计时分复用就是基于这种考虑而设计的，他允许用户有数据时就将数据发送到缓存中，然后会依次扫描输入缓存，把缓存中的数据放入到STMD帧中，若没有就跳过，每当一个帧满了就把这个帧发出去。STMD帧不是分配的固定时序，而是根据需要动态的分配时隙，也称之为&lt;strong&gt;异步时分复用&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;光分复用：就是光的频分复用，根据光谱中频率的不同，用不同频率的光来携带不同的信息。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;数据链路层&#34;&gt;数据链路层：&lt;/h1&gt;

&lt;p&gt;数据链路层主要是将上层的数据转化为数据帧发送到链路上，以及把接受到的帧中的数据取出并交给网络层。&lt;/p&gt;

&lt;h2 id=&#34;通信方式-1&#34;&gt;通信方式：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;点对点通信：&lt;/strong&gt;通信方式是点到点的，也就是只能是两个点之间的通信。常见的就是PPP协议&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;广播通信：&lt;/strong&gt;广播通讯，也就是可以同时实现一对多的通信。常见的就是CSMA/CD（载波监听多点访问/冲突检测）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;核心要解决的问题&#34;&gt;核心要解决的问题：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;封装成帧：&lt;/strong&gt;在一段数据的前后分别添加首部和尾部，这样就构成了一个帧。接收端在接受到后就可以方便准确的确定帧的首尾，也称为帧定界符。同时定义出了最大传输单元（MTU）&amp;ndash;表示一次可以传输的最大长度上限。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;透明传输：&lt;/strong&gt; 由于使用特定的字符来表示帧的开始和结束，所以传输的内容中不能出现和帧定界符相同的字符，但这显然是不可能的，为了解决这个办法，就可以在内容中和帧定界符一样的字符前边加上规定好的转义字符，这种方法称为字符填充或者是字节填充。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;差错检测：&lt;/strong&gt; 比特在传输过程中可能产生差错，差错检测就是用于检测出现的差错，以便及时的重传，最常用的差错检测算法就是&lt;a href=&#34;http://baike.sogou.com/v7730112.htm?fromTitle=CRC%E6%A0%A1%E9%AA%8C&#34;&gt;CRC（循环冗余检验）&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;网络层&#34;&gt;网络层&lt;/h1&gt;

&lt;p&gt;网络层主要是向上只提供简单灵活的，无连接的，尽最大努力交付的数据报服务。&lt;/p&gt;

&lt;h2 id=&#34;ip协议-网际协议&#34;&gt;IP协议（网际协议）：&lt;/h2&gt;

&lt;p&gt;IP协议是TCP/IP体系中最主要的协议之一，一切在IP之下，一切又在IP之上。我们常说的应该是IP协议族，还包含配套的协议：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ARP（地址解析协议）：将网络的IP地址转化为实际的物理地址（MAC地址），并存储在MAC地址表中。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ICMP（网际控制报文协议）：用于进行差错情况和异常情况的反馈，分为询问报文和差错报告报文。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;IGMP（网际组管理协议）：用于控制和管理多播和组播的协议。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;网络地址（IP地址）主要分为五类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A类：前8位为网络位，后24位为主机位，首位为0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;B类：前16位为网络位，后16位为主机位，前两位为10&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C类：前24位为网络位，后8位位主机位，前三位为110&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D类：前四位为1110，用于多播地址&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;E类：前四位为1111，保留为以后使用&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;路由选择协议&#34;&gt;路由选择协议：&lt;/h2&gt;

&lt;p&gt;路由选择协议分为&lt;strong&gt;内部网关协议（IGP）&lt;/strong&gt;和&lt;strong&gt;外部网关协议（EGP）&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;内部网关协议&#34;&gt;内部网关协议：&lt;/h3&gt;

&lt;p&gt;主要是有RIP协议和OSPF协议&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;RIP协议（路由信息协议）：&lt;/strong&gt;基于距离矢量的协议&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;OSPF（开放最短路径优先协议）：&lt;/strong&gt;基于链路状态的协议&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;外部网关协议&#34;&gt;外部网关协议：&lt;/h3&gt;

&lt;p&gt;主要是&lt;strong&gt;边界网关协议（BGP）&lt;/strong&gt;，将一个大的网络分为多个小的自治域，每个自治域内有一个网关路由负责和其他的自治域的网关进行通讯。&lt;/p&gt;

&lt;h1 id=&#34;传输层&#34;&gt;传输层&lt;/h1&gt;

&lt;p&gt;网络层主要是为主机之间提供逻辑通讯，而传输层为应用程序之间提供端到端的逻辑通讯。主要是两种类型的通讯方式，面向连接的TCP协议和面向无连接的UDP。&lt;/p&gt;

&lt;h2 id=&#34;端口号&#34;&gt;端口号：&lt;/h2&gt;

&lt;p&gt;端口号按照使用地方的不同分为两大类：服务端端口号，客户端端口号。
按照占用时长又可以分为熟知端口号（0~1023），登记端口号（1024~49151），短暂端口号（49152~65535）&lt;/p&gt;

&lt;h3 id=&#34;常见端口&#34;&gt;常见端口：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FTP（文件传输协议）：20，21&amp;mdash;&amp;mdash;其中20端口用于传输数据，21端口用于命令控制&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Telnet（远程登录协议）：23&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DNS（域名解析服务）：53&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;TFTP（简单文件传输协议）：69&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HTTP（超文本传输协议）：80&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;两种协议&#34;&gt;两种协议：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;UDP（用户数据报协议）：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UDP是无连接的&lt;/li&gt;
&lt;li&gt;UDP使用尽最大努力交付，但是不保证可靠交付&lt;/li&gt;
&lt;li&gt;UDP是面向报文的&lt;/li&gt;
&lt;li&gt;UDP没有拥塞控制&lt;/li&gt;
&lt;li&gt;UDP支持一对一，一对多，多对一，多对一的交互通讯&lt;/li&gt;
&lt;li&gt;UDP首部的开销小&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;TCP（传输控制协议）：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TCP是面向连接的&lt;/li&gt;
&lt;li&gt;每一条TCP连接只能由两个端点，每一条TCP连接只能是点对点的$TCP连接：：= { socket_1,socket_2 } ={ (IP_1:port_1),(IP_2:port_2)}$&lt;/li&gt;
&lt;li&gt;TCP提供可靠交付的服务&lt;/li&gt;
&lt;li&gt;TCP提供全双工通信&lt;/li&gt;
&lt;li&gt;面向字节流&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;可靠传输的实现机制&#34;&gt;可靠传输的实现机制：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;停止等待协议：&lt;/strong&gt; 每发完一个分组就停止发送，直到收到上一个分组的确认信息。若超过规定时间没有接收到确认信息，边认为是分组丢失，开始重传。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;连续ARQ协议：&lt;/strong&gt;  发送方采用滑动窗口的形式，处于滑动窗口的分组可以直接发送出去；接收方一般采用累积确认的方式，也就是说接受方不必对接收到的每一个分组都进行确认，而是对按序到达的最后一个分组进行确认，而发送方每接收到一个确认，窗口就向前滑动一定距离。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;流量控制：&lt;/strong&gt;协调发送方和接收方的收发速率，利用滑动窗口来协调，使用探测报文来探测当前应该发送的速率，采用&lt;a href=&#34;http://baike.sogou.com/v10500918.htm?fromTitle=Nagle%E7%AE%97%E6%B3%95&#34;&gt;Nagle算法&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;拥塞控制：&lt;/strong&gt;
当网络中某一资源的需求超出了该资源所能提供的可用部分，这时网络的性能就要开始变坏，这种情况就叫做拥塞。而拥塞控制就是为了减少或者避免拥塞对网络性能的影响而做出的一种控制手段。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;拥塞控制思路：&lt;/strong&gt;发送方维持一个叫做&lt;strong&gt;拥塞窗口&lt;/strong&gt;的状态变量，拥塞窗口的大小取决于网络的拥塞程度，并且在动态的变化。发送方让自己的发送窗口等于拥塞窗口，如果在考虑接收方的接收能力，一般发送窗口还要小于拥塞窗口。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;慢开始：&lt;/strong&gt;当主机开始发送数据的时候，由小到大的增大发送窗口，也就是由小到大的增大拥塞窗口。接收方接收到一个报文之后就回传一个确认报文，发送方每接收到一个确认报文，就将拥塞窗口加1，这样每经过一个传输轮次之后，拥塞窗口就增大一倍。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;拥塞避免：&lt;/strong&gt;思路是让拥塞窗口缓慢的增大，即每经过一个往返时间RTT就把发送方的拥塞窗口加1，而不是加倍，这样拥塞窗口就是线性缓慢增加，比慢开始的增长速率缓慢的多。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;慢开始门限：&lt;/strong&gt;为了防止拥塞窗口增长过大引起网络拥塞，还需要设置一个慢开始门限&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;拥塞窗口&amp;lt;慢开始门限时，使用慢开始算法&lt;/li&gt;
&lt;li&gt;拥塞窗口&amp;gt;慢开始门限时，使用拥塞避免算法&lt;/li&gt;
&lt;li&gt;拥塞窗口=慢开始门限时，两种算法都可以&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;快重传：&lt;/strong&gt;要求收到方每收到一个时序的报文段之后就立即发出重复确认，而不要等到自己发送数据时才进行捎带确认。而发送方只要一连收到三个重复确认就应当立即重传对方尚未接受到的报文，而不必等待为报文设置的重传计时器到期。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;快回复：&lt;/strong&gt;与快重传配合使用，当发送方连续收到三个重复确认的时候，就执行“乘法减小”算法，将慢开始门限减半。将拥塞窗口设置为慢开始门限减半之后的值，并开始指向拥塞避免算法。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tcp的连接管理&#34;&gt;TCP的连接管理：&lt;/h3&gt;

&lt;h4 id=&#34;连接三次握手&#34;&gt;连接三次握手：&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;客户端请求建立连接：SYN=1，seq=x；&lt;/li&gt;
&lt;li&gt;服务器对客户端的请求进行响应：SYN=1，ACK=1，seq=y，ack=x+1&lt;/li&gt;
&lt;li&gt;客户端对服务器端的响应信息进行回应：ACK=1，seq=x+1，ack=y+1&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; SYN为同步信息，在建立连接过程中始终为1&lt;/p&gt;

&lt;h4 id=&#34;断开连接四次握手&#34;&gt;断开连接四次握手：&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;客户端请求断开连接： FIN=1，seq = u；&lt;/li&gt;
&lt;li&gt;服务端对客户端的请求应答：ACK=1，seq=v，ack=u+1；&lt;/li&gt;
&lt;li&gt;服务端请求断开连接：FIN=1，ACK=1，seq=w，ack=u+1；&lt;/li&gt;
&lt;li&gt;客户端对服务端的请求应答：ACK=1，seq=u+1，ack=w+1；&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;应用层&#34;&gt;应用层&lt;/h1&gt;

&lt;p&gt;应用层有多种协议，常用到的就是HTTP以及HTTPS。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP协议报文格式&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;请求报文&lt;/th&gt;
&lt;th&gt;相应报文&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;请求行（用于区分是请求报文还是响应报文，在响应报文中为状态行）&lt;/td&gt;
&lt;td&gt;状态行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;首部行（用来说明浏览器，服务器或者是报文主体的一些信息）&lt;/td&gt;
&lt;td&gt;首部行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;空行（用于隔开请求实体和首部行）&lt;/td&gt;
&lt;td&gt;空行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;实体主体（用于一些请求或者是响应的的参数内容等）&lt;/td&gt;
&lt;td&gt;实体主体&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;常见状态码&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1xx：表示通知信息，例如表示收到或者是正在处理
2xx：表示成功，例如表示接受或知道了
3xx：表示重定向，例如表示完成请求还需要采取进一步的行动
4xx：表示客户端的差错，例如表示请求中有语法错误或不能完成
5xx：表示服务器端的差错：例如表示服务器失效无法完成请求&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HTTPS协议就是对HTTP协议的加密，更加安全可靠，采用HTTP+SSL（安全套接字层）来保证数据的安全性。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Java基础题（Integer、String、内部类与final）</title>
      <link>https://ianeiu.github.io/2018/11/18/java%E5%9F%BA%E7%A1%80%E9%A2%98integerstring%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8Efinal/</link>
      <pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/11/18/java%E5%9F%BA%E7%A1%80%E9%A2%98integerstring%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8Efinal/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;翻了翻之前收藏的文章，找到几道有意思的题，这里整理汇总一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;integer&#34;&gt;Integer&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Integer a = 1000,b=1000;
Integer c = 100,d=100;    
@Test
public void testIntegerDD(){
    System.out.println(a==b);//false  
    System.out.println(c==d);//true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行代码，我们会得到 false  true。这道题笔试用经常出现，原理也很简单
,可看Integer源码valueOf(int i)方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static Integer valueOf(int i) {
	if (i &amp;gt;= IntegerCache.low &amp;amp;&amp;amp; i &amp;lt;= IntegerCache.high)
	return IntegerCache.cache[i + (-IntegerCache.low)];
	return new Integer(i);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，简单的扩展几个Integer的关系运算符==的比较。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Test
public void testIntegerDD(){

    Integer a = 1000,b=1000;
    Integer c = 100,d=100;   
    Integer e = new Integer(100);
    Integer f = new Integer(100);
    int g = 1000;
    Integer h = new Integer(1000);  


    //1、进行自动装箱操作；2、Integer中把-128-127 缓存了下来
    System.out.println(a==b);//false  
    System.out.println(c==d);//true

    //这里并不是用的缓存，而是new创建的对象存放在堆内存中，俩个变量指向不同引用，所以结果是false
    System.out.println(e==f);//false
    //当int和Integer进行==比较的时候，Java会把Integer进行自动拆箱为int类型的值
    System.out.println(g==h);//true

    //进行自动装箱操作
    System.out.println(c==e);//false
    System.out.println(a==h);//false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;string&#34;&gt;String&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;阅读前先要理解 ==，==如果作用于基本数据类型的变量，则直接比较其存储的 “值”是否相等；如果作用于引用类型的变量，则比较的是所指向的对象的地址。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;@Test
public void testStringDD() {
    String s1 = &amp;quot;hello&amp;quot;;
    String s2 = &amp;quot;hello&amp;quot;;
    String s3 = new String(&amp;quot;hello&amp;quot;);

    System.out.println(s1==s2); // true
    System.out.println(s1==s3); // false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文章解释：&lt;br /&gt;
一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配，而堆内存中则存放new出来的对象和数组。然而除此之外还有一块区域叫做常量池。&lt;br /&gt;
像我们通常想String s1 = &amp;ldquo;hello&amp;rdquo;; 这样申明的字符串对象，其值就是存储在常量池中。&lt;br /&gt;
当我们创建String s1 =&amp;ldquo;hello&amp;rdquo;这样一个对象之后，&amp;rdquo;hello&amp;rdquo;就存储到了常量池（也可叫做字符串池）中，当我们创建引用String s2  = &amp;ldquo;hello&amp;rdquo; 的时候，Java底层会优先在常量池中查找是否存在&amp;rdquo;hello&amp;rdquo;，如果存在则让s2指向这个值，不会重新创建，如果常量池中没有则创建并添加的池中。这就是为什么答案是true 和false的原因。&lt;/p&gt;

&lt;p&gt;接下来，还是简单的扩展几个String的关系运算符==的比较。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Test
public void testStringDD() {
    String s1 = &amp;quot;hello&amp;quot;;
    String s2 = &amp;quot;hello&amp;quot;;
    String s3 = new String(&amp;quot;hello&amp;quot;);

    //都存储在常量池中,指向同一常量
    System.out.println(s1==s2); // true
    //存储在常量池中,存储在堆内存中
    System.out.println(s1==s3); // false

    String s4 = &amp;quot;helloo&amp;quot;;
    /**
     * 会重新在常量池创建常量（String不可变属性）
     */
    String s5 = s1+&amp;quot;o&amp;quot;;
    //字符串拼接有变量参与，底层调用StringBuffer处理，相当于在堆内存中开辟了新空间
    System.out.println(s4 == s5); // false
    //常量相加，先在常量池找，找到即用
    System.out.println(s4 == &amp;quot;hello&amp;quot;+&amp;quot;o&amp;quot;);//true

    //hello
    String s6 = s4.substring(0, s4.length() - 1);
    //substring返回的也是new出来的String对象
    System.out.println(s1 == s6); // false
    //地址值不一样
    System.out.println(s3 == s6); // false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;扩展：equals方法。equals方法不能作用于基本数据类型的变量，如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址；诸如String、Date等类对equals方法进行了重写的话，比较的是所指向的对象的内容。&lt;/p&gt;

&lt;h2 id=&#34;内部类与final&#34;&gt;内部类与final&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;public void mRun(final String name){
    new Runnable() {
        public void run() {
            try {
              Thread.sleep(1000);
           } catch (InterruptedException e) {
             // TODO Auto-generated catch block
            e.printStackTrace();
           }  
           System.out.println(name);
        }
    }.start();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文章解释：&lt;br /&gt;
这种代码相信大家写过很多，当内部类访问局部变量的时候，需要在局部变量前加final修饰符，不然编译器就会报错。通常我们也是这么干的。&lt;/p&gt;

&lt;p&gt;为什么要加final修饰符？&lt;br /&gt;
首先内部类的生命周期是成员级别的，而局部变量的生命周期实在方法体之类。也就是说会出现这样一种情况，当mRun方法执行，new 的线程运行，新线程里面会睡一秒。&lt;br /&gt;
主线程会继续执行，mRun执行完毕，name属性生命周期结束。1秒之后，Syetem.out.printh(name)执行。然而此时name已经寿终正寝，不在内存中了。&lt;/p&gt;

&lt;p&gt;Java就是为了杜绝这种错误，严格要求内部类中方位局部变量，必须使用final关键字修饰。&lt;br /&gt;
局部变量被final修饰之后，此时会在内存中保有一份局部变得的复制品，当内部类访问的时候其实访问的是这个复制品。这就好像是把局部变量的生命周期变长了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>SpringBoot——整合</title>
      <link>https://ianeiu.github.io/2018/11/01/springboot%E6%95%B4%E5%90%88/</link>
      <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/11/01/springboot%E6%95%B4%E5%90%88/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;如非说明，皆是使用1.5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本文只进行简单的代码提示，具体内容可自行百度&lt;/p&gt;

&lt;h3 id=&#34;cxf&#34;&gt;CXF&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;@Bean
public ServletRegistrationBean CXFServlet() {
    ServletRegistrationBean cxfBean = new ServletRegistrationBean(new CXFServlet(), &amp;quot;/webservice/*&amp;quot;);
    cxfBean.setName(&amp;quot;CXFServlet&amp;quot;);
    cxfBean.setLoadOnStartup(1);
    return cxfBean;
}

@Configuration
public class CXFConfig {
    @Autowired
    private Bus bus;
    @Autowired
    private SSOService sSOService;

    @Bean
    public Endpoint endpointSSO() {
        EndpointImpl endpoint = new EndpointImpl(bus, sSOService);
        endpoint.publish(&amp;quot;/sso&amp;quot;);
        return endpoint;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;redis-jedis&#34;&gt;redis&amp;amp;jedis&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;package cn.com.do1.component.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CachingConfigurerSupport;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import redis.clients.jedis.JedisPoolConfig;

/**
 * redis配置
 * @author wm
 *
 */
@Configuration
@EnableCaching
public class RedisConfig extends CachingConfigurerSupport{

    @Bean
    public CacheManager cacheManager(RedisTemplate&amp;lt;?, ?&amp;gt; redisTemplate) {
        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);        
        //设置缓存过期时间
        //rcm.setDefaultExpiration(60);//秒
        return rcm;
    }

    @Bean
    public RedisTemplate&amp;lt;String, Object&amp;gt; redisTemplate() {
        RedisTemplate&amp;lt;String, Object&amp;gt; template = new RedisTemplate&amp;lt;&amp;gt;();
        template.setConnectionFactory(jedisConnectionFactory());
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(new JdkSerializationRedisSerializer());
        template.setHashKeySerializer(new StringRedisSerializer());
        template.setHashValueSerializer(new JdkSerializationRedisSerializer());
        return template;
    }


    @Value(&amp;quot;${redis.address}&amp;quot;)
    private String hostName;
    @Value(&amp;quot;${redis.port}&amp;quot;)
    private String port;

    @Bean
    public JedisConnectionFactory jedisConnectionFactory(){
        JedisConnectionFactory jcf = new JedisConnectionFactory();
        jcf.setHostName(hostName);
        jcf.setPort(Integer.parseInt(port));
        //jcf.setPassword(&amp;quot;&amp;quot;);
        return jcf;
    }

    @Bean
    public JedisPoolConfig jedisPoolConfig(){
        JedisPoolConfig jpc = new JedisPoolConfig();
        jpc.setMaxIdle(1);
        jpc.setMaxTotal(5);
        jpc.setBlockWhenExhausted(true);
        jpc.setMaxWaitMillis(3000);
        jpc.setTestOnBorrow(true);
        return jpc;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;错误页面配置&#34;&gt;错误页面配置&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 跳转至错误页面
 * add 2018.07.11
 * @author wm
 * @param code
 * @return
 */
@RequestMapping(&amp;quot;/error/{code}&amp;quot;)
public String goToErrorPage(@PathVariable(value=&amp;quot;code&amp;quot;) String code){
    return code;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新增拦截器：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 错误页面拦截器
 * 替代EmbeddedServletContainerCustomizer在war中不起作用的方法
 * @author wm
 */
@Component
public class ErrorPageInterceptor extends HandlerInterceptorAdapter {
    private List&amp;lt;Integer&amp;gt; errorCodeList = Arrays.asList(404,500);
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws
        Exception {
       if (errorCodeList.contains(response.getStatus())) {
            response.sendRedirect(request.getContextPath()+&amp;quot;/error/&amp;quot; + response.getStatus());
            return false;
        }
        return super.preHandle(request, response, handler);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新增拦截配置:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void addInterceptors(InterceptorRegistry registry) {
    registry.addInterceptor(errorPageInterceptor);//.addPathPatterns(&amp;quot;/action/**&amp;quot;, &amp;quot;/mine/**&amp;quot;);默认所有
    super.addInterceptors(registry);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;定时任务&#34;&gt;定时任务&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 定时任务配置
 * @author wm
 *
 */
@Configuration
@EnableScheduling
public class SchedulerConfig implements SchedulingConfigurer{

    @Override
    public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {
        taskRegistrar.setScheduler(setTaskExecutors());
    }

    @Bean(destroyMethod=&amp;quot;shutdown&amp;quot;)
    public Executor setTaskExecutors(){
        return Executors.newScheduledThreadPool(10); // 10个线程来处理。
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;兼容jsp&#34;&gt;兼容JSP&lt;/h3&gt;

&lt;p&gt;pom新增：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    ...
    &amp;lt;!--jsp支持 --&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;tomcat-embed-jasper&amp;lt;/artifactId&amp;gt;
        &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;!-- 配置jsp-jstl的支持 --&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;javax.servlet.jsp.jstl&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;jstl-api&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    ...
&amp;lt;/dependencies&amp;gt;

&amp;lt;build&amp;gt; 
    ...
    &amp;lt;resources&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/webapp&amp;lt;/directory&amp;gt;
            &amp;lt;!-- 处理jar包启动无法访问jsp的问题 --&amp;gt;
            &amp;lt;targetPath&amp;gt;META-INF/resources&amp;lt;/targetPath&amp;gt;
            &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;**/**&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
        &amp;lt;/resource&amp;gt; 
    &amp;lt;/resources&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新增配置类（处理jar包启动无法访问jsp的问题）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;

import org.apache.catalina.Context;
import org.apache.catalina.Lifecycle;
import org.apache.catalina.LifecycleEvent;
import org.apache.catalina.LifecycleListener;
import org.apache.catalina.WebResourceRoot.ResourceSetType;
import org.springframework.util.ResourceUtils;

/**
 * Add main class fat jar/exploded directory into tomcat ResourceSet.
 *
 * @author hengyunabc 2017-07-29
 *
 */
public class StaticResourceConfigurer implements LifecycleListener {

    private final Context context;

    public StaticResourceConfigurer(Context context) {
        this.context = context;
    }

    @Override
    public void lifecycleEvent(LifecycleEvent event) {
        if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) {
            URL location = this.getClass().getProtectionDomain().getCodeSource().getLocation();

            if (ResourceUtils.isFileURL(location)) {
                // when run as exploded directory
                String rootFile = location.getFile();
                if (rootFile.endsWith(&amp;quot;/BOOT-INF/classes/&amp;quot;)) {
                    rootFile = rootFile.substring(0, rootFile.length() - &amp;quot;/BOOT-INF/classes/&amp;quot;.length() + 1);
                }
                if (!new File(rootFile, &amp;quot;META-INF&amp;quot; + File.separator + &amp;quot;resources&amp;quot;).isDirectory()) {
                    return;
                }

                try {
                    location = new File(rootFile).toURI().toURL();
                } catch (MalformedURLException e) {
                    throw new IllegalStateException(&amp;quot;Can not add tomcat resources&amp;quot;, e);
                }
            }

            String locationStr = location.toString();
            if (locationStr.endsWith(&amp;quot;/BOOT-INF/classes!/&amp;quot;)) {
                // when run as fat jar
                locationStr = locationStr.substring(0, locationStr.length() - &amp;quot;/BOOT-INF/classes!/&amp;quot;.length() + 1);
                try {
                    location = new URL(locationStr);
                } catch (MalformedURLException e) {
                    throw new IllegalStateException(&amp;quot;Can not add tomcat resources&amp;quot;, e);
                }
            }
            this.context.getResources().createWebResourceSet(ResourceSetType.RESOURCE_JAR, &amp;quot;/&amp;quot;, location,
                    &amp;quot;/META-INF/resources&amp;quot;);

        }
    }
}

import org.apache.catalina.Context;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
import org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;
import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import cn.com.do1.component.config.assembly.StaticResourceConfigurer;

/**
 * 处理jar包启动无法访问jsp的问题
 * &amp;lt;p&amp;gt;Title: TomcatConfig&amp;lt;/p&amp;gt;  
 * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;  
 * @author wm  
 * @date 2018年7月24日
 */
@Configuration
@ConditionalOnProperty(name = &amp;quot;tomcat.staticResourceCustomizer.enabled&amp;quot;, matchIfMissing = true)
public class TomcatConfig {
    @Bean
    public EmbeddedServletContainerCustomizer staticResourceCustomizer() {
        return new EmbeddedServletContainerCustomizer() {
            @Override
            public void customize(ConfigurableEmbeddedServletContainer container) {
                if (container instanceof TomcatEmbeddedServletContainerFactory) {
                    ((TomcatEmbeddedServletContainerFactory) container)
                            .addContextCustomizers(new TomcatContextCustomizer() {
                                @Override
                                public void customize(Context context) {
                                    context.addLifecycleListener(new StaticResourceConfigurer(context));
                                }
                            });
                }
            }

        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;静态资源&#34;&gt;静态资源&lt;/h3&gt;

&lt;p&gt;方式一：&lt;br /&gt;
pom新增配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;resources&amp;gt;
    &amp;lt;resource&amp;gt;
        &amp;lt;directory&amp;gt;src/main/webapp&amp;lt;/directory&amp;gt;
        &amp;lt;!--注意此次必须要放在此目录下才能被访问到--&amp;gt;
        &amp;lt;targetPath&amp;gt;META-INF/resources&amp;lt;/targetPath&amp;gt;
        &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
        &amp;lt;includes&amp;gt;
            &amp;lt;include&amp;gt;**/**&amp;lt;/include&amp;gt;
        &amp;lt;/includes&amp;gt;
    &amp;lt;/resource&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新增配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void addResourceHandlers(ResourceHandlerRegistry registry) {
    registry.addResourceHandler(&amp;quot;/js/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/META-INF/resources/WEB-INF/js/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/css/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/META-INF/resources/WEB-INF/css/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/images/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/META-INF/resources/WEB-INF/images/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/common/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/META-INF/resources/WEB-INF/common/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/register/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/META-INF/resources/WEB-INF/register/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/plugin/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/META-INF/resources/WEB-INF/plugin/&amp;quot;);
    super.addResourceHandlers(registry);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方式二（推荐）：&lt;br /&gt;
将静态资源文件放到resouce/static目录下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void addResourceHandlers(ResourceHandlerRegistry registry) {
    registry.addResourceHandler(&amp;quot;/js/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/static/js/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/css/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/static/css/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/images/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/static/images/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/register/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/static/register/&amp;quot;);
    registry.addResourceHandler(&amp;quot;/plugin/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/static/plugin/&amp;quot;);
    super.addResourceHandlers(registry);
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;文件上传&#34;&gt;文件上传&lt;/h3&gt;

&lt;p&gt;配置文件新增：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#upload
spring.http.multipart.enabled=true
spring.http.multipart.file-size-threshold=0  #0-ALLFILE
spring.http.multipart.location=D:/fsrzfw/temp
spring.http.multipart.max-file-size=10Mb
spring.http.multipart.max-request-size=10Mb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新增配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 配置上传文件大小的配置
 * @return
 */
@Bean
public MultipartConfigElement multipartConfigElement() {
   MultipartConfigFactory factory = new MultipartConfigFactory();
   //  单个数据大小
   factory.setMaxFileSize(&amp;quot;102400KB&amp;quot;);
   /// 总上传数据大小
   factory.setMaxRequestSize(&amp;quot;102400KB&amp;quot;);
   return factory.createMultipartConfig();
}

/**
 * MultipartFile 转换成File
 * update by wm 2018.07.12
 * @param multfile 原文件类型
 * @return File
 * @throws IOException
 */
public static File multipartToFile(MultipartFile multfile) throws IOException {
    //Springboot自带上传不支持CommonsMultipartFile
    //CommonsMultipartFile cf = (CommonsMultipartFile)multfile;
    //这个myfile是MultipartFile的
    //DiskFileItem fi = (DiskFileItem) cf.getFileItem();
    //return fi.getStoreLocation();

    File f = null;
    if (&amp;quot;&amp;quot;.equals(multfile) || multfile.getSize() &amp;lt;= 0) {
        multfile = null;
    } else {
        InputStream ins = multfile.getInputStream();
        f = new File(multfile.getOriginalFilename());
        StreamUtil.streamSaveAsFile(ins, f);
    }
    return f;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;打jar包运行&#34;&gt;打JAR包运行&lt;/h3&gt;

&lt;p&gt;pom新增配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;build&amp;gt;
    &amp;lt;finalName&amp;gt;fsrzfw&amp;lt;/finalName&amp;gt;
    &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;
                &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;
                &amp;lt;encoding&amp;gt;UTF-8&amp;lt;/encoding&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;mainClass&amp;gt;cn.com.do1.component.Application&amp;lt;/mainClass&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;executions&amp;gt;
                &amp;lt;execution&amp;gt;
                    &amp;lt;goals&amp;gt;
                        &amp;lt;goal&amp;gt;repackage&amp;lt;/goal&amp;gt;
                    &amp;lt;/goals&amp;gt;
                &amp;lt;/execution&amp;gt;
            &amp;lt;/executions&amp;gt;
            &amp;lt;dependencies&amp;gt;
                &amp;lt;!-- spring热部署 --&amp;gt;
                &amp;lt;dependency&amp;gt;
                    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;springloaded&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;1.2.6.RELEASE&amp;lt;/version&amp;gt;
                &amp;lt;/dependency&amp;gt;
            &amp;lt;/dependencies&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;maven-resources-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;nonFilteredFileExtensions&amp;gt;
                    &amp;lt;nonFilteredFileExtension&amp;gt;ttf&amp;lt;/nonFilteredFileExtension&amp;gt;
                    &amp;lt;nonFilteredFileExtension&amp;gt;woff&amp;lt;/nonFilteredFileExtension&amp;gt;
                    &amp;lt;nonFilteredFileExtension&amp;gt;woff2&amp;lt;/nonFilteredFileExtension&amp;gt;
                &amp;lt;/nonFilteredFileExtensions&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
    &amp;lt;resources&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/java&amp;lt;/directory&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;**/**&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
        &amp;lt;/resource&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/resource&amp;lt;/directory&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;**/**&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
        &amp;lt;/resource&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/webapp&amp;lt;/directory&amp;gt;
            &amp;lt;!-- 处理jar包启动无法访问jsp的问题 --&amp;gt;
            &amp;lt;targetPath&amp;gt;META-INF/resources&amp;lt;/targetPath&amp;gt;
            &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;**/**&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
        &amp;lt;/resource&amp;gt; 
    &amp;lt;/resources&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行mvn install，target目录下（生成fsrzfw.jar）执行 java -jar fsrzfw.jar&lt;/p&gt;

&lt;h3 id=&#34;application配置&#34;&gt;application配置&lt;/h3&gt;

&lt;p&gt;版本一些配置区别&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;springboot1.5&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;springboot2.0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;server.context-path&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;emsp;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;server.servlet.context-path&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
      
    </item>
    
    <item>
      <title>SpringBoot——使用springboot所见问题简单记录</title>
      <link>https://ianeiu.github.io/2018/10/30/springboot%E4%BD%BF%E7%94%A8springboot%E6%89%80%E8%A7%81%E9%97%AE%E9%A2%98%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/10/30/springboot%E4%BD%BF%E7%94%A8springboot%E6%89%80%E8%A7%81%E9%97%AE%E9%A2%98%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;如非说明，皆是使用1.5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现象1：引入layer.js出现undefinedcss目录&lt;br /&gt;
原因：layer.js与layui.js冲突&lt;br /&gt;
解决：将layui.js 第二个.link 中的n.dir改为(n.dir?n.dir:r)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;现象2：配置CommonsMultipartResolver，上传文件返回异常HttpMediaTypeNotSupportedException&lt;br /&gt;
原因：同下&lt;br /&gt;
解决：FUN1、不配置CommonsMultipartResolver&lt;br /&gt;
    FUN2、启动类@EnableAutoConfiguration(exclude = {MultipartAutoConfiguration.class}) （不建议）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;现象3：上传文件返回异常java.lang.ClassCastException:   org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile cannot be cast to org.springframework.web.multipart.commons.CommonsMultipartFile&lt;br /&gt;
原因：FileUtil中multipartToFile的代码片段  CommonsMultipartFile cf = (CommonsMultipartFile)multfile  与springboot自带的org.springframework.web.multipart.MultipartFile冲突&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import org.springframework.web.multipart.commons.CommonsMultipartResolver;//这是旧项目引入的  
import org.springframework.web.multipart.MultipartFile;//这是springboot整合的  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决：采用输入流方式获取File对象，具体代码自行百度&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;现象4：Shiro 自定义 filter 匹配异常，无限拦截重定向&lt;br /&gt;
参考：&lt;a href=&#34;http://www.hillfly.com/2017/179.html&#34; target=&#34;blank&#34;&gt;Shiro 自定义 filter 匹配异常&lt;/a&gt;&lt;br /&gt;
原因：自定义Filter注册为了 Bean交给 Spring托管,它会被自动注册到  FilterChain中。请求先经过自定义Filter，导致请求被其先消费掉了，而ShiroFilter成了摆设。&lt;br /&gt;
解决：FUN1、利用 FilterRegistrationBean 注册自定义 Filter （建议使用）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ex：
    @Bean
    public CasFilter casFilter(){
        CasFilter cf = new CasFilter();
        cf.setSuccessUrl(successUrl);
        cf.setFailureUrl(failureUrl);
        return cf;
    }

    /**
     * 注册casFilter
     * @param casFilter
     * @return
     */
    @Bean
    public FilterRegistrationBean registCasFilter(CasFilter casFilter) {
        FilterRegistrationBean cas = new FilterRegistrationBean();
        cas.setFilter(casFilter);
        cas.setEnabled(false);  //该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理  x
        return cas;
    }

    /**
     * 注册shiroFilter
     * @param securityManager
     * @param casFilter
     * @param logoutFilter
     * @return
     */
    @Bean
    public ShiroFilterFactoryBean shiroFilter(DefaultWebSecurityManager securityManager,
            CasFilter casFilter,LogoutFilter logoutFilter) {
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        ...
        Map&amp;lt;String,Filter&amp;gt; filters = new HashMap&amp;lt;&amp;gt;();
        filters.put(&amp;quot;casFilter&amp;quot;,casFilter);
        filters.put(&amp;quot;logoutFilter&amp;quot;, logoutFilter);
        shiroFilterFactoryBean.setFilters(filters);     //添加casFilter到shiroFilter
        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;FUN2、将 CasFilter注册为了 Bean交给 Spring托管,它会被自动注册到 FilterChain中，那我们如果不把它注册为 Bean就可以避免这个问题了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ex:
    /**
     * 注册shiroFilter
     * @param securityManager
     * @return
     */
    @Bean
    public ShiroFilterFactoryBean shiroFilter(DefaultWebSecurityManager securityManager) {
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        ...
        Map&amp;lt;String,Filter&amp;gt; filters = new HashMap&amp;lt;&amp;gt;();
        filters.put(&amp;quot;casFilter&amp;quot;,new CasFilter());
        filters.put(&amp;quot;logoutFilter&amp;quot;, new LogoutFilter());
        shiroFilterFactoryBean.setFilters(filters);     //添加casFilter到shiroFilter
        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;现象5：启动报错Caused by: java.lang.NoClassDefFoundError: ch/qos/logback/classic/turbo/TurboFilter&lt;br /&gt;
原因:springboot1.3.x和1.3.x以下版本才支持log4j的日志配置，1.3.x以上版本只支持log4j2和logback的日志配置&lt;br /&gt;
解决：使用log4j2或logback&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;现象6：项目mvn install后jar包，启动报错，未获取到某个包下的class对象集合&lt;br /&gt;
原因：springboot项目打包后获取包资源所在路径与启动main不一样&lt;br /&gt;
ex：//jarPaht:file:/E:/IDEABuilder/fs/tyrz-springboot/tyrz-front/target/fsrzfw.jar!/BOOT-INF/classes!/cn/com/do1/component/identitySource/service/impl&lt;br /&gt;
解决：逐一分割路径获取类对象&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 获得包下面的所有的class
 * @author FengHuayuan
 * @date 2018年4月21日 下午12:25:20.
 * @param pack
 * @return
 */
public static List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; getClassesFromPackage(String pack) {
    List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; clazzs = new ArrayList&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;();
    // 是否循环搜索子包
    boolean recursive = true;
    // 包名字
    String packageName = pack;
    // 包名对应的路径名称
    String packageDirName = packageName.replace(&#39;.&#39;, &#39;/&#39;);
    Enumeration&amp;lt;URL&amp;gt; dirs;
    try {
        dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);
        while (dirs.hasMoreElements()) {
            URL url = dirs.nextElement();
            String protocol = url.getProtocol();
            if (&amp;quot;file&amp;quot;.equals(protocol)) {
                log.debug(&amp;quot;*****【File类型】的扫描！&amp;quot;);
                String filePath = URLDecoder.decode(url.getFile(), &amp;quot;UTF-8&amp;quot;);
                findClassInPackageByFile(packageName, filePath, recursive, clazzs);
            } else if (&amp;quot;jar&amp;quot;.equals(protocol)) {
                log.debug(&amp;quot;*****【Jar类型】的扫描！&amp;quot;);
                String filePath = URLDecoder.decode(url.getFile(), &amp;quot;UTF-8&amp;quot;);
                getClasssFromJarFile(filePath, clazzs);//wm add
            }
        }

    } catch (Exception e) {
        log.error(e.getMessage(),e);
    }
    return clazzs;
}

/** 
 * 从jar文件中读取指定目录下面的所有的class文件 
 * springboot打jar包专用
 * @author wm
 * @param jarPaht   jar文件存放的位置 
 * @param filePaht    指定的文件目录 
 * @param clazzs 所有的的class的对象 
 */  
public static void getClasssFromJarFile(String jarPath,List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; clazzs) {  

    log.info(&amp;quot;getClasssFromJarFile - jarPath:&amp;quot;+jarPath);//wm
    //jarPaht:file:/E:/IDEABuilder/fs/tyrz-springboot/tyrz-front/target/fsrzfw.jar!/BOOT-INF/classes!/cn/com/do1/component/identitySource/service/impl
    String[] jarPaths = jarPath.split(&amp;quot;!&amp;quot;);
    String jarPaht=jarPaths[0].substring(6);//去掉file:/
    String startDir = (jarPaths[1]+jarPaths[2]).substring(1);//去掉/

    JarFile jarFile = null;  
    try {  
        jarFile = new JarFile(jarPaht);  
    } catch (IOException e1) {  
        e1.printStackTrace();  
    }  

    List&amp;lt;JarEntry&amp;gt; jarEntryList = new ArrayList&amp;lt;JarEntry&amp;gt;();  

    Enumeration&amp;lt;JarEntry&amp;gt; ee = jarFile.entries();  
    while (ee.hasMoreElements()) {  
        JarEntry entry = (JarEntry) ee.nextElement();  
        if (entry.getName().startsWith(startDir) &amp;amp;&amp;amp; entry.getName().endsWith(&amp;quot;.class&amp;quot;)) {  
            log.info(&amp;quot;getClasssFromJarFile - entry:&amp;quot;+entry.getName());//wm
            jarEntryList.add(entry);  
        }  
    }  
    for (JarEntry entry : jarEntryList) {  
        String className = entry.getName().replace(&#39;/&#39;, &#39;.&#39;);  
        //   BOOT-INF/classes/cn/com/do1/component/identitySource/service/impl/XXX.class
        className = className.substring(17, className.length() - 6);//去掉  BOOT-INF/classes/     .class
        try {  
            clazzs.add(Thread.currentThread().getContextClassLoader().loadClass(className));  
        } catch (ClassNotFoundException e) {  
            e.printStackTrace();  
        }  
    }  

}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;现象7：启动jar包，访问登录，报NoClassDefFoundError RedisCacheManager&lt;br /&gt;
解决：注释pom配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-devtools&amp;lt;/artifactId&amp;gt;
    &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;现象8：jar包启动无法访问jsp的问题&lt;br /&gt;
原因:&lt;a href=&#34;https://www.jb51.net/article/141474.htm&#34; target=&#34;blank&#34;&gt;深入Spring Boot实现对Fat Jar jsp的支持&lt;/a&gt;&lt;br /&gt;
解决：亲测有效，需两步&lt;br /&gt;
&amp;emsp;步骤1、新增两个类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    import java.io.File;
    import java.net.MalformedURLException;
    import java.net.URL;

    import org.apache.catalina.Context;
    import org.apache.catalina.Lifecycle;
    import org.apache.catalina.LifecycleEvent;
    import org.apache.catalina.LifecycleListener;
    import org.apache.catalina.WebResourceRoot.ResourceSetType;
    import org.springframework.util.ResourceUtils;

    /**
     * Add main class fat jar/exploded directory into tomcat ResourceSet.
     *
     * @author hengyunabc 2017-07-29
     *
     */
    public class StaticResourceConfigurer implements LifecycleListener {

        private final Context context;

        StaticResourceConfigurer(Context context) {
            this.context = context;
        }

        @Override
        public void lifecycleEvent(LifecycleEvent event) {
            if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) {
                URL location = this.getClass().getProtectionDomain().getCodeSource().getLocation();

                if (ResourceUtils.isFileURL(location)) {
                    // when run as exploded directory
                    String rootFile = location.getFile();
                    if (rootFile.endsWith(&amp;quot;/BOOT-INF/classes/&amp;quot;)) {
                        rootFile = rootFile.substring(0, rootFile.length() - &amp;quot;/BOOT-INF/classes/&amp;quot;.length() + 1);
                    }
                    if (!new File(rootFile, &amp;quot;META-INF&amp;quot; + File.separator + &amp;quot;resources&amp;quot;).isDirectory()) {
                        return;
                    }

                    try {
                        location = new File(rootFile).toURI().toURL();
                    } catch (MalformedURLException e) {
                        throw new IllegalStateException(&amp;quot;Can not add tomcat resources&amp;quot;, e);
                    }
                }

                String locationStr = location.toString();
                if (locationStr.endsWith(&amp;quot;/BOOT-INF/classes!/&amp;quot;)) {
                    // when run as fat jar
                    locationStr = locationStr.substring(0, locationStr.length() - &amp;quot;/BOOT-INF/classes!/&amp;quot;.length() + 1);
                    try {
                        location = new URL(locationStr);
                    } catch (MalformedURLException e) {
                        throw new IllegalStateException(&amp;quot;Can not add tomcat resources&amp;quot;, e);
                    }
                }
                this.context.getResources().createWebResourceSet(ResourceSetType.RESOURCE_JAR, &amp;quot;/&amp;quot;, location,
                        &amp;quot;/META-INF/resources&amp;quot;);

            }
        }
    }

    import org.apache.catalina.Context;
    import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
    import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
    import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
    import org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;
    import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;

    /**
     * 处理1.5版本jar包启动无法访问jsp的问题
     * &amp;lt;p&amp;gt;Title: TomcatConfig&amp;lt;/p&amp;gt;  
     * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;  
     * @author wm  
     * @date 2018年7月24日
     */
    @Configuration
    @ConditionalOnProperty(name = &amp;quot;tomcat.staticResourceCustomizer.enabled&amp;quot;, matchIfMissing = true)
    public class TomcatConfig {
        @Bean
        public EmbeddedServletContainerCustomizer staticResourceCustomizer() {
            return new EmbeddedServletContainerCustomizer() {
                @Override
                public void customize(ConfigurableEmbeddedServletContainer container) {
                    if (container instanceof TomcatEmbeddedServletContainerFactory) {
                        ((TomcatEmbeddedServletContainerFactory) container)
                                .addContextCustomizers(new TomcatContextCustomizer() {
                                    @Override
                                    public void customize(Context context) {
                                        context.addLifecycleListener(new StaticResourceConfigurer(context));
                                    }
                                });
                    }
                }

            };
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;步骤2，pom配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;resources&amp;gt;
        ...
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/webapp&amp;lt;/directory&amp;gt;
            &amp;lt;!-- 处理jar包启动无法访问jsp的问题 --&amp;gt;
            &amp;lt;targetPath&amp;gt;META-INF/resources&amp;lt;/targetPath&amp;gt;
            &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;**/**&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
        &amp;lt;/resource&amp;gt; 
    &amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;现象9：启动项目报错ClassNotFoundException: javax.ws.rs.core.Response$StatusType&lt;br /&gt;
解决：pom引入jsr311-api（g:javax.ws.rs）(a:jsr311-api)（v:1.1.1）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;现象10：整合redis报 NOAUTH Authentication required&lt;br /&gt;
原因：spring.redis.password=yourpassword 配置在JedisConnectionFactory中没有被加载进去&lt;br /&gt;
解决：手动获取自定义或原配置密码进行配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Value(&amp;quot;${redis.address}&amp;quot;)
private String hostName;
@Value(&amp;quot;${redis.port}&amp;quot;)
private String port;
@Value(&amp;quot;${redis.password}&amp;quot;)
private String password;

@Bean
public JedisConnectionFactory jedisConnectionFactory(){
    JedisConnectionFactory jcf = new JedisConnectionFactory();
    jcf.setHostName(hostName);
    jcf.setPort(Integer.parseInt(port));
    jcf.setPassword(password);
    return jcf;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;现象11：使用@Value没有取到值&lt;br /&gt;
原因：XXX类静态构造TyrzBackSecurityAdaptor 无法直接获取&lt;br /&gt;
解决：使用注入方式实例化TyrzBackSecurityAdaptor&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Component
public class TyrzBackSecurityAdaptor extends AbstractSecurityAdaptor{
	@Value(&amp;quot;${qxws.address}&amp;quot;)
	private String address;
	
	...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;XXX原代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class XXX｛
	/**
	 * 安全管理器
	 * @return
	 */
	@Bean
	public SecurityManager getSecurityManager() {
		SecurityManager securityManager = new SecurityManager();
		securityManager.setAdaptor(new TyrzBackSecurityAdaptor());
		securityManager.setContextConfigLocation(&amp;quot;security.xml&amp;quot;);
		securityManager.setHttpConnectTimeout(1200000);
		securityManager.setHttpSocketTimeout(1200000);
		return securityManager;
	}
｝
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改后&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class XXX｛
	@Autowired
    private TyrzBackSecurityAdaptor tyrzBackSecurityAdaptor;

    /**
     * 安全管理器
     * @return
     */
	@Bean
	public SecurityManager getSecurityManager() {
		SecurityManager securityManager = new SecurityManager();
		securityManager.setAdaptor(tyrzBackSecurityAdaptor);
		securityManager.setContextConfigLocation(&amp;quot;security.xml&amp;quot;);
		securityManager.setHttpConnectTimeout(1200000);
		securityManager.setHttpSocketTimeout(1200000);
		return securityManager;
	}
｝
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
  </channel>
</rss>
