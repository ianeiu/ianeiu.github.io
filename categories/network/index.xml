<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>network on 吴炜棉</title>
    <link>https://ianeiu.github.io/categories/network/</link>
    <description>Recent content in network on 吴炜棉</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 19 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://ianeiu.github.io/categories/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TCP与UDP笔记</title>
      <link>https://ianeiu.github.io/p/tcp%E4%B8%8Eudp%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/p/tcp%E4%B8%8Eudp%E7%AC%94%E8%AE%B0/</guid>
      <description>tcp/ip协议 TCP/IP协议族是一个四层协议系统，自底而上分别是数据链路层、网络层、传输层和应用层。每一层完成不同的功能，且通过若干协议来实现，上层协议使用下层协议提供的服务。
 数据链路层负责帧数据的传递; 网络层责数据怎样传递过去; 传输层负责传输数据的控制（准确性、安全性）; 应用层负责数据的展示和获取。  物理层： 为数据端设备提供传送数据的通路，数据通路可以是一个物理媒体，也可以是多个物理媒体连接而成。
TCP协议  Transmission Control Protocol，传输控制协议 面向连接的协议 需要三次握手建立连接 需要四次挥手断开连接 TCP报头最小长度：20字节  TCP与UDP 面向报文的传输方式是应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。因此，应用程序必须选择合适大小的报文。若报文太长，则IP层需要分片，降低效率。若太短，会是IP太小。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。这也就是说，应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。 面向字节流的话，虽然应用程序和TCP的交互是一次一个数据块（大小不等），但TCP把应用程序看成是一连串的无结构的字节流。TCP有一个缓冲，当应用程序传送的数据块太长，TCP就可以把它划分短一些再传送。如果应用程序一次只发送一个字节，TCP也可以等待积累有足够多的字节后再构成报文段发送出去。
TCP与UDP的区别 1、基于连接与无连接;
2、TCP要求系统资源较多，UDP较少; 3、UDP程序结构较简单;
4、流模式（TCP）与数据报模式(UDP);
5、TCP保证数据正确性，UDP可能丢包;
6、TCP保证数据顺序，UDP不保证。
三次握手的过程  客户端发送：SYN = 1, SEQ = X, 端口号 服务器回复：SYN = 1, ACK = X + 1, SEQ = Y 客户端发送：ACK = Y + 1, SEQ = X + 1   确认应答信号ACK = 收到的SEQ + 1。连接建立中，同步信号SYN始终为1。连接建立后，同步信号SYN=0。
 Tcp建立连接的过程</description>
    </item>
    
    <item>
      <title>计算机网络基础汇总</title>
      <link>https://ianeiu.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/</guid>
      <description>计算机网络体系分类： 计算机网络整个体系有两个大的分类：一个是国际组织制定的OSI七层模型，一种是实际使用中的TCP/IP四层模型。
   OSI七层模型 TCP/IP四层模型     应用层    表示层 应用层   会话层    传输层 传输层   网络层 网络层   数据链路层 物理接入层   物理层     物理层： 物理层主要是实现主机和网络之间的物理连接，规定一些与传输媒体接口有关的一些特性。
通信方式：   **单工通信：**只能由A主机向B主机发送消息，通信是单向的。
  **半双工通信：**同一时间只能是由A主机向B主机或者是B主机向A主机发送信息，不能同时发送消息。
  全双工通信： A主机和B主机可以实现在同一时间内既接收消息，又发送消息，极大的提升了通信效率。
  常见引导型传输媒体： 双绞线： 分为屏蔽双绞线（STP）和非屏蔽双绞线（UTP），屏蔽双绞线就是在非屏蔽双绞线外边又加了一层屏蔽层
tips：为什么双绞线要两根线绞起来，两个线绞起来可以有效的减少相互之间的电磁干扰。
同轴电缆： 由内导体铜制芯线，绝缘层，网状编织的外导体屏蔽层，以及塑料保护外层组成。有良好的抗干扰性，被广泛用于较高速率的传输。
光缆： 由非常透明的石英玻璃拉成细丝，主要由纤芯和包层构成双层通讯柱。可以分为单模光纤和多模光纤。
信道复用技术：   **频分复用：**根据传输的波的频率的不同，将不同频段的波用于不同的通信。
  时分复用：将时间分割为时间段，规定在某个时间段内发送什么样的信息，根据时间段来进行信息类别的区分。也称为同步时分复用</description>
    </item>
    
    <item>
      <title>Http笔记</title>
      <link>https://ianeiu.github.io/p/http%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/p/http%E7%AC%94%E8%AE%B0/</guid>
      <description>浏览器输入URL到返回页面的过程  根据域名，进行DNS域名解析 拿到解析的IP地址，建立TCP连接 向IP地址发送HTTP请求 服务器处理请求 返回响应结果 关闭TCP连接 浏览器解析HTML 浏览器布局渲染  简介 HTTP即超文本传输协议（HTTP，Hyper Text Transport Protocol）。HTTP协议默认监听80端口，主要用于描述请求和响应的数据格式。
版本  0.9　已过时。只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。 HTTP/1.0　建立连接后只能请求响应一次 HTTP/1.1　持久连接（可以进行多次请求和响应）被默认采用，能很好地配合代理服务器工作。还支持以管道方式同时发送多个请求，以便降低线路负载，提高传输速度  维持和服务器已经建立的 TCP 连接，在同一连接上顺序处理多个请求   刷新页面不需要重新建立 SSL 连接   和服务器建立多个 TCP 连接 Pipelining 实现同一时刻只能处理一个请求  浏览器是没有办法根据响应结果来判断响应对应于哪一个请求的 一些代理服务器不能正确的处理 HTTP Pipelining Head-of-line Blocking 连接头阻塞     HTTP/2 多个 HTTP 请求可以在同一个 TCP 连接中并行进行（Multiplexing ）  浏览器对同一 Host 建立 TCP 连接到数量有没有限制 有。Chrome 最多允许对同一个 Host 建立六个 TCP 连接。不同的浏览器有一些区别。</description>
    </item>
    
    <item>
      <title>WebService简介</title>
      <link>https://ianeiu.github.io/p/webservice%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/p/webservice%E7%AE%80%E4%BB%8B/</guid>
      <description>WebService简介 webService（又名XML Web Service）是一种跨语言跨操作系统的远程调用技术（是一种可以接收从Internet或者Intranet上的其它系统中传递过来的请求，轻量级的独立的通讯技术）。
WebService平台技术 XML+XSD WebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，以及服务对象的 返回结果是什么）。
XML是WebService平台中表示数据的格式。除了易于建立和易于分析外，XML主要的优点在于它既是平台无关的，又是厂商无关的。
SOAP SOAP是&amp;quot;简单对象访问协议&amp;quot;，是一种简单的、基于HTTP和XML的协议, 用于在WEB上交换结构化的数据。
soap消息：请求消息和响应消息
WSDL WSDL是webservice定义语言, 对应.wsdl文档, 一个webservice会对应一个唯一的wsdl文档, 定义了客户端与服务端发送请求和响应的数据格式和过程。
工作调用原理 对客户端而言，我们给这各类WebService客户端API传递wsdl文件的url地址，这些API就会创建出底层的代理类，我们调用 这些代理，就可以访问到webservice服务。
代理类把客户端的方法调用变成soap格式的请求数据再通过HTTP协议发出去，并把接收到的soap 数据变成返回值返回。
对服务端而言，各类WebService框架的本质就是一个大大的Servlet，当远程调用客户端给它通过http协议发送过来 soap格式的请求数据时，它分析这个数据，就知道要调用哪个java类的哪个方法，于是去查找或创建这个对象，并调用其方法，再把方法返回的结果包装成 soap格式的数据，通过http响应消息回给客户端。
相比HTTP（post/get）的优势  接口中实现的方法和要求参数一目了然 不用担心大小写问题 不用担心中文urlencode问题 代码中不用多次声明认证(账号,密码)参数 传递参数可以为数组，对象等  框架简介 JWS JWS是Java语言对WebService服务的一种实现，用来开发和发布服务。而从服务本身的角度来看JWS服务是没有语言界限的。但是Java语言为Java开发者提供便捷发布和调用WebService服务的一种途径。
Axis2 Axis2是从Axis1.x系列发展而来，不过它从底层全部重新实现，使用了新的扩展性更好模块架构。
Axis2是Apache下的一个重量级WebService框架，准确说它是一个Web Services / SOAP / WSDL 的引擎，是WebService框架的集大成者，它能不但能制作和发布WebService，而且可以生成Java和其他语言版WebService客户端和服务端代码。这是它的优势所在。但是，这也不可避免的导致了Axis2的复杂性，使用过的开发者都知道，它所依赖的包数量和大小都是很惊人的，打包部署发布都比较麻烦，不能很好的与现有应用整合为一体。但是如果你要开发Java之外别的语言客户端，Axis2提供的丰富工具将是你不二的选择。
XFire XFire是一个高性能的WebService框架，它的响应时间是Axis1.3的1/2到1/5，在Java6之前，它的知名度甚至超过了Apache的Axis2，XFire的优点是开发方便，与现有的Web整合很好，可以融为一体，并且开发也很方便。但是对Java之外的语言，没有提供相关的代码工具。XFire后来被Apache收购了，原因是它太优秀了，收购后，随着Java6 JWS的兴起，开源的WebService引擎已经不再被看好，渐渐的都败落了。现在估计只有老旧项目还在使用。
CXF CXF是Apache旗下一个重磅的SOA简易框架，它实现了ESB（企业服务总线），支持可集成spring。CXF是XFire和Celtix项目的结合产品，是XFire经过改造后形成的，就像目前的Struts2来自WebWork一样。可以看出XFire的命运会和WebWork的命运一样，最终会淡出人们的视线。CXF不但是一个优秀的Web Services / SOAP / WSDL 引擎，也是一个不错的ESB总线，为SOA的实施提供了一种选择方案，当然他不是最好的，它仅仅实现了SOA架构的一部分。
Axis2与CXF比较  通用结构WS-Policy等，数据并对XMLBeans等，Axis2与CXF后面的几个版本基本都支持了，差别不大。 CXF可以很好支持Spring。Axis2不能 Axis2支持多语言-除了Java,他还支持C/C++版本。  从开发者的角度，两个框架的特性相当的不同。
Axis2的开发方式类似一个小型的应用服务器，Axis2的开发包要以WAR的形式部署到Servlet容器中，比如Tomcat，通过这些容器可以对工作中的Web Service进行很好的监控和管理。Axis2的Web administrion模块可以让我们动态的配置Axis2.一个新的服务可以上载，激活，使之失效，修改web服务的参数。管理UI也可以管理一个或者多个处于运行状态的服务。这种界面化管理方式的一个弊端是所有在运行时修改的参数没有办法保存，因为在重启动之后，你所做的修改就会全部失效。Axis2允许自己作为独立的应用来发布Web Service，并提供了大量的功能和一个很好的模型，这个模型可以通过它本身的架构（modular architecture）不断添加新的功能。有些开发人员认为这种方式对于他们的需求太过于繁琐。这些开发人员会更喜欢CXF。
CXF更注重开发人员的工效（ergonomics）和嵌入能力（embeddability）。大多数配置都可以API来完成，替代了比较繁琐的XML配置文件， Spring的集成性经常的被提及，CXF支持Spring2.</description>
    </item>
    
    <item>
      <title>常见状态码简介</title>
      <link>https://ianeiu.github.io/p/%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 23 Aug 2018 16:01:23 +0800</pubDate>
      
      <guid>https://ianeiu.github.io/p/%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81%E7%AE%80%E4%BB%8B/</guid>
      <description>部分状态码简介 200  200—请求成功 202—常用于异步请求。客户端发送请求到服务器，服务器立即返回一个202 Accepted表示已经成功接收到客户端的请求。后面怎么处理由服务器自己决定，一般服务器会给客户端预留一个可以查询处理状态的接口，客户端可以选择轮训该接口来知道请求的处理进度和结果。  30X  301—永久移动。被请求的资源已被永久移动位置 302—请求的资源现在临时从不同的 URI 响应请求（请求重定向） 305—使用代理。被请求的资源必须通过指定的代理才能被访问 304—请求资源没有改变 307—临时跳转。被请求的资源在临时从不同的URL响应请求  4XX  400—错误请求 402—需要付款。该状态码是为了将来可能的需求而预留的，用于一些数字货币或者是微支付 403—禁止访问。服务器已经理解请求，但是拒绝执行它 404—找不到对象。请求失败，资源不存在 406—不可接受的。请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体 408—请求超时 409—冲突。由于和被请求的资源的当前状态之间存在冲突，请求无法完成 410—遗失的。被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址 413—响应实体太大(客户端上传图片太大等情况)。服务器拒绝处理当前请求，请求超过服务器所能处理和允许的最大值 414—客户端访问的URI太长，超出了服务器允许限制 417—期望失败。在请求头 Expect 中指定的预期内容无法被服务器满足 418—我是一个茶壶。超文本咖啡罐控制协议，但是并没有被实际的HTTP服务器实现 420—方法失效 422—不可处理的实体。请求格式正确，但是由于含有语义错误，无法响应  500  500—服务器内部错误。服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理  </description>
    </item>
    
  </channel>
</rss>
