<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on IanEiU</title>
    <link>https://ianeiu.github.io/posts/</link>
    <description>Recent content in Posts on IanEiU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>WuWeiMian</copyright>
    <lastBuildDate>Thu, 23 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ianeiu.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[置顶]收藏册——js、jq</title>
      <link>https://ianeiu.github.io/2018/08/23/%E7%BD%AE%E9%A1%B6%E6%94%B6%E8%97%8F%E5%86%8Cjsjq/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/23/%E7%BD%AE%E9%A1%B6%E6%94%B6%E8%97%8F%E5%86%8Cjsjq/</guid>
      <description>操作元素的样式 $(&amp;quot;#msg&amp;quot;).css(&amp;quot;background&amp;quot;); //返回元素的背景颜色 $(&amp;quot;#msg&amp;quot;).css(&amp;quot;background&amp;quot;,&amp;quot;#ccc&amp;quot;) //设定元素背景为灰色 $(&amp;quot;#msg&amp;quot;).height(300); $(&amp;quot;#msg&amp;quot;).width(&amp;quot;200&amp;quot;); //设定宽高 $(&amp;quot;#msg&amp;quot;).css({ color: &amp;quot;red&amp;quot;, background: &amp;quot;blue&amp;quot; });//以名值对的形式设定样式 $(&amp;quot;p&amp;quot;).attr(&amp;quot;class&amp;quot;, &amp;quot;ddiiyy&amp;quot;); //设置p元素的</description>
    </item>
    
    <item>
      <title>Spring——@Value注入static属性</title>
      <link>https://ianeiu.github.io/2018/09/04/springvalue%E6%B3%A8%E5%85%A5static%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/04/springvalue%E6%B3%A8%E5%85%A5static%E5%B1%9E%E6%80%A7/</guid>
      <description>@Value注入static属性 方式1： 通过执行set方法进行参数注入 private static String userName; @Value(&amp;quot;${git.userName}&amp;quot;) public void setUserName(String userName) { GitUtils.userName = userName; } 方式2： 通过中间变量赋值 private static String userName; @Value(&amp;quot;${git.userName}&amp;quot;) private String userNameTmp; @PostConstruct</description>
    </item>
    
    <item>
      <title>正则的运用——短信模版配置</title>
      <link>https://ianeiu.github.io/2018/09/04/%E6%AD%A3%E5%88%99%E7%9A%84%E8%BF%90%E7%94%A8%E7%9F%AD%E4%BF%A1%E6%A8%A1%E7%89%88%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/04/%E6%AD%A3%E5%88%99%E7%9A%84%E8%BF%90%E7%94%A8%E7%9F%AD%E4%BF%A1%E6%A8%A1%E7%89%88%E9%85%8D%E7%BD%AE/</guid>
      <description>短信模版的配置功能 需求功能如下图： 代码如下： function toExa(template){ var now = new Date(); var syear = now.getYear();//获取当前年份(2位) var year = now.getFullYear(); //获取完整的年</description>
    </item>
    
    <item>
      <title>正则贪婪模式与懒惰模式(扩展元字符)</title>
      <link>https://ianeiu.github.io/2018/09/04/%E6%AD%A3%E5%88%99%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%87%92%E6%83%B0%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95%E5%85%83%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/04/%E6%AD%A3%E5%88%99%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%87%92%E6%83%B0%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95%E5%85%83%E5%AD%97%E7%AC%A6/</guid>
      <description>前言 之前做过一个短信模版的配置功能，需要用到大量的正则判断，其中有一个方法涉及到正则贪婪模式与懒惰模式，今天刚好抽时间整理下。 /** * 创建文本预</description>
    </item>
    
    <item>
      <title>侃侃而谈——WebService及框架简介</title>
      <link>https://ianeiu.github.io/2018/09/03/%E4%BE%83%E4%BE%83%E8%80%8C%E8%B0%88webservice%E5%8F%8A%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/09/03/%E4%BE%83%E4%BE%83%E8%80%8C%E8%B0%88webservice%E5%8F%8A%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</guid>
      <description>WebService简介 webService（又名XML Web Service）是一种跨语言跨操作系统的远程调用技术（是一种可以接收从Intern</description>
    </item>
    
    <item>
      <title>SpringMVC的九大组件</title>
      <link>https://ianeiu.github.io/2018/08/30/springmvc%E7%9A%84%E4%B9%9D%E5%A4%A7%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/30/springmvc%E7%9A%84%E4%B9%9D%E5%A4%A7%E7%BB%84%E4%BB%B6/</guid>
      <description>SpringMVC的九大组件 前言 建议先阅读 SpringMVC的运行流程 组件 HandlerMapping 处理器映射器:根据请求url找到具体的处理器，生成处理器对象及处</description>
    </item>
    
    <item>
      <title>SpringMVC的运行流程</title>
      <link>https://ianeiu.github.io/2018/08/30/springmvc%E7%9A%84%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/30/springmvc%E7%9A%84%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid>
      <description>SpringMVC的运行流程 用户发送请求至前置控制器DispatcherServlet DispatcherServlet收到请求调用Hand</description>
    </item>
    
    <item>
      <title>Java基础题（Integer）</title>
      <link>https://ianeiu.github.io/2018/08/29/java%E5%9F%BA%E7%A1%80%E9%A2%98integer/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/29/java%E5%9F%BA%E7%A1%80%E9%A2%98integer/</guid>
      <description>翻了翻之前收藏的文章，找到一段比较有意思的代码 Integer a = 1000,b=1000; Integer c = 100,d=100; @Test public void testIntegerDD(){ System.out.println(a==b);//false System.out.println(c==d);//true } 运行代码，我们会得到 false true。这道题笔试用经常出现，原理也很简</description>
    </item>
    
    <item>
      <title>Java基础题（String）</title>
      <link>https://ianeiu.github.io/2018/08/29/java%E5%9F%BA%E7%A1%80%E9%A2%98string/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/29/java%E5%9F%BA%E7%A1%80%E9%A2%98string/</guid>
      <description>翻了翻之前收藏的文章，又找到一段比较有意思的代码 @Test public void testStringDD() { String s1 = &amp;quot;hello&amp;quot;; String s2 = &amp;quot;hello&amp;quot;; String s3 = new String(&amp;quot;hello&amp;quot;); System.out.println(s1==s2); // true System.out.println(s1==s3); // false } 文章解释： 一些基本类型的变量和对象的引用变</description>
    </item>
    
    <item>
      <title>Java基础题（内部类与final）</title>
      <link>https://ianeiu.github.io/2018/08/29/java%E5%9F%BA%E7%A1%80%E9%A2%98%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8Efinal/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/29/java%E5%9F%BA%E7%A1%80%E9%A2%98%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8Efinal/</guid>
      <description>翻了翻之前收藏的文章，又又找到一段比较有意思的代码 public void mRun(final String name){ new Runnable() { public void run() { try { Thread.sleep(1000); } catch (InterruptedException e) { // TODO Auto-generated catch block e.printStackTrace(); } System.out.println(name); } }.start(); } 文章解释： 这种代码相信大家写</description>
    </item>
    
    <item>
      <title>Spring常用注解</title>
      <link>https://ianeiu.github.io/2018/08/29/spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/29/spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</guid>
      <description>属性注入 @Autowired 自动装配，可消除代码里的getter/setter与bean属性中的property 如果不使用注解自动注入，必须通过代码手动注入,</description>
    </item>
    
    <item>
      <title>外网无法内网FTP（200 Type set to A）</title>
      <link>https://ianeiu.github.io/2018/08/23/%E5%A4%96%E7%BD%91%E6%97%A0%E6%B3%95%E5%86%85%E7%BD%91ftp200-type-set-to-a/</link>
      <pubDate>Thu, 23 Aug 2018 16:01:23 +0800</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/23/%E5%A4%96%E7%BD%91%E6%97%A0%E6%B3%95%E5%86%85%E7%BD%91ftp200-type-set-to-a/</guid>
      <description>FTP 搭建好后在外网访问出想以下错误： 在Windows 资源管理器访问FTP站点弹出 FTP文件夹错误 打开FTP 服务器上的文件夹时发生错误。请检查是</description>
    </item>
    
    <item>
      <title>常见状态码简介</title>
      <link>https://ianeiu.github.io/2018/08/23/%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 23 Aug 2018 16:01:23 +0800</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/23/%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81%E7%AE%80%E4%BB%8B/</guid>
      <description>部分状态码简介 200 200—请求成功 30X 301—永久移动。被请求的资源已被永久移动位置 302—请求的资源现在临时从不同的 URI 响应请求（请求重定向） 3</description>
    </item>
    
    <item>
      <title>IDEA 修复 弹窗License activation报this license BIG3CLIK6F has been cancelled</title>
      <link>https://ianeiu.github.io/2018/08/23/idea-%E4%BF%AE%E5%A4%8D-%E5%BC%B9%E7%AA%97license-activation%E6%8A%A5this-license-big3clik6f-has-been-cancelled/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/23/idea-%E4%BF%AE%E5%A4%8D-%E5%BC%B9%E7%AA%97license-activation%E6%8A%A5this-license-big3clik6f-has-been-cancelled/</guid>
      <description>修改系统配置 Linux在/etc/hosts中添加 0.0.0.0 account.jetbrains.com windows在C:\Windows\System32\drivers\etc\hos</description>
    </item>
    
    <item>
      <title>IllegalStateException</title>
      <link>https://ianeiu.github.io/2018/08/23/illegalstateexception/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ianeiu.github.io/2018/08/23/illegalstateexception/</guid>
      <description>做开发的时候，有时候报错： java.lang.IllegalStateException: Cannot call sendError() after the response has been committed 字面上是参数异常， 在response已经提交之后 不能发送错误请求。 下面看个例子就一目了然了： response.setContentType(&amp;ldquo;text/html;charset=UTF-8&amp;rdquo;);</description>
    </item>
    
  </channel>
</rss>